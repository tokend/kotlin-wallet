// Automatically generated by xdrgen 
// DO NOT EDIT or your changes may be overwritten

package org.tokend.wallet.xdr

import org.tokend.wallet.xdr.utils.*

// === xdr source ============================================================

//  typedef opaque Value<>;

//  ===========================================================================
public typealias Value = ByteArray

// === xdr source ============================================================

//  struct SCPBallot
//  {
//      uint32 counter; // n
//      Value value;    // x
//  };

//  ===========================================================================
open class SCPBallot(
    var counter: Uint32,
    var value: Value
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    counter.toXdr(stream)
    value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  enum SCPStatementType
//  {
//      PREPARE = 0,
//      CONFIRM = 1,
//      EXTERNALIZE = 2,
//      NOMINATE = 3
//  };

//  ===========================================================================
public enum class SCPStatementType(val value: Int): XdrEncodable {
  PREPARE(0),
  CONFIRM(1),
  EXTERNALIZE(2),
  NOMINATE(3),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct SCPNomination
//  {
//      Hash quorumSetHash; // D
//      Value votes<>;      // X
//      Value accepted<>;   // Y
//  };

//  ===========================================================================
open class SCPNomination(
    var quorumSetHash: Hash,
    var votes: Array<Value>,
    var accepted: Array<Value>
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    quorumSetHash.toXdr(stream)
    votes.size.toXdr(stream)
    votes.forEach {
      it.toXdr(stream)
    }
    accepted.size.toXdr(stream)
    accepted.forEach {
      it.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  struct SCPStatement
//  {
//      NodeID nodeID;    // v
//      uint64 slotIndex; // i
//  
//      union switch (SCPStatementType type)
//      {
//      case PREPARE:
//          struct
//          {
//              Hash quorumSetHash;       // D
//              SCPBallot ballot;         // b
//              SCPBallot* prepared;      // p
//              SCPBallot* preparedPrime; // p'
//              uint32 nC;                // c.n
//              uint32 nH;                // h.n
//          } prepare;
//      case CONFIRM:
//          struct
//          {
//              SCPBallot ballot;   // b
//              uint32 nPrepared;   // p.n
//              uint32 nCommit;     // c.n
//              uint32 nH;          // h.n
//              Hash quorumSetHash; // D
//          } confirm;
//      case EXTERNALIZE:
//          struct
//          {
//              SCPBallot commit;         // c
//              uint32 nH;                // h.n
//              Hash commitQuorumSetHash; // D used before EXTERNALIZE
//          } externalize;
//      case NOMINATE:
//          SCPNomination nominate;
//      }
//      pledges;
//  };

//  ===========================================================================
open class SCPStatement(
    var nodeID: NodeID,
    var slotIndex: Uint64,
    var pledges: SCPStatementPledges
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    nodeID.toXdr(stream)
    slotIndex.toXdr(stream)
    pledges.toXdr(stream)
  }

  abstract class SCPStatementPledges(val discriminant: SCPStatementType): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class Prepare(var prepare: SCPStatementPrepare): SCPStatementPledges(SCPStatementType.PREPARE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        prepare.toXdr(stream)
      }
    }

    open class Confirm(var confirm: SCPStatementConfirm): SCPStatementPledges(SCPStatementType.CONFIRM) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        confirm.toXdr(stream)
      }
    }

    open class Externalize(var externalize: SCPStatementExternalize): SCPStatementPledges(SCPStatementType.EXTERNALIZE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        externalize.toXdr(stream)
      }
    }

    open class Nominate(var nominate: SCPNomination): SCPStatementPledges(SCPStatementType.NOMINATE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        nominate.toXdr(stream)
      }
    }

    open class SCPStatementPrepare(
        var quorumSetHash: Hash,
        var ballot: SCPBallot,
        var prepared: SCPBallot?,
        var preparedPrime: SCPBallot?,
        var nC: Uint32,
        var nH: Uint32
      ) : XdrEncodable {

      override fun toXdr(stream: XdrDataOutputStream) {
        quorumSetHash.toXdr(stream)
        ballot.toXdr(stream)
        if (prepared != null) {
          true.toXdr(stream)
          prepared?.toXdr(stream)
        } else {
          false.toXdr(stream)
        }
        if (preparedPrime != null) {
          true.toXdr(stream)
          preparedPrime?.toXdr(stream)
        } else {
          false.toXdr(stream)
        }
        nC.toXdr(stream)
        nH.toXdr(stream)
      }
    }
    open class SCPStatementConfirm(
        var ballot: SCPBallot,
        var nPrepared: Uint32,
        var nCommit: Uint32,
        var nH: Uint32,
        var quorumSetHash: Hash
      ) : XdrEncodable {

      override fun toXdr(stream: XdrDataOutputStream) {
        ballot.toXdr(stream)
        nPrepared.toXdr(stream)
        nCommit.toXdr(stream)
        nH.toXdr(stream)
        quorumSetHash.toXdr(stream)
      }
    }
    open class SCPStatementExternalize(
        var commit: SCPBallot,
        var nH: Uint32,
        var commitQuorumSetHash: Hash
      ) : XdrEncodable {

      override fun toXdr(stream: XdrDataOutputStream) {
        commit.toXdr(stream)
        nH.toXdr(stream)
        commitQuorumSetHash.toXdr(stream)
      }
    }
  }
}

// === xdr source ============================================================

//  struct SCPEnvelope
//  {
//      SCPStatement statement;
//      Signature signature;
//  };

//  ===========================================================================
open class SCPEnvelope(
    var statement: SCPStatement,
    var signature: Signature
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    statement.toXdr(stream)
    signature.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct SCPQuorumSet
//  {
//      uint32 threshold;
//      PublicKey validators<>;
//      SCPQuorumSet innerSets<>;
//  };

//  ===========================================================================
open class SCPQuorumSet(
    var threshold: Uint32,
    var validators: Array<PublicKey>,
    var innerSets: Array<SCPQuorumSet>
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    threshold.toXdr(stream)
    validators.size.toXdr(stream)
    validators.forEach {
      it.toXdr(stream)
    }
    innerSets.size.toXdr(stream)
    innerSets.forEach {
      it.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  struct AccountKYCEntry
//  {
//      AccountID accountID;
//      longstring KYCData;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class AccountKYCEntry(
    var accountID: AccountID,
    var KYCData: Longstring,
    var ext: AccountKYCEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    accountID.toXdr(stream)
    KYCData.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class AccountKYCEntryExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: AccountKYCEntryExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct AccountLimitsEntry
//  {
//      AccountID accountID;
//      Limits limits;
//  
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class AccountLimitsEntry(
    var accountID: AccountID,
    var limits: Limits,
    var ext: AccountLimitsEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    accountID.toXdr(stream)
    limits.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class AccountLimitsEntryExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: AccountLimitsEntryExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct AccountTypeLimitsEntry
//  {
//  	AccountType accountType;
//      Limits limits;
//  
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class AccountTypeLimitsEntry(
    var accountType: AccountType,
    var limits: Limits,
    var ext: AccountTypeLimitsEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    accountType.toXdr(stream)
    limits.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class AccountTypeLimitsEntryExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: AccountTypeLimitsEntryExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum SignerType
//  {
//  	READER = 1,                  // can only read data from API and Horizon
//  	NOT_VERIFIED_ACC_MANAGER = 2,// can manage not verified account and block/unblock general
//  	GENERAL_ACC_MANAGER = 4,     // allowed to create account, block/unblock, change limits for particular general account
//  	DIRECT_DEBIT_OPERATOR = 8, // allowed to perform direct debit operation
//  	ASSET_MANAGER = 16, // allowed to create assets/asset pairs and update policies, set fees
//  	ASSET_RATE_MANAGER = 32, // allowed to set physical asset price
//  	BALANCE_MANAGER = 64, // allowed to create balances, spend assets from balances
//  	ISSUANCE_MANAGER = 128, // allowed to make preissuance request
//  	INVOICE_MANAGER = 256, // allowed to create payment requests to other accounts
//  	PAYMENT_OPERATOR = 512, // allowed to review payment requests
//  	LIMITS_MANAGER = 1024, // allowed to change limits
//  	ACCOUNT_MANAGER = 2048, // allowed to add/delete signers and trust
//  	COMMISSION_BALANCE_MANAGER  = 4096,// allowed to spend from commission balances
//  	OPERATIONAL_BALANCE_MANAGER = 8192, // allowed to spend from operational balances
//  	EVENTS_CHECKER = 16384, // allow to check and trigger events
//  	EXCHANGE_ACC_MANAGER = 32768, // can manage exchange account
//  	SYNDICATE_ACC_MANAGER = 65536, // can manage syndicate account
//  	USER_ASSET_MANAGER = 131072, // can review sale, asset creation/update requests
//  	USER_ISSUANCE_MANAGER = 262144, // can review pre-issuance/issuance requests
//  	WITHDRAW_MANAGER = 524288, // can review withdraw requests
//  	FEES_MANAGER = 1048576, // can set fee
//  	TX_SENDER = 2097152, // can send tx
//  	AML_ALERT_MANAGER = 4194304, // can manage AML alert request
//  	AML_ALERT_REVIEWER = 8388608, // can review aml alert requests
//  	KYC_ACC_MANAGER = 16777216, // can manage kyc
//  	KYC_SUPER_ADMIN = 33554432,
//  	EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_MANAGER = 67108864,
//      KEY_VALUE_MANAGER = 134217728 // can manage keyValue
//  };

//  ===========================================================================
public enum class SignerType(val value: Int): XdrEncodable {
  READER(1),
  NOT_VERIFIED_ACC_MANAGER(2),
  GENERAL_ACC_MANAGER(4),
  DIRECT_DEBIT_OPERATOR(8),
  ASSET_MANAGER(16),
  ASSET_RATE_MANAGER(32),
  BALANCE_MANAGER(64),
  ISSUANCE_MANAGER(128),
  INVOICE_MANAGER(256),
  PAYMENT_OPERATOR(512),
  LIMITS_MANAGER(1024),
  ACCOUNT_MANAGER(2048),
  COMMISSION_BALANCE_MANAGER(4096),
  OPERATIONAL_BALANCE_MANAGER(8192),
  EVENTS_CHECKER(16384),
  EXCHANGE_ACC_MANAGER(32768),
  SYNDICATE_ACC_MANAGER(65536),
  USER_ASSET_MANAGER(131072),
  USER_ISSUANCE_MANAGER(262144),
  WITHDRAW_MANAGER(524288),
  FEES_MANAGER(1048576),
  TX_SENDER(2097152),
  AML_ALERT_MANAGER(4194304),
  AML_ALERT_REVIEWER(8388608),
  KYC_ACC_MANAGER(16777216),
  KYC_SUPER_ADMIN(33554432),
  EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_MANAGER(67108864),
  KEY_VALUE_MANAGER(134217728),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct Signer
//  {
//      AccountID pubKey;
//      uint32 weight; // really only need 1byte
//  	uint32 signerType;
//  	uint32 identity;
//  	string256 name;
//  
//  	 // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class Signer(
    var pubKey: AccountID,
    var weight: Uint32,
    var signerType: Uint32,
    var identity: Uint32,
    var name: String256,
    var ext: SignerExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    pubKey.toXdr(stream)
    weight.toXdr(stream)
    signerType.toXdr(stream)
    identity.toXdr(stream)
    name.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class SignerExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: SignerExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct TrustEntry
//  {
//      AccountID allowedAccount;
//      BalanceID balanceToUse;
//  
//  	 // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class TrustEntry(
    var allowedAccount: AccountID,
    var balanceToUse: BalanceID,
    var ext: TrustEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    allowedAccount.toXdr(stream)
    balanceToUse.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class TrustEntryExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: TrustEntryExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct Limits
//  {
//      int64 dailyOut;
//  	int64 weeklyOut;
//  	int64 monthlyOut;
//      int64 annualOut;
//  
//  	 // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//      
//  };

//  ===========================================================================
open class Limits(
    var dailyOut: Int64,
    var weeklyOut: Int64,
    var monthlyOut: Int64,
    var annualOut: Int64,
    var ext: LimitsExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    dailyOut.toXdr(stream)
    weeklyOut.toXdr(stream)
    monthlyOut.toXdr(stream)
    annualOut.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class LimitsExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: LimitsExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum AccountPolicies
//  {
//  	NO_PERMISSIONS = 0,
//  	ALLOW_TO_CREATE_USER_VIA_API = 1
//  };

//  ===========================================================================
public enum class AccountPolicies(val value: Int): XdrEncodable {
  NO_PERMISSIONS(0),
  ALLOW_TO_CREATE_USER_VIA_API(1),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  enum AccountType
//  {
//  	OPERATIONAL = 1,       // operational account of the system 
//  	GENERAL = 2,           // general account can perform payments, setoptions, be source account for tx, etc.
//  	COMMISSION = 3,        // commission account
//  	MASTER = 4,            // master account
//      NOT_VERIFIED = 5,
//  	SYNDICATE = 6, // can create asset
//  	EXCHANGE = 7
//  };

//  ===========================================================================
public enum class AccountType(val value: Int): XdrEncodable {
  OPERATIONAL(1),
  GENERAL(2),
  COMMISSION(3),
  MASTER(4),
  NOT_VERIFIED(5),
  SYNDICATE(6),
  EXCHANGE(7),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  enum BlockReasons
//  {
//  	RECOVERY_REQUEST = 1,
//  	KYC_UPDATE = 2,
//  	SUSPICIOUS_BEHAVIOR = 4,
//  	TOO_MANY_KYC_UPDATE_REQUESTS = 8
//  };

//  ===========================================================================
public enum class BlockReasons(val value: Int): XdrEncodable {
  RECOVERY_REQUEST(1),
  KYC_UPDATE(2),
  SUSPICIOUS_BEHAVIOR(4),
  TOO_MANY_KYC_UPDATE_REQUESTS(8),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct AccountEntry
//  {
//      AccountID accountID;      // master public key for this account
//      AccountID recoveryID;
//  
//      // fields used for signatures
//      // thresholds stores unsigned bytes: [weight of master|low|medium|high]
//      Thresholds thresholds;
//  
//      Signer signers<>; // possible signers for this account
//      Limits* limits;
//  
//  	uint32 blockReasons;
//      AccountType accountType; // type of the account
//      
//      // Referral marketing
//      AccountID* referrer;     // parent account
//  
//  	int32 policies;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//  	case USE_KYC_LEVEL:
//  		uint32 kycLevel;
//      }
//  	
//      ext;
//  };

//  ===========================================================================
open class AccountEntry(
    var accountID: AccountID,
    var recoveryID: AccountID,
    var thresholds: Thresholds,
    var signers: Array<Signer>,
    var limits: Limits?,
    var blockReasons: Uint32,
    var accountType: AccountType,
    var referrer: AccountID?,
    var policies: Int32,
    var ext: AccountEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    accountID.toXdr(stream)
    recoveryID.toXdr(stream)
    thresholds.toXdr(stream)
    signers.size.toXdr(stream)
    signers.forEach {
      it.toXdr(stream)
    }
    if (limits != null) {
      true.toXdr(stream)
      limits?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    blockReasons.toXdr(stream)
    accountType.toXdr(stream)
    if (referrer != null) {
      true.toXdr(stream)
      referrer?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    policies.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class AccountEntryExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: AccountEntryExt(LedgerVersion.EMPTY_VERSION)

    open class UseKycLevel(var kycLevel: Uint32): AccountEntryExt(LedgerVersion.USE_KYC_LEVEL) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        kycLevel.toXdr(stream)
      }
    }
  }
}

// === xdr source ============================================================

//  enum AssetPairPolicy
//  {
//  	TRADEABLE_SECONDARY_MARKET = 1, // if not set pair can not be traided on secondary market
//  	PHYSICAL_PRICE_RESTRICTION = 2, // if set, then prices for new offers must be greater then physical price with correction
//  	CURRENT_PRICE_RESTRICTION = 4 // if set, then price for new offers must be in interval of (1 +- maxPriceStep)*currentPrice
//  };

//  ===========================================================================
public enum class AssetPairPolicy(val value: Int): XdrEncodable {
  TRADEABLE_SECONDARY_MARKET(1),
  PHYSICAL_PRICE_RESTRICTION(2),
  CURRENT_PRICE_RESTRICTION(4),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct AssetPairEntry
//  {
//      AssetCode base;
//  	AssetCode quote;
//  
//      int64 currentPrice;
//      int64 physicalPrice;
//  
//  	int64 physicalPriceCorrection; // correction of physical price in percents. If physical price is set and restriction by physical price set, mininal price for offer for this pair will be physicalPrice * physicalPriceCorrection
//  	int64 maxPriceStep; // max price step in percent. User is allowed to set offer with price < (1 - maxPriceStep)*currentPrice and > (1 + maxPriceStep)*currentPrice
//  
//  
//  	int32 policies;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class AssetPairEntry(
    var base: AssetCode,
    var quote: AssetCode,
    var currentPrice: Int64,
    var physicalPrice: Int64,
    var physicalPriceCorrection: Int64,
    var maxPriceStep: Int64,
    var policies: Int32,
    var ext: AssetPairEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    base.toXdr(stream)
    quote.toXdr(stream)
    currentPrice.toXdr(stream)
    physicalPrice.toXdr(stream)
    physicalPriceCorrection.toXdr(stream)
    maxPriceStep.toXdr(stream)
    policies.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class AssetPairEntryExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: AssetPairEntryExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum AssetPolicy
//  {
//  	TRANSFERABLE = 1,
//  	BASE_ASSET = 2,
//  	STATS_QUOTE_ASSET = 4,
//  	WITHDRAWABLE = 8,
//  	TWO_STEP_WITHDRAWAL = 16,
//  	REQUIRES_KYC = 32,
//  	ISSUANCE_MANUAL_REVIEW_REQUIRED = 64
//  };

//  ===========================================================================
public enum class AssetPolicy(val value: Int): XdrEncodable {
  TRANSFERABLE(1),
  BASE_ASSET(2),
  STATS_QUOTE_ASSET(4),
  WITHDRAWABLE(8),
  TWO_STEP_WITHDRAWAL(16),
  REQUIRES_KYC(32),
  ISSUANCE_MANUAL_REVIEW_REQUIRED(64),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  enum AssetSystemPolicies
//  {
//  	TWO_STEP_WITHDRAW = 1
//  };

//  ===========================================================================
public enum class AssetSystemPolicies(val value: Int): XdrEncodable {
  TWO_STEP_WITHDRAW(1),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct AssetEntry
//  {
//      AssetCode code;
//  	AccountID owner;
//  	AccountID preissuedAssetSigner; // signer of pre issuance tokens
//  	longstring details;
//  	uint64 maxIssuanceAmount; // max number of tokens to be issued
//  	uint64 availableForIssueance; // pre issued tokens available for issuance
//  	uint64 issued; // number of issued tokens
//  	uint64 pendingIssuance; // number of tokens locked for entries like token sale. lockedIssuance + issued can not be > maxIssuanceAmount
//      uint32 policies;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class AssetEntry(
    var code: AssetCode,
    var owner: AccountID,
    var preissuedAssetSigner: AccountID,
    var details: Longstring,
    var maxIssuanceAmount: Uint64,
    var availableForIssueance: Uint64,
    var issued: Uint64,
    var pendingIssuance: Uint64,
    var policies: Uint32,
    var ext: AssetEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    code.toXdr(stream)
    owner.toXdr(stream)
    preissuedAssetSigner.toXdr(stream)
    details.toXdr(stream)
    maxIssuanceAmount.toXdr(stream)
    availableForIssueance.toXdr(stream)
    issued.toXdr(stream)
    pendingIssuance.toXdr(stream)
    policies.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class AssetEntryExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: AssetEntryExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct BalanceEntry
//  {
//      BalanceID balanceID;
//      AssetCode asset;
//      AccountID accountID;
//      uint64 amount;
//      uint64 locked;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class BalanceEntry(
    var balanceID: BalanceID,
    var asset: AssetCode,
    var accountID: AccountID,
    var amount: Uint64,
    var locked: Uint64,
    var ext: BalanceEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    balanceID.toXdr(stream)
    asset.toXdr(stream)
    accountID.toXdr(stream)
    amount.toXdr(stream)
    locked.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class BalanceEntryExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: BalanceEntryExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct ExternalSystemAccountIDPoolEntry
//  {
//      uint64 poolEntryID;
//      int32 externalSystemType;
//      longstring data;
//      AccountID* accountID;
//      uint64 expiresAt;
//      uint64 bindedAt;
//      uint64 parent;
//      bool isDeleted;
//  
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//         void;
//      }
//      ext;
//  };

//  ===========================================================================
open class ExternalSystemAccountIDPoolEntry(
    var poolEntryID: Uint64,
    var externalSystemType: Int32,
    var data: Longstring,
    var accountID: AccountID?,
    var expiresAt: Uint64,
    var bindedAt: Uint64,
    var parent: Uint64,
    var isDeleted: Boolean,
    var ext: ExternalSystemAccountIDPoolEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    poolEntryID.toXdr(stream)
    externalSystemType.toXdr(stream)
    data.toXdr(stream)
    if (accountID != null) {
      true.toXdr(stream)
      accountID?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    expiresAt.toXdr(stream)
    bindedAt.toXdr(stream)
    parent.toXdr(stream)
    isDeleted.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class ExternalSystemAccountIDPoolEntryExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: ExternalSystemAccountIDPoolEntryExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct ExternalSystemAccountID
//  {
//      AccountID accountID;
//      int32 externalSystemType;
//  	longstring data;
//  
//  	 // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class ExternalSystemAccountID(
    var accountID: AccountID,
    var externalSystemType: Int32,
    var data: Longstring,
    var ext: ExternalSystemAccountIDExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    accountID.toXdr(stream)
    externalSystemType.toXdr(stream)
    data.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class ExternalSystemAccountIDExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: ExternalSystemAccountIDExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum FeeType
//  {
//      PAYMENT_FEE = 0,
//  	OFFER_FEE = 1,
//      WITHDRAWAL_FEE = 2,
//      ISSUANCE_FEE = 3
//  };

//  ===========================================================================
public enum class FeeType(val value: Int): XdrEncodable {
  PAYMENT_FEE(0),
  OFFER_FEE(1),
  WITHDRAWAL_FEE(2),
  ISSUANCE_FEE(3),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  enum EmissionFeeType
//  {
//  	PRIMARY_MARKET = 1,
//  	SECONDARY_MARKET = 2
//  };

//  ===========================================================================
public enum class EmissionFeeType(val value: Int): XdrEncodable {
  PRIMARY_MARKET(1),
  SECONDARY_MARKET(2),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  enum PaymentFeeType
//  {
//      OUTGOING = 1,
//      INCOMING = 2
//  };

//  ===========================================================================
public enum class PaymentFeeType(val value: Int): XdrEncodable {
  OUTGOING(1),
  INCOMING(2),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct FeeEntry
//  {
//      FeeType feeType;
//      AssetCode asset;
//      int64 fixedFee; // fee paid for operation
//  	int64 percentFee; // percent of transfer amount to be charged
//  
//      AccountID* accountID;
//      AccountType* accountType;
//      int64 subtype; // for example, different withdrawals — bars or coins
//  
//      int64 lowerBound;
//      int64 upperBound;
//  
//      Hash hash;
//  
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      case CROSS_ASSET_FEE:
//          AssetCode feeAsset;
//      }
//      ext;
//  };

//  ===========================================================================
open class FeeEntry(
    var feeType: FeeType,
    var asset: AssetCode,
    var fixedFee: Int64,
    var percentFee: Int64,
    var accountID: AccountID?,
    var accountType: AccountType?,
    var subtype: Int64,
    var lowerBound: Int64,
    var upperBound: Int64,
    var hash: Hash,
    var ext: FeeEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    feeType.toXdr(stream)
    asset.toXdr(stream)
    fixedFee.toXdr(stream)
    percentFee.toXdr(stream)
    if (accountID != null) {
      true.toXdr(stream)
      accountID?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    if (accountType != null) {
      true.toXdr(stream)
      accountType?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    subtype.toXdr(stream)
    lowerBound.toXdr(stream)
    upperBound.toXdr(stream)
    hash.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class FeeEntryExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: FeeEntryExt(LedgerVersion.EMPTY_VERSION)

    open class CrossAssetFee(var feeAsset: AssetCode): FeeEntryExt(LedgerVersion.CROSS_ASSET_FEE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        feeAsset.toXdr(stream)
      }
    }
  }
}

// === xdr source ============================================================

//  enum InvoiceState
//  {
//      INVOICE_NEEDS_PAYMENT = 0,
//      INVOICE_NEEDS_PAYMENT_REVIEW = 1
//  };

//  ===========================================================================
public enum class InvoiceState(val value: Int): XdrEncodable {
  INVOICE_NEEDS_PAYMENT(0),
  INVOICE_NEEDS_PAYMENT_REVIEW(1),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct InvoiceEntry
//  {
//      uint64 invoiceID;
//      AccountID receiverAccount;
//      BalanceID receiverBalance;
//  	AccountID sender;
//      int64 amount;
//      
//      InvoiceState state;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class InvoiceEntry(
    var invoiceID: Uint64,
    var receiverAccount: AccountID,
    var receiverBalance: BalanceID,
    var sender: AccountID,
    var amount: Int64,
    var state: InvoiceState,
    var ext: InvoiceEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    invoiceID.toXdr(stream)
    receiverAccount.toXdr(stream)
    receiverBalance.toXdr(stream)
    sender.toXdr(stream)
    amount.toXdr(stream)
    state.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class InvoiceEntryExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: InvoiceEntryExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum KeyValueEntryType
//      {
//          UINT32 = 1,
//          STRING = 2
//      };

//  ===========================================================================
public enum class KeyValueEntryType(val value: Int): XdrEncodable {
  UINT32(1),
  STRING(2),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct KeyValueEntry
//      {
//          longstring key;
//  
//          union switch (KeyValueEntryType type)
//          {
//               case UINT32:
//                  uint32 ui32Value;
//               case STRING:
//                  string stringValue<>;
//          }
//          value;
//  
//          // reserved for future use
//          union switch (LedgerVersion v)
//          {
//              case EMPTY_VERSION:
//                  void;
//          }
//          ext;
//      };

//  ===========================================================================
open class KeyValueEntry(
    var key: Longstring,
    var value: KeyValueEntryValue,
    var ext: KeyValueEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    key.toXdr(stream)
    value.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class KeyValueEntryValue(val discriminant: KeyValueEntryType): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class Uint32(var ui32Value: Uint32): KeyValueEntryValue(KeyValueEntryType.UINT32) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        ui32Value.toXdr(stream)
      }
    }

    open class String(var stringValue: String): KeyValueEntryValue(KeyValueEntryType.STRING) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        stringValue.toXdr(stream)
      }
    }
  }
  abstract class KeyValueEntryExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: KeyValueEntryExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct OfferEntry
//  {	
//      uint64 offerID;
//  	uint64 orderBookID;
//  	AccountID ownerID;
//  	bool isBuy;
//      AssetCode base; // A
//      AssetCode quote;  // B
//  	BalanceID baseBalance; 
//  	BalanceID quoteBalance;
//      int64 baseAmount;
//  	int64 quoteAmount;
//  	uint64 createdAt;
//  	int64 fee;
//  
//      int64 percentFee;
//  
//  	// price of A in terms of B
//      int64 price;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class OfferEntry(
    var offerID: Uint64,
    var orderBookID: Uint64,
    var ownerID: AccountID,
    var isBuy: Boolean,
    var base: AssetCode,
    var quote: AssetCode,
    var baseBalance: BalanceID,
    var quoteBalance: BalanceID,
    var baseAmount: Int64,
    var quoteAmount: Int64,
    var createdAt: Uint64,
    var fee: Int64,
    var percentFee: Int64,
    var price: Int64,
    var ext: OfferEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    offerID.toXdr(stream)
    orderBookID.toXdr(stream)
    ownerID.toXdr(stream)
    isBuy.toXdr(stream)
    base.toXdr(stream)
    quote.toXdr(stream)
    baseBalance.toXdr(stream)
    quoteBalance.toXdr(stream)
    baseAmount.toXdr(stream)
    quoteAmount.toXdr(stream)
    createdAt.toXdr(stream)
    fee.toXdr(stream)
    percentFee.toXdr(stream)
    price.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class OfferEntryExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: OfferEntryExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum RequestType
//  {
//      REQUEST_TYPE_SALE = 0,
//      REQUEST_TYPE_WITHDRAWAL = 1,
//      REQUEST_TYPE_REDEEM = 2,
//      REQUEST_TYPE_PAYMENT = 3
//  };

//  ===========================================================================
public enum class RequestType(val value: Int): XdrEncodable {
  REQUEST_TYPE_SALE(0),
  REQUEST_TYPE_WITHDRAWAL(1),
  REQUEST_TYPE_REDEEM(2),
  REQUEST_TYPE_PAYMENT(3),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct PaymentRequestEntry
//  {
//      uint64 paymentID;
//      BalanceID sourceBalance;
//      BalanceID* destinationBalance;
//      int64 sourceSend;
//      int64 sourceSendUniversal;
//      int64 destinationReceive;
//      
//      uint64 createdAt;
//  
//      uint64* invoiceID;
//  
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class PaymentRequestEntry(
    var paymentID: Uint64,
    var sourceBalance: BalanceID,
    var destinationBalance: BalanceID?,
    var sourceSend: Int64,
    var sourceSendUniversal: Int64,
    var destinationReceive: Int64,
    var createdAt: Uint64,
    var invoiceID: Uint64?,
    var ext: PaymentRequestEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    paymentID.toXdr(stream)
    sourceBalance.toXdr(stream)
    if (destinationBalance != null) {
      true.toXdr(stream)
      destinationBalance?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    sourceSend.toXdr(stream)
    sourceSendUniversal.toXdr(stream)
    destinationReceive.toXdr(stream)
    createdAt.toXdr(stream)
    if (invoiceID != null) {
      true.toXdr(stream)
      invoiceID?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    ext.toXdr(stream)
  }

  abstract class PaymentRequestEntryExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: PaymentRequestEntryExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct ReferenceEntry
//  {
//  	AccountID sender;
//      string64 reference;
//  
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class ReferenceEntry(
    var sender: AccountID,
    var reference: String64,
    var ext: ReferenceEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    sender.toXdr(stream)
    reference.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class ReferenceEntryExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: ReferenceEntryExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum ReviewableRequestType
//  {
//      ASSET_CREATE = 0,
//  	ASSET_UPDATE = 1,
//  	PRE_ISSUANCE_CREATE = 2,
//  	ISSUANCE_CREATE = 3,
//  	WITHDRAW = 4,
//  	SALE = 5,
//  	LIMITS_UPDATE = 6,
//  	TWO_STEP_WITHDRAWAL = 7,
//      AML_ALERT = 8,
//  	UPDATE_KYC = 9,
//  	UPDATE_SALE_DETAILS = 10
//  };

//  ===========================================================================
public enum class ReviewableRequestType(val value: Int): XdrEncodable {
  ASSET_CREATE(0),
  ASSET_UPDATE(1),
  PRE_ISSUANCE_CREATE(2),
  ISSUANCE_CREATE(3),
  WITHDRAW(4),
  SALE(5),
  LIMITS_UPDATE(6),
  TWO_STEP_WITHDRAWAL(7),
  AML_ALERT(8),
  UPDATE_KYC(9),
  UPDATE_SALE_DETAILS(10),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct ReviewableRequestEntry {
//  	uint64 requestID;
//  	Hash hash; // hash of the request body
//  	AccountID requestor;
//  	longstring rejectReason;
//  	AccountID reviewer;
//  	string64* reference; // reference for request which will act as an unique key for the request (will reject request with the same reference from same requestor)
//  	int64 createdAt; // when request was created
//  
//  	union switch (ReviewableRequestType type) {
//  		case ASSET_CREATE:
//  			AssetCreationRequest assetCreationRequest;
//  		case ASSET_UPDATE:
//  			AssetUpdateRequest assetUpdateRequest;
//  		case PRE_ISSUANCE_CREATE:
//  			PreIssuanceRequest preIssuanceRequest;
//  		case ISSUANCE_CREATE:
//  			IssuanceRequest issuanceRequest;
//  		case WITHDRAW:
//  			WithdrawalRequest withdrawalRequest;
//  		case SALE:
//  			SaleCreationRequest saleCreationRequest;
//          case LIMITS_UPDATE:
//              LimitsUpdateRequest limitsUpdateRequest;
//  		case TWO_STEP_WITHDRAWAL:
//  			WithdrawalRequest twoStepWithdrawalRequest;
//          case AML_ALERT:
//              AMLAlertRequest amlAlertRequest;
//          case UPDATE_KYC:
//              UpdateKYCRequest updateKYCRequest;
//          case UPDATE_SALE_DETAILS:
//              UpdateSaleDetailsRequest updateSaleDetailsRequest;
//  	} body;
//  
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class ReviewableRequestEntry(
    var requestID: Uint64,
    var hash: Hash,
    var requestor: AccountID,
    var rejectReason: Longstring,
    var reviewer: AccountID,
    var reference: String64?,
    var createdAt: Int64,
    var body: ReviewableRequestEntryBody,
    var ext: ReviewableRequestEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    requestID.toXdr(stream)
    hash.toXdr(stream)
    requestor.toXdr(stream)
    rejectReason.toXdr(stream)
    reviewer.toXdr(stream)
    if (reference != null) {
      true.toXdr(stream)
      reference?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    createdAt.toXdr(stream)
    body.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class ReviewableRequestEntryBody(val discriminant: ReviewableRequestType): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class AssetCreate(var assetCreationRequest: AssetCreationRequest): ReviewableRequestEntryBody(ReviewableRequestType.ASSET_CREATE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        assetCreationRequest.toXdr(stream)
      }
    }

    open class AssetUpdate(var assetUpdateRequest: AssetUpdateRequest): ReviewableRequestEntryBody(ReviewableRequestType.ASSET_UPDATE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        assetUpdateRequest.toXdr(stream)
      }
    }

    open class PreIssuanceCreate(var preIssuanceRequest: PreIssuanceRequest): ReviewableRequestEntryBody(ReviewableRequestType.PRE_ISSUANCE_CREATE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        preIssuanceRequest.toXdr(stream)
      }
    }

    open class IssuanceCreate(var issuanceRequest: IssuanceRequest): ReviewableRequestEntryBody(ReviewableRequestType.ISSUANCE_CREATE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        issuanceRequest.toXdr(stream)
      }
    }

    open class Withdraw(var withdrawalRequest: WithdrawalRequest): ReviewableRequestEntryBody(ReviewableRequestType.WITHDRAW) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        withdrawalRequest.toXdr(stream)
      }
    }

    open class Sale(var saleCreationRequest: SaleCreationRequest): ReviewableRequestEntryBody(ReviewableRequestType.SALE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        saleCreationRequest.toXdr(stream)
      }
    }

    open class LimitsUpdate(var limitsUpdateRequest: LimitsUpdateRequest): ReviewableRequestEntryBody(ReviewableRequestType.LIMITS_UPDATE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        limitsUpdateRequest.toXdr(stream)
      }
    }

    open class TwoStepWithdrawal(var twoStepWithdrawalRequest: WithdrawalRequest): ReviewableRequestEntryBody(ReviewableRequestType.TWO_STEP_WITHDRAWAL) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        twoStepWithdrawalRequest.toXdr(stream)
      }
    }

    open class AmlAlert(var amlAlertRequest: AMLAlertRequest): ReviewableRequestEntryBody(ReviewableRequestType.AML_ALERT) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        amlAlertRequest.toXdr(stream)
      }
    }

    open class UpdateKyc(var updateKYCRequest: UpdateKYCRequest): ReviewableRequestEntryBody(ReviewableRequestType.UPDATE_KYC) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        updateKYCRequest.toXdr(stream)
      }
    }

    open class UpdateSaleDetails(var updateSaleDetailsRequest: UpdateSaleDetailsRequest): ReviewableRequestEntryBody(ReviewableRequestType.UPDATE_SALE_DETAILS) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        updateSaleDetailsRequest.toXdr(stream)
      }
    }
  }
  abstract class ReviewableRequestEntryExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: ReviewableRequestEntryExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum SaleType {
//  	BASIC_SALE = 1, // sale creator specifies price for each quote asset
//  	CROWD_FUNDING = 2 // sale creator does not specify price,
//  	                  // price is defined on sale close based on amount of base asset to be sold and amount of quote assets collected
//  };

//  ===========================================================================
public enum class SaleType(val value: Int): XdrEncodable {
  BASIC_SALE(1),
  CROWD_FUNDING(2),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct CrowdFundingSale {
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class CrowdFundingSale(
    var ext: CrowdFundingSaleExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    ext.toXdr(stream)
  }

  abstract class CrowdFundingSaleExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: CrowdFundingSaleExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct BasicSale {
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class BasicSale(
    var ext: BasicSaleExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    ext.toXdr(stream)
  }

  abstract class BasicSaleExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: BasicSaleExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct SaleTypeExt {
//  	union switch (SaleType saleType)
//      {
//  	case BASIC_SALE:
//  		BasicSale basicSale;
//      case CROWD_FUNDING:
//          CrowdFundingSale crowdFundingSale;
//      }
//      typedSale;
//  };

//  ===========================================================================
open class SaleTypeExt(
    var typedSale: SaleTypeExtTypedSale
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    typedSale.toXdr(stream)
  }

  abstract class SaleTypeExtTypedSale(val discriminant: SaleType): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class BasicSale(var basicSale: BasicSale): SaleTypeExtTypedSale(SaleType.BASIC_SALE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        basicSale.toXdr(stream)
      }
    }

    open class CrowdFunding(var crowdFundingSale: CrowdFundingSale): SaleTypeExtTypedSale(SaleType.CROWD_FUNDING) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        crowdFundingSale.toXdr(stream)
      }
    }
  }
}

// === xdr source ============================================================

//  struct SaleQuoteAsset {
//  	AssetCode quoteAsset; // asset in which participation will be accepted
//  	uint64 price; // price for 1 baseAsset in terms of quote asset
//  	BalanceID quoteBalance;
//  	uint64 currentCap; // current capitalization
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class SaleQuoteAsset(
    var quoteAsset: AssetCode,
    var price: Uint64,
    var quoteBalance: BalanceID,
    var currentCap: Uint64,
    var ext: SaleQuoteAssetExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    quoteAsset.toXdr(stream)
    price.toXdr(stream)
    quoteBalance.toXdr(stream)
    currentCap.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class SaleQuoteAssetExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: SaleQuoteAssetExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct SaleEntry
//  {
//  	uint64 saleID;
//  	AccountID ownerID;
//      AssetCode baseAsset; // asset for which sale will be performed
//  	uint64 startTime; // start time of the sale
//  	uint64 endTime; // close time of the sale
//  	AssetCode defaultQuoteAsset; // asset for soft and hard cap
//  	uint64 softCap; // minimum amount of quote asset to be received at which sale will be considered a successful
//  	uint64 hardCap; // max amount of quote asset to be received
//  	uint64 currentCapInBase;
//  	uint64 maxAmountToBeSold;
//  	longstring details; // sale specific details
//  	SaleQuoteAsset quoteAssets<100>;
//  
//  	BalanceID baseBalance;
//  
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//  	case TYPED_SALE:
//  		SaleTypeExt saleTypeExt;
//      }
//      ext;
//  };

//  ===========================================================================
open class SaleEntry(
    var saleID: Uint64,
    var ownerID: AccountID,
    var baseAsset: AssetCode,
    var startTime: Uint64,
    var endTime: Uint64,
    var defaultQuoteAsset: AssetCode,
    var softCap: Uint64,
    var hardCap: Uint64,
    var currentCapInBase: Uint64,
    var maxAmountToBeSold: Uint64,
    var details: Longstring,
    var quoteAssets: Array<SaleQuoteAsset>,
    var baseBalance: BalanceID,
    var ext: SaleEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    saleID.toXdr(stream)
    ownerID.toXdr(stream)
    baseAsset.toXdr(stream)
    startTime.toXdr(stream)
    endTime.toXdr(stream)
    defaultQuoteAsset.toXdr(stream)
    softCap.toXdr(stream)
    hardCap.toXdr(stream)
    currentCapInBase.toXdr(stream)
    maxAmountToBeSold.toXdr(stream)
    details.toXdr(stream)
    quoteAssets.size.toXdr(stream)
    quoteAssets.forEach {
      it.toXdr(stream)
    }
    baseBalance.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class SaleEntryExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: SaleEntryExt(LedgerVersion.EMPTY_VERSION)

    open class TypedSale(var saleTypeExt: SaleTypeExt): SaleEntryExt(LedgerVersion.TYPED_SALE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        saleTypeExt.toXdr(stream)
      }
    }
  }
}

// === xdr source ============================================================

//  struct StatisticsEntry
//  {
//  	AccountID accountID;
//  
//  	uint64 dailyOutcome;
//  	uint64 weeklyOutcome;
//  	uint64 monthlyOutcome;
//  	uint64 annualOutcome;
//  
//  	int64 updatedAt;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class StatisticsEntry(
    var accountID: AccountID,
    var dailyOutcome: Uint64,
    var weeklyOutcome: Uint64,
    var monthlyOutcome: Uint64,
    var annualOutcome: Uint64,
    var updatedAt: Int64,
    var ext: StatisticsEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    accountID.toXdr(stream)
    dailyOutcome.toXdr(stream)
    weeklyOutcome.toXdr(stream)
    monthlyOutcome.toXdr(stream)
    annualOutcome.toXdr(stream)
    updatedAt.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class StatisticsEntryExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: StatisticsEntryExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum ThresholdIndexes
//  {
//      MASTER_WEIGHT = 0,
//      LOW = 1,
//      MED = 2,
//      HIGH = 3
//  };

//  ===========================================================================
public enum class ThresholdIndexes(val value: Int): XdrEncodable {
  MASTER_WEIGHT(0),
  LOW(1),
  MED(2),
  HIGH(3),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  enum LedgerEntryType
//  {
//      ACCOUNT = 0,
//      FEE = 2,
//      BALANCE = 4,
//      PAYMENT_REQUEST = 5,
//      ASSET = 6,
//      REFERENCE_ENTRY = 7,
//      ACCOUNT_TYPE_LIMITS = 8,
//      STATISTICS = 9,
//      TRUST = 10,
//      ACCOUNT_LIMITS = 11,
//  	ASSET_PAIR = 12,
//  	OFFER_ENTRY = 13,
//      INVOICE = 14,
//  	REVIEWABLE_REQUEST = 15,
//  	EXTERNAL_SYSTEM_ACCOUNT_ID = 16,
//  	SALE = 17,
//  	ACCOUNT_KYC = 18,
//  	EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY = 19,
//      KEY_VALUE = 20
//  };

//  ===========================================================================
public enum class LedgerEntryType(val value: Int): XdrEncodable {
  ACCOUNT(0),
  FEE(2),
  BALANCE(4),
  PAYMENT_REQUEST(5),
  ASSET(6),
  REFERENCE_ENTRY(7),
  ACCOUNT_TYPE_LIMITS(8),
  STATISTICS(9),
  TRUST(10),
  ACCOUNT_LIMITS(11),
  ASSET_PAIR(12),
  OFFER_ENTRY(13),
  INVOICE(14),
  REVIEWABLE_REQUEST(15),
  EXTERNAL_SYSTEM_ACCOUNT_ID(16),
  SALE(17),
  ACCOUNT_KYC(18),
  EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY(19),
  KEY_VALUE(20),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct LedgerEntry
//  {
//      uint32 lastModifiedLedgerSeq; // ledger the LedgerEntry was last changed
//  
//      union switch (LedgerEntryType type)
//      {
//      case ACCOUNT:
//          AccountEntry account;
//      case FEE:
//          FeeEntry feeState;
//      case BALANCE:
//          BalanceEntry balance;
//      case PAYMENT_REQUEST:
//          PaymentRequestEntry paymentRequest;
//      case ASSET:
//          AssetEntry asset;
//      case REFERENCE_ENTRY:
//          ReferenceEntry reference;
//      case ACCOUNT_TYPE_LIMITS:
//          AccountTypeLimitsEntry accountTypeLimits;
//      case STATISTICS:
//          StatisticsEntry stats;
//      case TRUST:
//          TrustEntry trust;
//      case ACCOUNT_LIMITS:
//          AccountLimitsEntry accountLimits;
//  	case ASSET_PAIR: 
//  		AssetPairEntry assetPair;
//  	case OFFER_ENTRY:
//  		OfferEntry offer;
//      case INVOICE:
//          InvoiceEntry invoice;
//  	case REVIEWABLE_REQUEST:
//  		ReviewableRequestEntry reviewableRequest;
//  	case EXTERNAL_SYSTEM_ACCOUNT_ID:
//  		ExternalSystemAccountID externalSystemAccountID;
//  	case SALE:
//  		SaleEntry sale;
//  	case KEY_VALUE:
//  	    KeyValueEntry keyValue;
//  	case ACCOUNT_KYC:
//          AccountKYCEntry accountKYC;
//      case EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY:
//          ExternalSystemAccountIDPoolEntry externalSystemAccountIDPoolEntry;
//      }
//      data;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class LedgerEntry(
    var lastModifiedLedgerSeq: Uint32,
    var data: LedgerEntryData,
    var ext: LedgerEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    lastModifiedLedgerSeq.toXdr(stream)
    data.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class LedgerEntryData(val discriminant: LedgerEntryType): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class Account(var account: AccountEntry): LedgerEntryData(LedgerEntryType.ACCOUNT) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        account.toXdr(stream)
      }
    }

    open class Fee(var feeState: FeeEntry): LedgerEntryData(LedgerEntryType.FEE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        feeState.toXdr(stream)
      }
    }

    open class Balance(var balance: BalanceEntry): LedgerEntryData(LedgerEntryType.BALANCE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        balance.toXdr(stream)
      }
    }

    open class PaymentRequest(var paymentRequest: PaymentRequestEntry): LedgerEntryData(LedgerEntryType.PAYMENT_REQUEST) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        paymentRequest.toXdr(stream)
      }
    }

    open class Asset(var asset: AssetEntry): LedgerEntryData(LedgerEntryType.ASSET) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        asset.toXdr(stream)
      }
    }

    open class ReferenceEntry(var reference: ReferenceEntry): LedgerEntryData(LedgerEntryType.REFERENCE_ENTRY) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        reference.toXdr(stream)
      }
    }

    open class AccountTypeLimits(var accountTypeLimits: AccountTypeLimitsEntry): LedgerEntryData(LedgerEntryType.ACCOUNT_TYPE_LIMITS) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        accountTypeLimits.toXdr(stream)
      }
    }

    open class Statistics(var stats: StatisticsEntry): LedgerEntryData(LedgerEntryType.STATISTICS) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        stats.toXdr(stream)
      }
    }

    open class Trust(var trust: TrustEntry): LedgerEntryData(LedgerEntryType.TRUST) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        trust.toXdr(stream)
      }
    }

    open class AccountLimits(var accountLimits: AccountLimitsEntry): LedgerEntryData(LedgerEntryType.ACCOUNT_LIMITS) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        accountLimits.toXdr(stream)
      }
    }

    open class AssetPair(var assetPair: AssetPairEntry): LedgerEntryData(LedgerEntryType.ASSET_PAIR) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        assetPair.toXdr(stream)
      }
    }

    open class OfferEntry(var offer: OfferEntry): LedgerEntryData(LedgerEntryType.OFFER_ENTRY) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        offer.toXdr(stream)
      }
    }

    open class Invoice(var invoice: InvoiceEntry): LedgerEntryData(LedgerEntryType.INVOICE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        invoice.toXdr(stream)
      }
    }

    open class ReviewableRequest(var reviewableRequest: ReviewableRequestEntry): LedgerEntryData(LedgerEntryType.REVIEWABLE_REQUEST) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        reviewableRequest.toXdr(stream)
      }
    }

    open class ExternalSystemAccountId(var externalSystemAccountID: ExternalSystemAccountID): LedgerEntryData(LedgerEntryType.EXTERNAL_SYSTEM_ACCOUNT_ID) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        externalSystemAccountID.toXdr(stream)
      }
    }

    open class Sale(var sale: SaleEntry): LedgerEntryData(LedgerEntryType.SALE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        sale.toXdr(stream)
      }
    }

    open class KeyValue(var keyValue: KeyValueEntry): LedgerEntryData(LedgerEntryType.KEY_VALUE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        keyValue.toXdr(stream)
      }
    }

    open class AccountKyc(var accountKYC: AccountKYCEntry): LedgerEntryData(LedgerEntryType.ACCOUNT_KYC) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        accountKYC.toXdr(stream)
      }
    }

    open class ExternalSystemAccountIdPoolEntry(var externalSystemAccountIDPoolEntry: ExternalSystemAccountIDPoolEntry): LedgerEntryData(LedgerEntryType.EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        externalSystemAccountIDPoolEntry.toXdr(stream)
      }
    }
  }
  abstract class LedgerEntryExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: LedgerEntryExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum EnvelopeType
//  {
//      SCP = 1,
//      TX = 2,
//      AUTH = 3
//  };

//  ===========================================================================
public enum class EnvelopeType(val value: Int): XdrEncodable {
  SCP(1),
  TX(2),
  AUTH(3),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  enum ExternalSystemIDGeneratorType {
//  	BITCOIN_BASIC = 1,
//  	ETHEREUM_BASIC = 2
//  };

//  ===========================================================================
public enum class ExternalSystemIDGeneratorType(val value: Int): XdrEncodable {
  BITCOIN_BASIC(1),
  ETHEREUM_BASIC(2),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  typedef opaque UpgradeType<128>;

//  ===========================================================================
public typealias UpgradeType = ByteArray

// === xdr source ============================================================

//  struct StellarValue
//  {
//      Hash txSetHash;   // transaction set to apply to previous ledger
//      uint64 closeTime; // network close time
//  
//      // upgrades to apply to the previous ledger (usually empty)
//      // this is a vector of encoded 'LedgerUpgrade' so that nodes can drop
//      // unknown steps during consensus if needed.
//      // see notes below on 'LedgerUpgrade' for more detail
//      // max size is dictated by number of upgrade types (+ room for future)
//      UpgradeType upgrades<6>;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class StellarValue(
    var txSetHash: Hash,
    var closeTime: Uint64,
    var upgrades: Array<UpgradeType>,
    var ext: StellarValueExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    txSetHash.toXdr(stream)
    closeTime.toXdr(stream)
    upgrades.size.toXdr(stream)
    upgrades.forEach {
      it.toXdr(stream)
    }
    ext.toXdr(stream)
  }

  abstract class StellarValueExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: StellarValueExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct IdGenerator {
//  	LedgerEntryType entryType; // type of the entry, for which ids will be generated
//  	uint64 idPool; // last used entry specific ID, used for generating entry of specified type
//  };

//  ===========================================================================
open class IdGenerator(
    var entryType: LedgerEntryType,
    var idPool: Uint64
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    entryType.toXdr(stream)
    idPool.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct LedgerHeader
//  {
//      uint32 ledgerVersion;    // the protocol version of the ledger
//      Hash previousLedgerHash; // hash of the previous ledger header
//      StellarValue scpValue;   // what consensus agreed to
//      Hash txSetResultHash;    // the TransactionResultSet that led to this ledger
//      Hash bucketListHash;     // hash of the ledger state
//  
//      uint32 ledgerSeq; // sequence number of this ledger
//  
//      IdGenerator idGenerators<>; // generators of ids
//  
//      uint32 baseFee;     // base fee per operation in stroops
//      uint32 baseReserve; // account base reserve in stroops
//  
//      uint32 maxTxSetSize; // maximum size a transaction set can be
//  
//      ExternalSystemIDGeneratorType externalSystemIDGenerators<>;
//      int64 txExpirationPeriod;
//      
//      Hash skipList[4]; // hashes of ledgers in the past. allows you to jump back
//                        // in time without walking the chain back ledger by ledger
//                        // each slot contains the oldest ledger that is mod of
//                        // either 50  5000  50000 or 500000 depending on index
//                        // skipList[0] mod(50), skipList[1] mod(5000), etc
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class LedgerHeader(
    var ledgerVersion: Uint32,
    var previousLedgerHash: Hash,
    var scpValue: StellarValue,
    var txSetResultHash: Hash,
    var bucketListHash: Hash,
    var ledgerSeq: Uint32,
    var idGenerators: Array<IdGenerator>,
    var baseFee: Uint32,
    var baseReserve: Uint32,
    var maxTxSetSize: Uint32,
    var externalSystemIDGenerators: Array<ExternalSystemIDGeneratorType>,
    var txExpirationPeriod: Int64,
    var skipList: Array<Hash>,
    var ext: LedgerHeaderExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    ledgerVersion.toXdr(stream)
    previousLedgerHash.toXdr(stream)
    scpValue.toXdr(stream)
    txSetResultHash.toXdr(stream)
    bucketListHash.toXdr(stream)
    ledgerSeq.toXdr(stream)
    idGenerators.size.toXdr(stream)
    idGenerators.forEach {
      it.toXdr(stream)
    }
    baseFee.toXdr(stream)
    baseReserve.toXdr(stream)
    maxTxSetSize.toXdr(stream)
    externalSystemIDGenerators.size.toXdr(stream)
    externalSystemIDGenerators.forEach {
      it.toXdr(stream)
    }
    txExpirationPeriod.toXdr(stream)
    skipList.forEach {
      it.toXdr(stream)
    }
    ext.toXdr(stream)
  }

  abstract class LedgerHeaderExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: LedgerHeaderExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum LedgerUpgradeType
//  {
//      VERSION = 1,
//      MAX_TX_SET_SIZE = 2,
//      TX_EXPIRATION_PERIOD = 3,
//  	EXTERNAL_SYSTEM_ID_GENERATOR = 4
//  };

//  ===========================================================================
public enum class LedgerUpgradeType(val value: Int): XdrEncodable {
  VERSION(1),
  MAX_TX_SET_SIZE(2),
  TX_EXPIRATION_PERIOD(3),
  EXTERNAL_SYSTEM_ID_GENERATOR(4),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  union LedgerUpgrade switch (LedgerUpgradeType type)
//  {
//  case VERSION:
//      uint32 newLedgerVersion; // update ledgerVersion
//  case MAX_TX_SET_SIZE:
//      uint32 newMaxTxSetSize; // update maxTxSetSize
//  case EXTERNAL_SYSTEM_ID_GENERATOR:
//      ExternalSystemIDGeneratorType newExternalSystemIDGenerators<>;
//  case TX_EXPIRATION_PERIOD:
//      int64 newTxExpirationPeriod;
//  };

//  ===========================================================================
abstract class LedgerUpgrade(val discriminant: LedgerUpgradeType): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Version(var newLedgerVersion: Uint32): LedgerUpgrade(LedgerUpgradeType.VERSION) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      newLedgerVersion.toXdr(stream)
    }
  }

  open class MaxTxSetSize(var newMaxTxSetSize: Uint32): LedgerUpgrade(LedgerUpgradeType.MAX_TX_SET_SIZE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      newMaxTxSetSize.toXdr(stream)
    }
  }

  open class ExternalSystemIdGenerator(var newExternalSystemIDGenerators: Array<ExternalSystemIDGeneratorType>): LedgerUpgrade(LedgerUpgradeType.EXTERNAL_SYSTEM_ID_GENERATOR) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      newExternalSystemIDGenerators.size.toXdr(stream)
      newExternalSystemIDGenerators.forEach {
        it.toXdr(stream)
      }
    }
  }

  open class TxExpirationPeriod(var newTxExpirationPeriod: Int64): LedgerUpgrade(LedgerUpgradeType.TX_EXPIRATION_PERIOD) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      newTxExpirationPeriod.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  union LedgerKey switch (LedgerEntryType type)
//  {
//  case ACCOUNT:
//      struct
//      {
//          AccountID accountID;
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//      } account;
//  case FEE:
//      struct {
//          Hash hash;
//  		int64 lowerBound;
//  		int64 upperBound;
//  		 union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//      } feeState;
//  case BALANCE:
//      struct
//      {
//  		BalanceID balanceID;
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//      } balance;
//  case PAYMENT_REQUEST:
//      struct
//      {
//  		uint64 paymentID;
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//      } paymentRequest;
//  case ASSET:
//      struct
//      {
//  		AssetCode code;
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//      } asset;
//  case REFERENCE_ENTRY:
//      struct
//      {
//  		AccountID sender;
//  		string64 reference;
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//      } reference;
//  case ACCOUNT_TYPE_LIMITS:
//      struct {
//          AccountType accountType;
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//      } accountTypeLimits;
//  case STATISTICS:
//      struct {
//          AccountID accountID;
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//      } stats;
//  case TRUST:
//      struct {
//          AccountID allowedAccount;
//          BalanceID balanceToUse;
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//      } trust;
//  case ACCOUNT_LIMITS:
//      struct {
//          AccountID accountID;
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//      } accountLimits;
//  case ASSET_PAIR:
//  	struct {
//           AssetCode base;
//  		 AssetCode quote;
//  		 union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//      } assetPair;
//  case OFFER_ENTRY:
//  	struct {
//  		uint64 offerID;
//  		AccountID ownerID;
//  	} offer;
//  case INVOICE:
//      struct {
//          uint64 invoiceID;
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//      } invoice;
//  case REVIEWABLE_REQUEST:
//      struct {
//          uint64 requestID;
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//      } reviewableRequest;
//  case EXTERNAL_SYSTEM_ACCOUNT_ID:
//  	struct {
//  		AccountID accountID;
//  		int32 externalSystemType;
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//  	} externalSystemAccountID;
//  case SALE:
//  	struct {
//  		uint64 saleID;
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//  	} sale;
//  case KEY_VALUE:
//      struct {
//          string256 key;
//          union switch (LedgerVersion v)
//          {
//          	case EMPTY_VERSION:
//          		void;
//          }
//          ext;
//      } keyValue;
//  case ACCOUNT_KYC:
//      struct {
//          AccountID accountID;
//          union switch(LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      } accountKYC;
//  case EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY:
//      struct {
//  		uint64 poolEntryID;
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//  	} externalSystemAccountIDPoolEntry;
//  };

//  ===========================================================================
abstract class LedgerKey(val discriminant: LedgerEntryType): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Account(var account: LedgerKeyAccount): LedgerKey(LedgerEntryType.ACCOUNT) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      account.toXdr(stream)
    }
  }

  open class Fee(var feeState: LedgerKeyFeeState): LedgerKey(LedgerEntryType.FEE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      feeState.toXdr(stream)
    }
  }

  open class Balance(var balance: LedgerKeyBalance): LedgerKey(LedgerEntryType.BALANCE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      balance.toXdr(stream)
    }
  }

  open class PaymentRequest(var paymentRequest: LedgerKeyPaymentRequest): LedgerKey(LedgerEntryType.PAYMENT_REQUEST) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      paymentRequest.toXdr(stream)
    }
  }

  open class Asset(var asset: LedgerKeyAsset): LedgerKey(LedgerEntryType.ASSET) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      asset.toXdr(stream)
    }
  }

  open class ReferenceEntry(var reference: LedgerKeyReference): LedgerKey(LedgerEntryType.REFERENCE_ENTRY) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      reference.toXdr(stream)
    }
  }

  open class AccountTypeLimits(var accountTypeLimits: LedgerKeyAccountTypeLimits): LedgerKey(LedgerEntryType.ACCOUNT_TYPE_LIMITS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      accountTypeLimits.toXdr(stream)
    }
  }

  open class Statistics(var stats: LedgerKeyStats): LedgerKey(LedgerEntryType.STATISTICS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      stats.toXdr(stream)
    }
  }

  open class Trust(var trust: LedgerKeyTrust): LedgerKey(LedgerEntryType.TRUST) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      trust.toXdr(stream)
    }
  }

  open class AccountLimits(var accountLimits: LedgerKeyAccountLimits): LedgerKey(LedgerEntryType.ACCOUNT_LIMITS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      accountLimits.toXdr(stream)
    }
  }

  open class AssetPair(var assetPair: LedgerKeyAssetPair): LedgerKey(LedgerEntryType.ASSET_PAIR) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      assetPair.toXdr(stream)
    }
  }

  open class OfferEntry(var offer: LedgerKeyOffer): LedgerKey(LedgerEntryType.OFFER_ENTRY) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      offer.toXdr(stream)
    }
  }

  open class Invoice(var invoice: LedgerKeyInvoice): LedgerKey(LedgerEntryType.INVOICE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      invoice.toXdr(stream)
    }
  }

  open class ReviewableRequest(var reviewableRequest: LedgerKeyReviewableRequest): LedgerKey(LedgerEntryType.REVIEWABLE_REQUEST) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      reviewableRequest.toXdr(stream)
    }
  }

  open class ExternalSystemAccountId(var externalSystemAccountID: LedgerKeyExternalSystemAccountID): LedgerKey(LedgerEntryType.EXTERNAL_SYSTEM_ACCOUNT_ID) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      externalSystemAccountID.toXdr(stream)
    }
  }

  open class Sale(var sale: LedgerKeySale): LedgerKey(LedgerEntryType.SALE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      sale.toXdr(stream)
    }
  }

  open class KeyValue(var keyValue: LedgerKeyKeyValue): LedgerKey(LedgerEntryType.KEY_VALUE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      keyValue.toXdr(stream)
    }
  }

  open class AccountKyc(var accountKYC: LedgerKeyAccountKYC): LedgerKey(LedgerEntryType.ACCOUNT_KYC) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      accountKYC.toXdr(stream)
    }
  }

  open class ExternalSystemAccountIdPoolEntry(var externalSystemAccountIDPoolEntry: LedgerKeyExternalSystemAccountIDPoolEntry): LedgerKey(LedgerEntryType.EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      externalSystemAccountIDPoolEntry.toXdr(stream)
    }
  }

  open class LedgerKeyAccount(
      var accountID: AccountID,
      var ext: LedgerKeyAccountExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      accountID.toXdr(stream)
      ext.toXdr(stream)
    }

    abstract class LedgerKeyAccountExt(val discriminant: LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      open class EmptyVersion: LedgerKeyAccountExt(LedgerVersion.EMPTY_VERSION)
    }
  }
  open class LedgerKeyFeeState(
      var hash: Hash,
      var lowerBound: Int64,
      var upperBound: Int64,
      var ext: LedgerKeyFeeStateExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      hash.toXdr(stream)
      lowerBound.toXdr(stream)
      upperBound.toXdr(stream)
      ext.toXdr(stream)
    }

    abstract class LedgerKeyFeeStateExt(val discriminant: LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      open class EmptyVersion: LedgerKeyFeeStateExt(LedgerVersion.EMPTY_VERSION)
    }
  }
  open class LedgerKeyBalance(
      var balanceID: BalanceID,
      var ext: LedgerKeyBalanceExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      balanceID.toXdr(stream)
      ext.toXdr(stream)
    }

    abstract class LedgerKeyBalanceExt(val discriminant: LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      open class EmptyVersion: LedgerKeyBalanceExt(LedgerVersion.EMPTY_VERSION)
    }
  }
  open class LedgerKeyPaymentRequest(
      var paymentID: Uint64,
      var ext: LedgerKeyPaymentRequestExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      paymentID.toXdr(stream)
      ext.toXdr(stream)
    }

    abstract class LedgerKeyPaymentRequestExt(val discriminant: LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      open class EmptyVersion: LedgerKeyPaymentRequestExt(LedgerVersion.EMPTY_VERSION)
    }
  }
  open class LedgerKeyAsset(
      var code: AssetCode,
      var ext: LedgerKeyAssetExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      code.toXdr(stream)
      ext.toXdr(stream)
    }

    abstract class LedgerKeyAssetExt(val discriminant: LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      open class EmptyVersion: LedgerKeyAssetExt(LedgerVersion.EMPTY_VERSION)
    }
  }
  open class LedgerKeyReference(
      var sender: AccountID,
      var reference: String64,
      var ext: LedgerKeyReferenceExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      sender.toXdr(stream)
      reference.toXdr(stream)
      ext.toXdr(stream)
    }

    abstract class LedgerKeyReferenceExt(val discriminant: LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      open class EmptyVersion: LedgerKeyReferenceExt(LedgerVersion.EMPTY_VERSION)
    }
  }
  open class LedgerKeyAccountTypeLimits(
      var accountType: AccountType,
      var ext: LedgerKeyAccountTypeLimitsExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      accountType.toXdr(stream)
      ext.toXdr(stream)
    }

    abstract class LedgerKeyAccountTypeLimitsExt(val discriminant: LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      open class EmptyVersion: LedgerKeyAccountTypeLimitsExt(LedgerVersion.EMPTY_VERSION)
    }
  }
  open class LedgerKeyStats(
      var accountID: AccountID,
      var ext: LedgerKeyStatsExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      accountID.toXdr(stream)
      ext.toXdr(stream)
    }

    abstract class LedgerKeyStatsExt(val discriminant: LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      open class EmptyVersion: LedgerKeyStatsExt(LedgerVersion.EMPTY_VERSION)
    }
  }
  open class LedgerKeyTrust(
      var allowedAccount: AccountID,
      var balanceToUse: BalanceID,
      var ext: LedgerKeyTrustExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      allowedAccount.toXdr(stream)
      balanceToUse.toXdr(stream)
      ext.toXdr(stream)
    }

    abstract class LedgerKeyTrustExt(val discriminant: LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      open class EmptyVersion: LedgerKeyTrustExt(LedgerVersion.EMPTY_VERSION)
    }
  }
  open class LedgerKeyAccountLimits(
      var accountID: AccountID,
      var ext: LedgerKeyAccountLimitsExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      accountID.toXdr(stream)
      ext.toXdr(stream)
    }

    abstract class LedgerKeyAccountLimitsExt(val discriminant: LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      open class EmptyVersion: LedgerKeyAccountLimitsExt(LedgerVersion.EMPTY_VERSION)
    }
  }
  open class LedgerKeyAssetPair(
      var base: AssetCode,
      var quote: AssetCode,
      var ext: LedgerKeyAssetPairExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      base.toXdr(stream)
      quote.toXdr(stream)
      ext.toXdr(stream)
    }

    abstract class LedgerKeyAssetPairExt(val discriminant: LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      open class EmptyVersion: LedgerKeyAssetPairExt(LedgerVersion.EMPTY_VERSION)
    }
  }
  open class LedgerKeyOffer(
      var offerID: Uint64,
      var ownerID: AccountID
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      offerID.toXdr(stream)
      ownerID.toXdr(stream)
    }
  }
  open class LedgerKeyInvoice(
      var invoiceID: Uint64,
      var ext: LedgerKeyInvoiceExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      invoiceID.toXdr(stream)
      ext.toXdr(stream)
    }

    abstract class LedgerKeyInvoiceExt(val discriminant: LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      open class EmptyVersion: LedgerKeyInvoiceExt(LedgerVersion.EMPTY_VERSION)
    }
  }
  open class LedgerKeyReviewableRequest(
      var requestID: Uint64,
      var ext: LedgerKeyReviewableRequestExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      requestID.toXdr(stream)
      ext.toXdr(stream)
    }

    abstract class LedgerKeyReviewableRequestExt(val discriminant: LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      open class EmptyVersion: LedgerKeyReviewableRequestExt(LedgerVersion.EMPTY_VERSION)
    }
  }
  open class LedgerKeyExternalSystemAccountID(
      var accountID: AccountID,
      var externalSystemType: Int32,
      var ext: LedgerKeyExternalSystemAccountIDExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      accountID.toXdr(stream)
      externalSystemType.toXdr(stream)
      ext.toXdr(stream)
    }

    abstract class LedgerKeyExternalSystemAccountIDExt(val discriminant: LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      open class EmptyVersion: LedgerKeyExternalSystemAccountIDExt(LedgerVersion.EMPTY_VERSION)
    }
  }
  open class LedgerKeySale(
      var saleID: Uint64,
      var ext: LedgerKeySaleExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      saleID.toXdr(stream)
      ext.toXdr(stream)
    }

    abstract class LedgerKeySaleExt(val discriminant: LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      open class EmptyVersion: LedgerKeySaleExt(LedgerVersion.EMPTY_VERSION)
    }
  }
  open class LedgerKeyKeyValue(
      var key: String256,
      var ext: LedgerKeyKeyValueExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      key.toXdr(stream)
      ext.toXdr(stream)
    }

    abstract class LedgerKeyKeyValueExt(val discriminant: LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      open class EmptyVersion: LedgerKeyKeyValueExt(LedgerVersion.EMPTY_VERSION)
    }
  }
  open class LedgerKeyAccountKYC(
      var accountID: AccountID,
      var ext: LedgerKeyAccountKYCExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      accountID.toXdr(stream)
      ext.toXdr(stream)
    }

    abstract class LedgerKeyAccountKYCExt(val discriminant: LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      open class EmptyVersion: LedgerKeyAccountKYCExt(LedgerVersion.EMPTY_VERSION)
    }
  }
  open class LedgerKeyExternalSystemAccountIDPoolEntry(
      var poolEntryID: Uint64,
      var ext: LedgerKeyExternalSystemAccountIDPoolEntryExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      poolEntryID.toXdr(stream)
      ext.toXdr(stream)
    }

    abstract class LedgerKeyExternalSystemAccountIDPoolEntryExt(val discriminant: LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      open class EmptyVersion: LedgerKeyExternalSystemAccountIDPoolEntryExt(LedgerVersion.EMPTY_VERSION)
    }
  }
}

// === xdr source ============================================================

//  enum BucketEntryType
//  {
//      LIVEENTRY = 0,
//      DEADENTRY = 1
//  };

//  ===========================================================================
public enum class BucketEntryType(val value: Int): XdrEncodable {
  LIVEENTRY(0),
  DEADENTRY(1),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  union BucketEntry switch (BucketEntryType type)
//  {
//  case LIVEENTRY:
//      LedgerEntry liveEntry;
//  
//  case DEADENTRY:
//      LedgerKey deadEntry;
//  };

//  ===========================================================================
abstract class BucketEntry(val discriminant: BucketEntryType): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Liveentry(var liveEntry: LedgerEntry): BucketEntry(BucketEntryType.LIVEENTRY) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      liveEntry.toXdr(stream)
    }
  }

  open class Deadentry(var deadEntry: LedgerKey): BucketEntry(BucketEntryType.DEADENTRY) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      deadEntry.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  struct TransactionSet
//  {
//      Hash previousLedgerHash;
//      TransactionEnvelope txs<>;
//  };

//  ===========================================================================
open class TransactionSet(
    var previousLedgerHash: Hash,
    var txs: Array<TransactionEnvelope>
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    previousLedgerHash.toXdr(stream)
    txs.size.toXdr(stream)
    txs.forEach {
      it.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  struct TransactionResultPair
//  {
//      Hash transactionHash;
//      TransactionResult result; // result for the transaction
//  };

//  ===========================================================================
open class TransactionResultPair(
    var transactionHash: Hash,
    var result: TransactionResult
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    transactionHash.toXdr(stream)
    result.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct TransactionResultSet
//  {
//      TransactionResultPair results<>;
//  };

//  ===========================================================================
open class TransactionResultSet(
    var results: Array<TransactionResultPair>
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    results.size.toXdr(stream)
    results.forEach {
      it.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  struct TransactionHistoryEntry
//  {
//      uint32 ledgerSeq;
//      TransactionSet txSet;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class TransactionHistoryEntry(
    var ledgerSeq: Uint32,
    var txSet: TransactionSet,
    var ext: TransactionHistoryEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    ledgerSeq.toXdr(stream)
    txSet.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class TransactionHistoryEntryExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: TransactionHistoryEntryExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct TransactionHistoryResultEntry
//  {
//      uint32 ledgerSeq;
//      TransactionResultSet txResultSet;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class TransactionHistoryResultEntry(
    var ledgerSeq: Uint32,
    var txResultSet: TransactionResultSet,
    var ext: TransactionHistoryResultEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    ledgerSeq.toXdr(stream)
    txResultSet.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class TransactionHistoryResultEntryExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: TransactionHistoryResultEntryExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct LedgerHeaderHistoryEntry
//  {
//      Hash hash;
//      LedgerHeader header;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class LedgerHeaderHistoryEntry(
    var hash: Hash,
    var header: LedgerHeader,
    var ext: LedgerHeaderHistoryEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    hash.toXdr(stream)
    header.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class LedgerHeaderHistoryEntryExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: LedgerHeaderHistoryEntryExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct LedgerSCPMessages
//  {
//      uint32 ledgerSeq;
//      SCPEnvelope messages<>;
//  };

//  ===========================================================================
open class LedgerSCPMessages(
    var ledgerSeq: Uint32,
    var messages: Array<SCPEnvelope>
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    ledgerSeq.toXdr(stream)
    messages.size.toXdr(stream)
    messages.forEach {
      it.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  struct SCPHistoryEntryV0
//  {
//      SCPQuorumSet quorumSets<>; // additional quorum sets used by ledgerMessages
//      LedgerSCPMessages ledgerMessages;
//  };

//  ===========================================================================
open class SCPHistoryEntryV0(
    var quorumSets: Array<SCPQuorumSet>,
    var ledgerMessages: LedgerSCPMessages
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    quorumSets.size.toXdr(stream)
    quorumSets.forEach {
      it.toXdr(stream)
    }
    ledgerMessages.toXdr(stream)
  }
}

// === xdr source ============================================================

//  union SCPHistoryEntry switch (LedgerVersion v)
//  {
//  case EMPTY_VERSION:
//      SCPHistoryEntryV0 v0;
//  };

//  ===========================================================================
abstract class SCPHistoryEntry(val discriminant: LedgerVersion): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class EmptyVersion(var v0: SCPHistoryEntryV0): SCPHistoryEntry(LedgerVersion.EMPTY_VERSION) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      v0.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  enum LedgerEntryChangeType
//  {
//      CREATED = 0, // entry was added to the ledger
//      UPDATED = 1, // entry was modified in the ledger
//      REMOVED = 2, // entry was removed from the ledger
//      STATE = 3    // value of the entry
//  };

//  ===========================================================================
public enum class LedgerEntryChangeType(val value: Int): XdrEncodable {
  CREATED(0),
  UPDATED(1),
  REMOVED(2),
  STATE(3),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  union LedgerEntryChange switch (LedgerEntryChangeType type)
//  {
//  case CREATED:
//      LedgerEntry created;
//  case UPDATED:
//      LedgerEntry updated;
//  case REMOVED:
//      LedgerKey removed;
//  case STATE:
//      LedgerEntry state;
//  };

//  ===========================================================================
abstract class LedgerEntryChange(val discriminant: LedgerEntryChangeType): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Created(var created: LedgerEntry): LedgerEntryChange(LedgerEntryChangeType.CREATED) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      created.toXdr(stream)
    }
  }

  open class Updated(var updated: LedgerEntry): LedgerEntryChange(LedgerEntryChangeType.UPDATED) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      updated.toXdr(stream)
    }
  }

  open class Removed(var removed: LedgerKey): LedgerEntryChange(LedgerEntryChangeType.REMOVED) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      removed.toXdr(stream)
    }
  }

  open class State(var state: LedgerEntry): LedgerEntryChange(LedgerEntryChangeType.STATE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      state.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  typedef LedgerEntryChange LedgerEntryChanges<>;

//  ===========================================================================
public typealias LedgerEntryChanges = Array<LedgerEntryChange>

fun LedgerEntryChanges.toXdr(stream: XdrDataOutputStream) {
  this.size.toXdr(stream)
  this.forEach {
    it.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct OperationMeta
//  {
//      LedgerEntryChanges changes;
//  };

//  ===========================================================================
open class OperationMeta(
    var changes: LedgerEntryChanges
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    changes.toXdr(stream)
  }
}

// === xdr source ============================================================

//  union TransactionMeta switch (LedgerVersion v)
//  {
//  case EMPTY_VERSION:
//      OperationMeta operations<>;
//  };

//  ===========================================================================
abstract class TransactionMeta(val discriminant: LedgerVersion): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class EmptyVersion(var operations: Array<OperationMeta>): TransactionMeta(LedgerVersion.EMPTY_VERSION) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      operations.size.toXdr(stream)
      operations.forEach {
        it.toXdr(stream)
      }
    }
  }
}

// === xdr source ============================================================

//  struct BindExternalSystemAccountIdOp
//  {
//      int32 externalSystemType;
//  
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class BindExternalSystemAccountIdOp(
    var externalSystemType: Int32,
    var ext: BindExternalSystemAccountIdOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    externalSystemType.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class BindExternalSystemAccountIdOpExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: BindExternalSystemAccountIdOpExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum BindExternalSystemAccountIdResultCode
//  {
//      // codes considered as "success" for the operation
//      SUCCESS = 0,
//  
//      // codes considered as "failure" for the operation
//      MALFORMED = -1,
//      NO_AVAILABLE_ID = -2,
//      AUTO_GENERATED_TYPE_NOT_ALLOWED = -3
//  };

//  ===========================================================================
public enum class BindExternalSystemAccountIdResultCode(val value: Int): XdrEncodable {
  SUCCESS(0),
  MALFORMED(-1),
  NO_AVAILABLE_ID(-2),
  AUTO_GENERATED_TYPE_NOT_ALLOWED(-3),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct BindExternalSystemAccountIdSuccess {
//      longstring data;
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class BindExternalSystemAccountIdSuccess(
    var data: Longstring,
    var ext: BindExternalSystemAccountIdSuccessExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    data.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class BindExternalSystemAccountIdSuccessExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: BindExternalSystemAccountIdSuccessExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  union BindExternalSystemAccountIdResult switch (BindExternalSystemAccountIdResultCode code)
//  {
//  case SUCCESS:
//      BindExternalSystemAccountIdSuccess success;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class BindExternalSystemAccountIdResult(val discriminant: BindExternalSystemAccountIdResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Success(var success: BindExternalSystemAccountIdSuccess): BindExternalSystemAccountIdResult(BindExternalSystemAccountIdResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  struct CheckSaleStateOp
//  {
//  	uint64 saleID;
//  	 // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;		
//      }
//      ext;
//  };

//  ===========================================================================
open class CheckSaleStateOp(
    var saleID: Uint64,
    var ext: CheckSaleStateOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    saleID.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class CheckSaleStateOpExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: CheckSaleStateOpExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum CheckSaleStateResultCode
//  {
//      // codes considered as "success" for the operation
//      SUCCESS = 0, // sale was processed
//  
//      // codes considered as "failure" for the operation
//      NOT_FOUND = -1, // sale was not found
//  	NOT_READY = -2 // sale is not ready to be closed or canceled
//  };

//  ===========================================================================
public enum class CheckSaleStateResultCode(val value: Int): XdrEncodable {
  SUCCESS(0),
  NOT_FOUND(-1),
  NOT_READY(-2),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  enum CheckSaleStateEffect {
//  	CANCELED = 1, // sale did not managed to go over soft cap in time
//  	CLOSED = 2, // sale met hard cap or (end time and soft cap)
//  	UPDATED = 3 // on check sale was modified and modifications must be saved
//  };

//  ===========================================================================
public enum class CheckSaleStateEffect(val value: Int): XdrEncodable {
  CANCELED(1),
  CLOSED(2),
  UPDATED(3),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct SaleCanceled {
//  	 // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class SaleCanceled(
    var ext: SaleCanceledExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    ext.toXdr(stream)
  }

  abstract class SaleCanceledExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: SaleCanceledExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct SaleUpdated {
//  	 // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class SaleUpdated(
    var ext: SaleUpdatedExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    ext.toXdr(stream)
  }

  abstract class SaleUpdatedExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: SaleUpdatedExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct CheckSubSaleClosedResult {
//  	BalanceID saleBaseBalance;
//  	BalanceID saleQuoteBalance;
//  	ManageOfferSuccessResult saleDetails;
//  	 // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class CheckSubSaleClosedResult(
    var saleBaseBalance: BalanceID,
    var saleQuoteBalance: BalanceID,
    var saleDetails: ManageOfferSuccessResult,
    var ext: CheckSubSaleClosedResultExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    saleBaseBalance.toXdr(stream)
    saleQuoteBalance.toXdr(stream)
    saleDetails.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class CheckSubSaleClosedResultExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: CheckSubSaleClosedResultExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct CheckSaleClosedResult {
//  	AccountID saleOwner;
//  	CheckSubSaleClosedResult results<>;
//  	 // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class CheckSaleClosedResult(
    var saleOwner: AccountID,
    var results: Array<CheckSubSaleClosedResult>,
    var ext: CheckSaleClosedResultExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    saleOwner.toXdr(stream)
    results.size.toXdr(stream)
    results.forEach {
      it.toXdr(stream)
    }
    ext.toXdr(stream)
  }

  abstract class CheckSaleClosedResultExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: CheckSaleClosedResultExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct CheckSaleStateSuccess
//  {
//  	uint64 saleID;
//  	union switch (CheckSaleStateEffect effect)
//      {
//      case CANCELED:
//          SaleCanceled saleCanceled;
//  	case CLOSED:
//  		CheckSaleClosedResult saleClosed;
//  	case UPDATED:
//  		SaleUpdated saleUpdated;
//      }
//      effect;
//  	 // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class CheckSaleStateSuccess(
    var saleID: Uint64,
    var effect: CheckSaleStateSuccessEffect,
    var ext: CheckSaleStateSuccessExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    saleID.toXdr(stream)
    effect.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class CheckSaleStateSuccessEffect(val discriminant: CheckSaleStateEffect): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class Canceled(var saleCanceled: SaleCanceled): CheckSaleStateSuccessEffect(CheckSaleStateEffect.CANCELED) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        saleCanceled.toXdr(stream)
      }
    }

    open class Closed(var saleClosed: CheckSaleClosedResult): CheckSaleStateSuccessEffect(CheckSaleStateEffect.CLOSED) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        saleClosed.toXdr(stream)
      }
    }

    open class Updated(var saleUpdated: SaleUpdated): CheckSaleStateSuccessEffect(CheckSaleStateEffect.UPDATED) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        saleUpdated.toXdr(stream)
      }
    }
  }
  abstract class CheckSaleStateSuccessExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: CheckSaleStateSuccessExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  union CheckSaleStateResult switch (CheckSaleStateResultCode code)
//  {
//  case SUCCESS:
//      CheckSaleStateSuccess success;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class CheckSaleStateResult(val discriminant: CheckSaleStateResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Success(var success: CheckSaleStateSuccess): CheckSaleStateResult(CheckSaleStateResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  struct CreateAMLAlertRequestOp
//  {
//      string64 reference;
//      AMLAlertRequest amlAlertRequest;
//  
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  
//  };

//  ===========================================================================
open class CreateAMLAlertRequestOp(
    var reference: String64,
    var amlAlertRequest: AMLAlertRequest,
    var ext: CreateAMLAlertRequestOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    reference.toXdr(stream)
    amlAlertRequest.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class CreateAMLAlertRequestOpExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: CreateAMLAlertRequestOpExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum CreateAMLAlertRequestResultCode
//  {
//      // codes considered as "success" for the operation
//      SUCCESS = 0,
//      BALANCE_NOT_EXIST = 1, // balance doesn't exist
//      INVALID_REASON = 2, //invalid reason for request
//      UNDERFUNDED = 3, //when couldn't lock balance
//  	REFERENCE_DUPLICATION = 4, // reference already exists
//  	INVALID_AMOUNT = 5 // amount must be positive
//  
//  
//  };

//  ===========================================================================
public enum class CreateAMLAlertRequestResultCode(val value: Int): XdrEncodable {
  SUCCESS(0),
  BALANCE_NOT_EXIST(1),
  INVALID_REASON(2),
  UNDERFUNDED(3),
  REFERENCE_DUPLICATION(4),
  INVALID_AMOUNT(5),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct CreateAMLAlertRequestSuccess {
//  	uint64 requestID;
//  
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class CreateAMLAlertRequestSuccess(
    var requestID: Uint64,
    var ext: CreateAMLAlertRequestSuccessExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    requestID.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class CreateAMLAlertRequestSuccessExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: CreateAMLAlertRequestSuccessExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  union CreateAMLAlertRequestResult switch (CreateAMLAlertRequestResultCode code)
//  {
//      case SUCCESS:
//          CreateAMLAlertRequestSuccess success;
//      default:
//          void;
//  };

//  ===========================================================================
abstract class CreateAMLAlertRequestResult(val discriminant: CreateAMLAlertRequestResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Success(var success: CreateAMLAlertRequestSuccess): CreateAMLAlertRequestResult(CreateAMLAlertRequestResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  struct UpdateKYCRequestData {
//      AccountID accountToUpdateKYC;
//  	AccountType accountTypeToSet;
//  	uint32 kycLevelToSet;
//      longstring kycData;
//  	uint32* allTasks;
//  
//  	// Reserved for future use
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class UpdateKYCRequestData(
    var accountToUpdateKYC: AccountID,
    var accountTypeToSet: AccountType,
    var kycLevelToSet: Uint32,
    var kycData: Longstring,
    var allTasks: Uint32?,
    var ext: UpdateKYCRequestDataExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    accountToUpdateKYC.toXdr(stream)
    accountTypeToSet.toXdr(stream)
    kycLevelToSet.toXdr(stream)
    kycData.toXdr(stream)
    if (allTasks != null) {
      true.toXdr(stream)
      allTasks?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    ext.toXdr(stream)
  }

  abstract class UpdateKYCRequestDataExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: UpdateKYCRequestDataExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct CreateUpdateKYCRequestOp {
//      uint64 requestID;
//      UpdateKYCRequestData updateKYCRequestData;
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class CreateUpdateKYCRequestOp(
    var requestID: Uint64,
    var updateKYCRequestData: UpdateKYCRequestData,
    var ext: CreateUpdateKYCRequestOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    requestID.toXdr(stream)
    updateKYCRequestData.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class CreateUpdateKYCRequestOpExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: CreateUpdateKYCRequestOpExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum CreateUpdateKYCRequestResultCode
//  {
//      // codes considered as "success" for the operation
//      SUCCESS = 0,
//  
//      // codes considered as "failure" for the operation
//      ACC_TO_UPDATE_DOES_NOT_EXIST = -1, // account to update does not exist
//      REQUEST_ALREADY_EXISTS = -2,
//  	SAME_ACC_TYPE_TO_SET = -3,
//  	REQUEST_DOES_NOT_EXIST = -4,
//  	PENDING_REQUEST_UPDATE_NOT_ALLOWED = -5,
//  	NOT_ALLOWED_TO_UPDATE_REQUEST = -6, // master account can update request only through review request operation
//  	INVALID_UPDATE_KYC_REQUEST_DATA = -7,
//  	INVALID_KYC_DATA = -8,
//  	KYC_RULE_NOT_FOUND = -9
//  };

//  ===========================================================================
public enum class CreateUpdateKYCRequestResultCode(val value: Int): XdrEncodable {
  SUCCESS(0),
  ACC_TO_UPDATE_DOES_NOT_EXIST(-1),
  REQUEST_ALREADY_EXISTS(-2),
  SAME_ACC_TYPE_TO_SET(-3),
  REQUEST_DOES_NOT_EXIST(-4),
  PENDING_REQUEST_UPDATE_NOT_ALLOWED(-5),
  NOT_ALLOWED_TO_UPDATE_REQUEST(-6),
  INVALID_UPDATE_KYC_REQUEST_DATA(-7),
  INVALID_KYC_DATA(-8),
  KYC_RULE_NOT_FOUND(-9),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  union CreateUpdateKYCRequestResult switch (CreateUpdateKYCRequestResultCode code)
//  {
//  case SUCCESS:
//      struct {
//  		uint64 requestID;
//  		bool fulfilled;
//  		// Reserved for future use
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//  	} success;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class CreateUpdateKYCRequestResult(val discriminant: CreateUpdateKYCRequestResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Success(var success: CreateUpdateKYCRequestResultSuccess): CreateUpdateKYCRequestResult(CreateUpdateKYCRequestResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }
  }

  open class CreateUpdateKYCRequestResultSuccess(
      var requestID: Uint64,
      var fulfilled: Boolean,
      var ext: CreateUpdateKYCRequestResultSuccessExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      requestID.toXdr(stream)
      fulfilled.toXdr(stream)
      ext.toXdr(stream)
    }

    abstract class CreateUpdateKYCRequestResultSuccessExt(val discriminant: LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      open class EmptyVersion: CreateUpdateKYCRequestResultSuccessExt(LedgerVersion.EMPTY_VERSION)
    }
  }
}

// === xdr source ============================================================

//  struct CreateAccountOp
//  {
//      AccountID destination; // account to create
//      AccountID recoveryKey; // recovery signer's public key
//      AccountID* referrer;     // parent account
//  	AccountType accountType;
//  	uint32 policies;
//  
//  	 // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;	
//  	case PASS_EXTERNAL_SYS_ACC_ID_IN_CREATE_ACC:
//  		ExternalSystemAccountID externalSystemIDs<>;
//      }
//      ext;
//  };

//  ===========================================================================
open class CreateAccountOp(
    var destination: AccountID,
    var recoveryKey: AccountID,
    var referrer: AccountID?,
    var accountType: AccountType,
    var policies: Uint32,
    var ext: CreateAccountOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    destination.toXdr(stream)
    recoveryKey.toXdr(stream)
    if (referrer != null) {
      true.toXdr(stream)
      referrer?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    accountType.toXdr(stream)
    policies.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class CreateAccountOpExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: CreateAccountOpExt(LedgerVersion.EMPTY_VERSION)

    open class PassExternalSysAccIdInCreateAcc(var externalSystemIDs: Array<ExternalSystemAccountID>): CreateAccountOpExt(LedgerVersion.PASS_EXTERNAL_SYS_ACC_ID_IN_CREATE_ACC) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        externalSystemIDs.size.toXdr(stream)
        externalSystemIDs.forEach {
          it.toXdr(stream)
        }
      }
    }
  }
}

// === xdr source ============================================================

//  enum CreateAccountResultCode
//  {
//      // codes considered as "success" for the operation
//      SUCCESS = 0, // account was created
//  
//      // codes considered as "failure" for the operation
//      MALFORMED = -1,       // invalid destination
//  	ACCOUNT_TYPE_MISMATCHED = -2, // account already exist and change of account type is not allowed
//  	TYPE_NOT_ALLOWED = -3, // master or commission account types are not allowed
//      NAME_DUPLICATION = -4,
//      REFERRER_NOT_FOUND = -5,
//  	INVALID_ACCOUNT_VERSION = -6, // if account version is higher than ledger version
//  	NOT_VERIFIED_CANNOT_HAVE_POLICIES = -7,
//  	EXTERNAL_SYS_ACC_NOT_ALLOWED = -8, // op contains external system account ID which should be generated on core level
//  	EXTERNAL_SYS_ID_EXISTS = -9 // external system account ID already exists
//  };

//  ===========================================================================
public enum class CreateAccountResultCode(val value: Int): XdrEncodable {
  SUCCESS(0),
  MALFORMED(-1),
  ACCOUNT_TYPE_MISMATCHED(-2),
  TYPE_NOT_ALLOWED(-3),
  NAME_DUPLICATION(-4),
  REFERRER_NOT_FOUND(-5),
  INVALID_ACCOUNT_VERSION(-6),
  NOT_VERIFIED_CANNOT_HAVE_POLICIES(-7),
  EXTERNAL_SYS_ACC_NOT_ALLOWED(-8),
  EXTERNAL_SYS_ID_EXISTS(-9),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct CreateAccountSuccess
//  {
//  	ExternalSystemAccountID externalSystemIDs<>;
//  	 // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class CreateAccountSuccess(
    var externalSystemIDs: Array<ExternalSystemAccountID>,
    var ext: CreateAccountSuccessExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    externalSystemIDs.size.toXdr(stream)
    externalSystemIDs.forEach {
      it.toXdr(stream)
    }
    ext.toXdr(stream)
  }

  abstract class CreateAccountSuccessExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: CreateAccountSuccessExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  union CreateAccountResult switch (CreateAccountResultCode code)
//  {
//  case SUCCESS:
//      CreateAccountSuccess success;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class CreateAccountResult(val discriminant: CreateAccountResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Success(var success: CreateAccountSuccess): CreateAccountResult(CreateAccountResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  struct CreateIssuanceRequestOp
//  {
//  	IssuanceRequest request;
//  	string64 reference;
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class CreateIssuanceRequestOp(
    var request: IssuanceRequest,
    var reference: String64,
    var ext: CreateIssuanceRequestOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    request.toXdr(stream)
    reference.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class CreateIssuanceRequestOpExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: CreateIssuanceRequestOpExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum CreateIssuanceRequestResultCode
//  {
//      // codes considered as "success" for the operation
//      SUCCESS = 0,
//  
//      // codes considered as "failure" for the operation
//      ASSET_NOT_FOUND = -1,
//  	INVALID_AMOUNT = -2,
//  	REFERENCE_DUPLICATION = -3,
//  	NO_COUNTERPARTY = -4,
//  	NOT_AUTHORIZED = -5,
//  	EXCEEDS_MAX_ISSUANCE_AMOUNT = -6,
//  	RECEIVER_FULL_LINE = -7,
//  	INVALID_EXTERNAL_DETAILS = -8, // external details size exceeds max allowed
//  	FEE_EXCEEDS_AMOUNT = -9, // fee more than amount to issue
//      REQUIRES_KYC = -10 // asset requires receiver to have KYC
//  };

//  ===========================================================================
public enum class CreateIssuanceRequestResultCode(val value: Int): XdrEncodable {
  SUCCESS(0),
  ASSET_NOT_FOUND(-1),
  INVALID_AMOUNT(-2),
  REFERENCE_DUPLICATION(-3),
  NO_COUNTERPARTY(-4),
  NOT_AUTHORIZED(-5),
  EXCEEDS_MAX_ISSUANCE_AMOUNT(-6),
  RECEIVER_FULL_LINE(-7),
  INVALID_EXTERNAL_DETAILS(-8),
  FEE_EXCEEDS_AMOUNT(-9),
  REQUIRES_KYC(-10),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct CreateIssuanceRequestSuccess {
//  	uint64 requestID;
//  	AccountID receiver;
//  	bool fulfilled;
//  	Fee fee;
//  	union switch (LedgerVersion v)
//  	{
//  	case EMPTY_VERSION:
//  		void;
//  	}
//  	ext;
//  };

//  ===========================================================================
open class CreateIssuanceRequestSuccess(
    var requestID: Uint64,
    var receiver: AccountID,
    var fulfilled: Boolean,
    var fee: Fee,
    var ext: CreateIssuanceRequestSuccessExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    requestID.toXdr(stream)
    receiver.toXdr(stream)
    fulfilled.toXdr(stream)
    fee.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class CreateIssuanceRequestSuccessExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: CreateIssuanceRequestSuccessExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  union CreateIssuanceRequestResult switch (CreateIssuanceRequestResultCode code)
//  {
//  case SUCCESS:
//      CreateIssuanceRequestSuccess success;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class CreateIssuanceRequestResult(val discriminant: CreateIssuanceRequestResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Success(var success: CreateIssuanceRequestSuccess): CreateIssuanceRequestResult(CreateIssuanceRequestResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  struct CreatePreIssuanceRequestOp
//  {
//      PreIssuanceRequest request;
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class CreatePreIssuanceRequestOp(
    var request: PreIssuanceRequest,
    var ext: CreatePreIssuanceRequestOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    request.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class CreatePreIssuanceRequestOpExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: CreatePreIssuanceRequestOpExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum CreatePreIssuanceRequestResultCode
//  {
//      // codes considered as "success" for the operation
//      SUCCESS = 0,
//  
//      // codes considered as "failure" for the operation
//      ASSET_NOT_FOUND = -1,
//      REFERENCE_DUPLICATION = -2,    // reference is already used
//      NOT_AUTHORIZED_UPLOAD = -3, // tries to pre issue asset for not owned asset
//      INVALID_SIGNATURE = -4,
//      EXCEEDED_MAX_AMOUNT = -5,
//  	INVALID_AMOUNT = -6,
//  	INVALID_REFERENCE = -7
//  };

//  ===========================================================================
public enum class CreatePreIssuanceRequestResultCode(val value: Int): XdrEncodable {
  SUCCESS(0),
  ASSET_NOT_FOUND(-1),
  REFERENCE_DUPLICATION(-2),
  NOT_AUTHORIZED_UPLOAD(-3),
  INVALID_SIGNATURE(-4),
  EXCEEDED_MAX_AMOUNT(-5),
  INVALID_AMOUNT(-6),
  INVALID_REFERENCE(-7),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  union CreatePreIssuanceRequestResult switch (CreatePreIssuanceRequestResultCode code)
//  {
//  case SUCCESS:
//      struct {
//  		uint64 requestID;
//  		bool fulfilled;
//  		// reserved for future use
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//  	} success;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class CreatePreIssuanceRequestResult(val discriminant: CreatePreIssuanceRequestResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Success(var success: CreatePreIssuanceRequestResultSuccess): CreatePreIssuanceRequestResult(CreatePreIssuanceRequestResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }
  }

  open class CreatePreIssuanceRequestResultSuccess(
      var requestID: Uint64,
      var fulfilled: Boolean,
      var ext: CreatePreIssuanceRequestResultSuccessExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      requestID.toXdr(stream)
      fulfilled.toXdr(stream)
      ext.toXdr(stream)
    }

    abstract class CreatePreIssuanceRequestResultSuccessExt(val discriminant: LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      open class EmptyVersion: CreatePreIssuanceRequestResultSuccessExt(LedgerVersion.EMPTY_VERSION)
    }
  }
}

// === xdr source ============================================================

//  struct CreateSaleCreationRequestOp
//  {
//  	uint64 requestID;
//      SaleCreationRequest request;
//  
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  
//  };

//  ===========================================================================
open class CreateSaleCreationRequestOp(
    var requestID: Uint64,
    var request: SaleCreationRequest,
    var ext: CreateSaleCreationRequestOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    requestID.toXdr(stream)
    request.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class CreateSaleCreationRequestOpExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: CreateSaleCreationRequestOpExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum CreateSaleCreationRequestResultCode
//  {
//      // codes considered as "success" for the operation
//      SUCCESS = 0,
//  
//      // codes considered as "failure" for the operation
//  	REQUEST_NOT_FOUND = -1, // trying to update reviewable request which does not exists
//  	BASE_ASSET_OR_ASSET_REQUEST_NOT_FOUND = -2, // failed to find asset or asset request for sale
//  	QUOTE_ASSET_NOT_FOUND = -3, // failed to find quote asset
//  	START_END_INVALID = -4, // sale ends before start
//  	INVALID_END = -5, // end date is in the past
//  	INVALID_PRICE = -6, // price can not be 0
//  	INVALID_CAP = -7, // hard cap is < soft cap
//  	INSUFFICIENT_MAX_ISSUANCE = -8, // max number of tokens is less then number of tokens required for soft cap
//  	INVALID_ASSET_PAIR = -9, // one of the assets has invalid code or base asset is equal to quote asset
//  	REQUEST_OR_SALE_ALREADY_EXISTS = -10,
//  	INSUFFICIENT_PREISSUED = -11, // amount of pre issued tokens is insufficient for hard cap
//  	INVALID_DETAILS = -12, // details must be a valid json
//  	VERSION_IS_NOT_SUPPORTED_YET = -13 // version specified in request is not supported yet
//  };

//  ===========================================================================
public enum class CreateSaleCreationRequestResultCode(val value: Int): XdrEncodable {
  SUCCESS(0),
  REQUEST_NOT_FOUND(-1),
  BASE_ASSET_OR_ASSET_REQUEST_NOT_FOUND(-2),
  QUOTE_ASSET_NOT_FOUND(-3),
  START_END_INVALID(-4),
  INVALID_END(-5),
  INVALID_PRICE(-6),
  INVALID_CAP(-7),
  INSUFFICIENT_MAX_ISSUANCE(-8),
  INVALID_ASSET_PAIR(-9),
  REQUEST_OR_SALE_ALREADY_EXISTS(-10),
  INSUFFICIENT_PREISSUED(-11),
  INVALID_DETAILS(-12),
  VERSION_IS_NOT_SUPPORTED_YET(-13),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct CreateSaleCreationSuccess {
//  	uint64 requestID;
//  
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class CreateSaleCreationSuccess(
    var requestID: Uint64,
    var ext: CreateSaleCreationSuccessExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    requestID.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class CreateSaleCreationSuccessExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: CreateSaleCreationSuccessExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  union CreateSaleCreationRequestResult switch (CreateSaleCreationRequestResultCode code)
//  {
//      case SUCCESS:
//          CreateSaleCreationSuccess success;
//      default:
//          void;
//  };

//  ===========================================================================
abstract class CreateSaleCreationRequestResult(val discriminant: CreateSaleCreationRequestResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Success(var success: CreateSaleCreationSuccess): CreateSaleCreationRequestResult(CreateSaleCreationRequestResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  struct CreateWithdrawalRequestOp
//  {
//      WithdrawalRequest request;
//  
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  
//  };

//  ===========================================================================
open class CreateWithdrawalRequestOp(
    var request: WithdrawalRequest,
    var ext: CreateWithdrawalRequestOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    request.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class CreateWithdrawalRequestOpExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: CreateWithdrawalRequestOpExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum CreateWithdrawalRequestResultCode
//  {
//      // codes considered as "success" for the operation
//      SUCCESS = 0,
//  
//      // codes considered as "failure" for the operation
//  	INVALID_AMOUNT = -1, // amount is 0
//      INVALID_EXTERNAL_DETAILS = -2, // external details size exceeds max allowed
//  	BALANCE_NOT_FOUND = -3, // balance not found
//  	ASSET_IS_NOT_WITHDRAWABLE = -4, // asset is not withdrawable
//  	CONVERSION_PRICE_IS_NOT_AVAILABLE = -5, // failed to find conversion price - conversion is not allowed
//  	FEE_MISMATCHED = -6, // expected fee does not match calculated fee
//  	CONVERSION_OVERFLOW = -7, // overflow during converting source asset to dest asset
//  	CONVERTED_AMOUNT_MISMATCHED = -8, // expected converted amount passed by user, does not match calculated
//  	BALANCE_LOCK_OVERFLOW = -9, // overflow while tried to lock amount
//  	UNDERFUNDED = -10, // insufficient balance to perform operation
//  	INVALID_UNIVERSAL_AMOUNT = -11, // non-zero universal amount
//  	STATS_OVERFLOW = -12, // statistics overflowed by the operation
//      LIMITS_EXCEEDED = -13, // withdraw exceeds limits for source account
//  	INVALID_PRE_CONFIRMATION_DETAILS = -14 // it's not allowed to pass pre confirmation details
//  };

//  ===========================================================================
public enum class CreateWithdrawalRequestResultCode(val value: Int): XdrEncodable {
  SUCCESS(0),
  INVALID_AMOUNT(-1),
  INVALID_EXTERNAL_DETAILS(-2),
  BALANCE_NOT_FOUND(-3),
  ASSET_IS_NOT_WITHDRAWABLE(-4),
  CONVERSION_PRICE_IS_NOT_AVAILABLE(-5),
  FEE_MISMATCHED(-6),
  CONVERSION_OVERFLOW(-7),
  CONVERTED_AMOUNT_MISMATCHED(-8),
  BALANCE_LOCK_OVERFLOW(-9),
  UNDERFUNDED(-10),
  INVALID_UNIVERSAL_AMOUNT(-11),
  STATS_OVERFLOW(-12),
  LIMITS_EXCEEDED(-13),
  INVALID_PRE_CONFIRMATION_DETAILS(-14),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct CreateWithdrawalSuccess {
//  	uint64 requestID;
//  
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class CreateWithdrawalSuccess(
    var requestID: Uint64,
    var ext: CreateWithdrawalSuccessExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    requestID.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class CreateWithdrawalSuccessExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: CreateWithdrawalSuccessExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  union CreateWithdrawalRequestResult switch (CreateWithdrawalRequestResultCode code)
//  {
//      case SUCCESS:
//          CreateWithdrawalSuccess success;
//      default:
//          void;
//  };

//  ===========================================================================
abstract class CreateWithdrawalRequestResult(val discriminant: CreateWithdrawalRequestResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Success(var success: CreateWithdrawalSuccess): CreateWithdrawalRequestResult(CreateWithdrawalRequestResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  struct DirectDebitOp
//  {
//      AccountID from;
//      PaymentOp paymentOp;
//  	 // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class DirectDebitOp(
    var from: AccountID,
    var paymentOp: PaymentOp,
    var ext: DirectDebitOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    from.toXdr(stream)
    paymentOp.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class DirectDebitOpExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: DirectDebitOpExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum DirectDebitResultCode
//  {
//      // codes considered as "success" for the operation
//      SUCCESS = 0, // payment successfuly completed
//  
//      // codes considered as "failure" for the operation
//      MALFORMED = -1,       // bad input
//      UNDERFUNDED = -2,     // not enough funds in source account
//      LINE_FULL = -3,       // destination would go above their limit
//  	FEE_MISMATCHED = -4,   // fee is not equal to expected fee
//      BALANCE_NOT_FOUND = -5, // destination balance not found
//      BALANCE_ACCOUNT_MISMATCHED = -6,
//      BALANCE_ASSETS_MISMATCHED = -7,
//  	SRC_BALANCE_NOT_FOUND = -8, // source balance not found
//      REFERENCE_DUPLICATION = -9,
//      STATS_OVERFLOW = -10,
//      LIMITS_EXCEEDED = -11,
//      NOT_ALLOWED_BY_ASSET_POLICY = -12,
//      NO_TRUST = -13
//  };

//  ===========================================================================
public enum class DirectDebitResultCode(val value: Int): XdrEncodable {
  SUCCESS(0),
  MALFORMED(-1),
  UNDERFUNDED(-2),
  LINE_FULL(-3),
  FEE_MISMATCHED(-4),
  BALANCE_NOT_FOUND(-5),
  BALANCE_ACCOUNT_MISMATCHED(-6),
  BALANCE_ASSETS_MISMATCHED(-7),
  SRC_BALANCE_NOT_FOUND(-8),
  REFERENCE_DUPLICATION(-9),
  STATS_OVERFLOW(-10),
  LIMITS_EXCEEDED(-11),
  NOT_ALLOWED_BY_ASSET_POLICY(-12),
  NO_TRUST(-13),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct DirectDebitSuccess {
//  	PaymentResponse paymentResponse;
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class DirectDebitSuccess(
    var paymentResponse: PaymentResponse,
    var ext: DirectDebitSuccessExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    paymentResponse.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class DirectDebitSuccessExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: DirectDebitSuccessExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  union DirectDebitResult switch (DirectDebitResultCode code)
//  {
//  case SUCCESS:
//      DirectDebitSuccess success;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class DirectDebitResult(val discriminant: DirectDebitResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Success(var success: DirectDebitSuccess): DirectDebitResult(DirectDebitResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  struct ManageAccountOp
//  {
//      AccountID account; // account to manage
//      AccountType accountType;
//      uint32 blockReasonsToAdd;
//      uint32 blockReasonsToRemove; 
//  	 // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class ManageAccountOp(
    var account: AccountID,
    var accountType: AccountType,
    var blockReasonsToAdd: Uint32,
    var blockReasonsToRemove: Uint32,
    var ext: ManageAccountOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    account.toXdr(stream)
    accountType.toXdr(stream)
    blockReasonsToAdd.toXdr(stream)
    blockReasonsToRemove.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class ManageAccountOpExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: ManageAccountOpExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum ManageAccountResultCode
//  {
//      // codes considered as "success" for the operation
//      SUCCESS = 0, // account was created
//  
//      // codes considered as "failure" for the operation
//      NOT_FOUND = -1,         // account does not exists
//      MALFORMED = -2,
//  	NOT_ALLOWED = -3,         // manage account operation is not allowed on this account
//      TYPE_MISMATCH = -4
//  };

//  ===========================================================================
public enum class ManageAccountResultCode(val value: Int): XdrEncodable {
  SUCCESS(0),
  NOT_FOUND(-1),
  MALFORMED(-2),
  NOT_ALLOWED(-3),
  TYPE_MISMATCH(-4),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct ManageAccountSuccess {
//  	uint32 blockReasons;
//   // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class ManageAccountSuccess(
    var blockReasons: Uint32,
    var ext: ManageAccountSuccessExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    blockReasons.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class ManageAccountSuccessExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: ManageAccountSuccessExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  union ManageAccountResult switch (ManageAccountResultCode code)
//  {
//  case SUCCESS:
//      ManageAccountSuccess success;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class ManageAccountResult(val discriminant: ManageAccountResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Success(var success: ManageAccountSuccess): ManageAccountResult(ManageAccountResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  enum ManageAssetPairAction
//  {
//      CREATE = 0,
//      UPDATE_PRICE = 1,
//      UPDATE_POLICIES = 2
//  };

//  ===========================================================================
public enum class ManageAssetPairAction(val value: Int): XdrEncodable {
  CREATE(0),
  UPDATE_PRICE(1),
  UPDATE_POLICIES(2),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct ManageAssetPairOp
//  {
//      ManageAssetPairAction action;
//  	AssetCode base;
//  	AssetCode quote;
//  
//      int64 physicalPrice;
//  
//  	int64 physicalPriceCorrection; // correction of physical price in percents. If physical price is set and restriction by physical price set, mininal price for offer for this pair will be physicalPrice * physicalPriceCorrection
//  	int64 maxPriceStep;
//  
//  	int32 policies;
//  
//  	 // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class ManageAssetPairOp(
    var action: ManageAssetPairAction,
    var base: AssetCode,
    var quote: AssetCode,
    var physicalPrice: Int64,
    var physicalPriceCorrection: Int64,
    var maxPriceStep: Int64,
    var policies: Int32,
    var ext: ManageAssetPairOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    action.toXdr(stream)
    base.toXdr(stream)
    quote.toXdr(stream)
    physicalPrice.toXdr(stream)
    physicalPriceCorrection.toXdr(stream)
    maxPriceStep.toXdr(stream)
    policies.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class ManageAssetPairOpExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: ManageAssetPairOpExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum ManageAssetPairResultCode
//  {
//      // codes considered as "success" for the operation
//      SUCCESS = 0,
//  
//      // codes considered as "failure" for the operation
//  	NOT_FOUND = -1,           // failed to find asset with such code
//  	ALREADY_EXISTS = -2,
//      MALFORMED = -3,
//  	INVALID_ASSET = -4,
//  	INVALID_ACTION = -5,
//  	INVALID_POLICIES = -6,
//  	ASSET_NOT_FOUND = -7
//  };

//  ===========================================================================
public enum class ManageAssetPairResultCode(val value: Int): XdrEncodable {
  SUCCESS(0),
  NOT_FOUND(-1),
  ALREADY_EXISTS(-2),
  MALFORMED(-3),
  INVALID_ASSET(-4),
  INVALID_ACTION(-5),
  INVALID_POLICIES(-6),
  ASSET_NOT_FOUND(-7),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct ManageAssetPairSuccess
//  {
//  	int64 currentPrice;
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class ManageAssetPairSuccess(
    var currentPrice: Int64,
    var ext: ManageAssetPairSuccessExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    currentPrice.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class ManageAssetPairSuccessExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: ManageAssetPairSuccessExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  union ManageAssetPairResult switch (ManageAssetPairResultCode code)
//  {
//  case SUCCESS:
//      ManageAssetPairSuccess success;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class ManageAssetPairResult(val discriminant: ManageAssetPairResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Success(var success: ManageAssetPairSuccess): ManageAssetPairResult(ManageAssetPairResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  enum ManageAssetAction
//  {
//      CREATE_ASSET_CREATION_REQUEST = 0,
//      CREATE_ASSET_UPDATE_REQUEST = 1,
//  	CANCEL_ASSET_REQUEST = 2,
//  	CHANGE_PREISSUED_ASSET_SIGNER = 3
//  };

//  ===========================================================================
public enum class ManageAssetAction(val value: Int): XdrEncodable {
  CREATE_ASSET_CREATION_REQUEST(0),
  CREATE_ASSET_UPDATE_REQUEST(1),
  CANCEL_ASSET_REQUEST(2),
  CHANGE_PREISSUED_ASSET_SIGNER(3),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct CancelAssetRequest {
//  
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class CancelAssetRequest(
    var ext: CancelAssetRequestExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    ext.toXdr(stream)
  }

  abstract class CancelAssetRequestExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: CancelAssetRequestExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct ManageAssetOp
//  {
//  	uint64 requestID; // 0 to create, non zero will try to update
//      union switch (ManageAssetAction action)
//  	{
//  	case CREATE_ASSET_CREATION_REQUEST:
//  		AssetCreationRequest createAsset;
//  	case CREATE_ASSET_UPDATE_REQUEST:
//  		AssetUpdateRequest updateAsset;
//  	case CANCEL_ASSET_REQUEST:
//  		CancelAssetRequest cancelRequest;
//  	case CHANGE_PREISSUED_ASSET_SIGNER:
//  		AssetChangePreissuedSigner changePreissuedSigner;
//  	} request;
//  
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class ManageAssetOp(
    var requestID: Uint64,
    var request: ManageAssetOpRequest,
    var ext: ManageAssetOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    requestID.toXdr(stream)
    request.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class ManageAssetOpRequest(val discriminant: ManageAssetAction): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class CreateAssetCreationRequest(var createAsset: AssetCreationRequest): ManageAssetOpRequest(ManageAssetAction.CREATE_ASSET_CREATION_REQUEST) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        createAsset.toXdr(stream)
      }
    }

    open class CreateAssetUpdateRequest(var updateAsset: AssetUpdateRequest): ManageAssetOpRequest(ManageAssetAction.CREATE_ASSET_UPDATE_REQUEST) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        updateAsset.toXdr(stream)
      }
    }

    open class CancelAssetRequest(var cancelRequest: CancelAssetRequest): ManageAssetOpRequest(ManageAssetAction.CANCEL_ASSET_REQUEST) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        cancelRequest.toXdr(stream)
      }
    }

    open class ChangePreissuedAssetSigner(var changePreissuedSigner: AssetChangePreissuedSigner): ManageAssetOpRequest(ManageAssetAction.CHANGE_PREISSUED_ASSET_SIGNER) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        changePreissuedSigner.toXdr(stream)
      }
    }
  }
  abstract class ManageAssetOpExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: ManageAssetOpExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum ManageAssetResultCode
//  {
//      // codes considered as "success" for the operation
//      SUCCESS = 0,                       // request was successfully created/updated/canceled
//  
//      // codes considered as "failure" for the operation
//  	REQUEST_NOT_FOUND = -1,           // failed to find asset request with such id
//  	ASSET_ALREADY_EXISTS = -3,			   // asset with such code already exist
//      INVALID_MAX_ISSUANCE_AMOUNT = -4, // max issuance amount is 0
//  	INVALID_CODE = -5,                // asset code is invalid (empty or contains space)
//  	INVALID_POLICIES = -7,            // asset policies (has flag which does not belong to AssetPolicies enum)
//  	ASSET_NOT_FOUND = -8,             // asset does not exists
//  	REQUEST_ALREADY_EXISTS = -9,      // request for creation of unique entry already exists
//  	STATS_ASSET_ALREADY_EXISTS = -10, // statistics quote asset already exists
//  	INITIAL_PREISSUED_EXCEEDS_MAX_ISSUANCE = -11, // initial pre issued amount exceeds max issuance amount
//  	INVALID_DETAILS = -12 // details must be a valid json
//  };

//  ===========================================================================
public enum class ManageAssetResultCode(val value: Int): XdrEncodable {
  SUCCESS(0),
  REQUEST_NOT_FOUND(-1),
  ASSET_ALREADY_EXISTS(-3),
  INVALID_MAX_ISSUANCE_AMOUNT(-4),
  INVALID_CODE(-5),
  INVALID_POLICIES(-7),
  ASSET_NOT_FOUND(-8),
  REQUEST_ALREADY_EXISTS(-9),
  STATS_ASSET_ALREADY_EXISTS(-10),
  INITIAL_PREISSUED_EXCEEDS_MAX_ISSUANCE(-11),
  INVALID_DETAILS(-12),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct ManageAssetSuccess
//  {
//  	uint64 requestID;
//  	bool fulfilled;
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class ManageAssetSuccess(
    var requestID: Uint64,
    var fulfilled: Boolean,
    var ext: ManageAssetSuccessExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    requestID.toXdr(stream)
    fulfilled.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class ManageAssetSuccessExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: ManageAssetSuccessExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  union ManageAssetResult switch (ManageAssetResultCode code)
//  {
//  case SUCCESS:
//      ManageAssetSuccess success;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class ManageAssetResult(val discriminant: ManageAssetResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Success(var success: ManageAssetSuccess): ManageAssetResult(ManageAssetResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  enum ManageBalanceAction
//  {
//      CREATE = 0,
//      DELETE_BALANCE = 1,
//  	CREATE_UNIQUE = 2 // ensures that balance will not be created if one for such asset and account exists
//  };

//  ===========================================================================
public enum class ManageBalanceAction(val value: Int): XdrEncodable {
  CREATE(0),
  DELETE_BALANCE(1),
  CREATE_UNIQUE(2),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct ManageBalanceOp
//  {
//      ManageBalanceAction action;
//      AccountID destination;
//      AssetCode asset;
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class ManageBalanceOp(
    var action: ManageBalanceAction,
    var destination: AccountID,
    var asset: AssetCode,
    var ext: ManageBalanceOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    action.toXdr(stream)
    destination.toXdr(stream)
    asset.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class ManageBalanceOpExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: ManageBalanceOpExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum ManageBalanceResultCode
//  {
//      // codes considered as "success" for the operation
//      SUCCESS = 0,
//  
//      // codes considered as "failure" for the operation
//      MALFORMED = -1,       // invalid destination
//      NOT_FOUND = -2,
//      DESTINATION_NOT_FOUND = -3,
//      ASSET_NOT_FOUND = -4,
//      INVALID_ASSET = -5,
//  	BALANCE_ALREADY_EXISTS = -6,
//  	VERSION_IS_NOT_SUPPORTED_YET = -7 // version specified in request is not supported yet
//  };

//  ===========================================================================
public enum class ManageBalanceResultCode(val value: Int): XdrEncodable {
  SUCCESS(0),
  MALFORMED(-1),
  NOT_FOUND(-2),
  DESTINATION_NOT_FOUND(-3),
  ASSET_NOT_FOUND(-4),
  INVALID_ASSET(-5),
  BALANCE_ALREADY_EXISTS(-6),
  VERSION_IS_NOT_SUPPORTED_YET(-7),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct ManageBalanceSuccess {
//  	BalanceID balanceID;
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class ManageBalanceSuccess(
    var balanceID: BalanceID,
    var ext: ManageBalanceSuccessExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    balanceID.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class ManageBalanceSuccessExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: ManageBalanceSuccessExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  union ManageBalanceResult switch (ManageBalanceResultCode code)
//  {
//  case SUCCESS:
//      ManageBalanceSuccess success;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class ManageBalanceResult(val discriminant: ManageBalanceResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Success(var success: ManageBalanceSuccess): ManageBalanceResult(ManageBalanceResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  enum ManageExternalSystemAccountIdPoolEntryAction
//  {
//      CREATE = 0,
//      REMOVE = 1
//  };

//  ===========================================================================
public enum class ManageExternalSystemAccountIdPoolEntryAction(val value: Int): XdrEncodable {
  CREATE(0),
  REMOVE(1),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct CreateExternalSystemAccountIdPoolEntryActionInput
//  {
//      int32 externalSystemType;
//      longstring data;
//      uint64 parent;
//  
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class CreateExternalSystemAccountIdPoolEntryActionInput(
    var externalSystemType: Int32,
    var data: Longstring,
    var parent: Uint64,
    var ext: CreateExternalSystemAccountIdPoolEntryActionInputExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    externalSystemType.toXdr(stream)
    data.toXdr(stream)
    parent.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class CreateExternalSystemAccountIdPoolEntryActionInputExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: CreateExternalSystemAccountIdPoolEntryActionInputExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct DeleteExternalSystemAccountIdPoolEntryActionInput
//  {
//      uint64 poolEntryID;
//  
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class DeleteExternalSystemAccountIdPoolEntryActionInput(
    var poolEntryID: Uint64,
    var ext: DeleteExternalSystemAccountIdPoolEntryActionInputExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    poolEntryID.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class DeleteExternalSystemAccountIdPoolEntryActionInputExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: DeleteExternalSystemAccountIdPoolEntryActionInputExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct ManageExternalSystemAccountIdPoolEntryOp
//  {
//      union switch (ManageExternalSystemAccountIdPoolEntryAction action)
//      {
//      case CREATE:
//          CreateExternalSystemAccountIdPoolEntryActionInput createExternalSystemAccountIdPoolEntryActionInput;
//      case REMOVE:
//          DeleteExternalSystemAccountIdPoolEntryActionInput deleteExternalSystemAccountIdPoolEntryActionInput;
//      } actionInput;
//  
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class ManageExternalSystemAccountIdPoolEntryOp(
    var actionInput: ManageExternalSystemAccountIdPoolEntryOpActionInput,
    var ext: ManageExternalSystemAccountIdPoolEntryOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    actionInput.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class ManageExternalSystemAccountIdPoolEntryOpActionInput(val discriminant: ManageExternalSystemAccountIdPoolEntryAction): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class Create(var createExternalSystemAccountIdPoolEntryActionInput: CreateExternalSystemAccountIdPoolEntryActionInput): ManageExternalSystemAccountIdPoolEntryOpActionInput(ManageExternalSystemAccountIdPoolEntryAction.CREATE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        createExternalSystemAccountIdPoolEntryActionInput.toXdr(stream)
      }
    }

    open class Remove(var deleteExternalSystemAccountIdPoolEntryActionInput: DeleteExternalSystemAccountIdPoolEntryActionInput): ManageExternalSystemAccountIdPoolEntryOpActionInput(ManageExternalSystemAccountIdPoolEntryAction.REMOVE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        deleteExternalSystemAccountIdPoolEntryActionInput.toXdr(stream)
      }
    }
  }
  abstract class ManageExternalSystemAccountIdPoolEntryOpExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: ManageExternalSystemAccountIdPoolEntryOpExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum ManageExternalSystemAccountIdPoolEntryResultCode
//  {
//      // codes considered as "success" for the operation
//      SUCCESS = 0,
//  
//      // codes considered as "failure" for the operation
//      MALFORMED = -1,
//      ALREADY_EXISTS = -2,
//      AUTO_GENERATED_TYPE_NOT_ALLOWED = -3,
//      NOT_FOUND = -4
//  };

//  ===========================================================================
public enum class ManageExternalSystemAccountIdPoolEntryResultCode(val value: Int): XdrEncodable {
  SUCCESS(0),
  MALFORMED(-1),
  ALREADY_EXISTS(-2),
  AUTO_GENERATED_TYPE_NOT_ALLOWED(-3),
  NOT_FOUND(-4),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct ManageExternalSystemAccountIdPoolEntrySuccess {
//  	uint64 poolEntryID;
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class ManageExternalSystemAccountIdPoolEntrySuccess(
    var poolEntryID: Uint64,
    var ext: ManageExternalSystemAccountIdPoolEntrySuccessExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    poolEntryID.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class ManageExternalSystemAccountIdPoolEntrySuccessExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: ManageExternalSystemAccountIdPoolEntrySuccessExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  union ManageExternalSystemAccountIdPoolEntryResult switch (ManageExternalSystemAccountIdPoolEntryResultCode code)
//  {
//  case SUCCESS:
//      ManageExternalSystemAccountIdPoolEntrySuccess success;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class ManageExternalSystemAccountIdPoolEntryResult(val discriminant: ManageExternalSystemAccountIdPoolEntryResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Success(var success: ManageExternalSystemAccountIdPoolEntrySuccess): ManageExternalSystemAccountIdPoolEntryResult(ManageExternalSystemAccountIdPoolEntryResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  struct ManageInvoiceOp
//  {
//      BalanceID receiverBalance;
//  	AccountID sender;
//      int64 amount; // if set to 0, delete the invoice
//  
//      // 0=create a new invoice, otherwise edit an existing invoice
//      uint64 invoiceID;
//  
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class ManageInvoiceOp(
    var receiverBalance: BalanceID,
    var sender: AccountID,
    var amount: Int64,
    var invoiceID: Uint64,
    var ext: ManageInvoiceOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    receiverBalance.toXdr(stream)
    sender.toXdr(stream)
    amount.toXdr(stream)
    invoiceID.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class ManageInvoiceOpExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: ManageInvoiceOpExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum ManageInvoiceResultCode
//  {
//      // codes considered as "success" for the operation
//      SUCCESS = 0,
//  
//      // codes considered as "failure" for the operation
//      MALFORMED = -1,
//      BALANCE_NOT_FOUND = -2,
//  	INVOICE_OVERFLOW = -3,
//  
//      NOT_FOUND = -4,
//      TOO_MANY_INVOICES = -5,
//      CAN_NOT_DELETE_IN_PROGRESS = -6
//  };

//  ===========================================================================
public enum class ManageInvoiceResultCode(val value: Int): XdrEncodable {
  SUCCESS(0),
  MALFORMED(-1),
  BALANCE_NOT_FOUND(-2),
  INVOICE_OVERFLOW(-3),
  NOT_FOUND(-4),
  TOO_MANY_INVOICES(-5),
  CAN_NOT_DELETE_IN_PROGRESS(-6),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct ManageInvoiceSuccessResult 
//  {
//  	uint64 invoiceID;
//  	AssetCode asset;
//  	BalanceID senderBalance;
//  
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class ManageInvoiceSuccessResult(
    var invoiceID: Uint64,
    var asset: AssetCode,
    var senderBalance: BalanceID,
    var ext: ManageInvoiceSuccessResultExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    invoiceID.toXdr(stream)
    asset.toXdr(stream)
    senderBalance.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class ManageInvoiceSuccessResultExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: ManageInvoiceSuccessResultExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  union ManageInvoiceResult switch (ManageInvoiceResultCode code)
//  {
//  case SUCCESS:
//      ManageInvoiceSuccessResult success;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class ManageInvoiceResult(val discriminant: ManageInvoiceResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Success(var success: ManageInvoiceSuccessResult): ManageInvoiceResult(ManageInvoiceResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  enum ManageKVAction
//      {
//          PUT = 1,
//          REMOVE = 2
//      };

//  ===========================================================================
public enum class ManageKVAction(val value: Int): XdrEncodable {
  PUT(1),
  REMOVE(2),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct ManageKeyValueOp
//      {
//          string256 key;
//          union switch(ManageKVAction action)
//          {
//              case PUT:
//                  KeyValueEntry value;
//              case REMOVE:
//                  void;
//          }
//          action;
//  
//          // reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      };

//  ===========================================================================
open class ManageKeyValueOp(
    var key: String256,
    var action: ManageKeyValueOpAction,
    var ext: ManageKeyValueOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    key.toXdr(stream)
    action.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class ManageKeyValueOpAction(val discriminant: ManageKVAction): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class Put(var value: KeyValueEntry): ManageKeyValueOpAction(ManageKVAction.PUT) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        value.toXdr(stream)
      }
    }

    open class Remove: ManageKeyValueOpAction(ManageKVAction.REMOVE)
  }
  abstract class ManageKeyValueOpExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: ManageKeyValueOpExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct ManageKeyValueSuccess
//      {
//          // reserved for future use
//          union switch (LedgerVersion v)
//          {
//              case EMPTY_VERSION:
//                  void;
//          }
//          ext;
//      };

//  ===========================================================================
open class ManageKeyValueSuccess(
    var ext: ManageKeyValueSuccessExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    ext.toXdr(stream)
  }

  abstract class ManageKeyValueSuccessExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: ManageKeyValueSuccessExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum ManageKeyValueResultCode
//      {
//          SUCCESS = 1,
//          NOT_FOUND = -1,
//          INVALID_TYPE = -2
//      };

//  ===========================================================================
public enum class ManageKeyValueResultCode(val value: Int): XdrEncodable {
  SUCCESS(1),
  NOT_FOUND(-1),
  INVALID_TYPE(-2),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  union ManageKeyValueResult switch (ManageKeyValueResultCode code)
//      {
//          case SUCCESS:
//              ManageKeyValueSuccess success;
//          default:
//              void;
//      };

//  ===========================================================================
abstract class ManageKeyValueResult(val discriminant: ManageKeyValueResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Success(var success: ManageKeyValueSuccess): ManageKeyValueResult(ManageKeyValueResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  struct ManageOfferOp
//  {
//      BalanceID baseBalance; // balance for base asset
//  	BalanceID quoteBalance; // balance for quote asset
//  	bool isBuy;
//      int64 amount; // if set to 0, delete the offer
//      int64 price;  // price of base asset in terms of quote
//  
//      int64 fee;
//  
//      // 0=create a new offer, otherwise edit an existing offer
//      uint64 offerID;
//  	uint64 orderBookID;
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class ManageOfferOp(
    var baseBalance: BalanceID,
    var quoteBalance: BalanceID,
    var isBuy: Boolean,
    var amount: Int64,
    var price: Int64,
    var fee: Int64,
    var offerID: Uint64,
    var orderBookID: Uint64,
    var ext: ManageOfferOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    baseBalance.toXdr(stream)
    quoteBalance.toXdr(stream)
    isBuy.toXdr(stream)
    amount.toXdr(stream)
    price.toXdr(stream)
    fee.toXdr(stream)
    offerID.toXdr(stream)
    orderBookID.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class ManageOfferOpExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: ManageOfferOpExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum ManageOfferResultCode
//  {
//      // codes considered as "success" for the operation
//      SUCCESS = 0,
//  
//      // codes considered as "failure" for the operation
//      MALFORMED = -1,     // generated offer would be invalid
//      PAIR_NOT_TRADED = -2, // it's not allowed to trage with this pair
//      BALANCE_NOT_FOUND = -3,  // does not own balance for buying or selling
//      UNDERFUNDED = -4,    // doesn't hold what it's trying to sell
//      CROSS_SELF = -5,     // would cross an offer from the same user
//  	OFFER_OVERFLOW = -6,
//  	ASSET_PAIR_NOT_TRADABLE = -7,
//  	PHYSICAL_PRICE_RESTRICTION = -8, // offer price violates physical price restriction
//  	CURRENT_PRICE_RESTRICTION = -9,
//      NOT_FOUND = -10, // offerID does not match an existing offer
//      INVALID_PERCENT_FEE = -11,
//  	INSUFFICIENT_PRICE = -12,
//  	ORDER_BOOK_DOES_NOT_EXISTS = -13, // specified order book does not exists
//  	SALE_IS_NOT_STARTED_YET = -14, // sale is not started yet
//  	SALE_ALREADY_ENDED = -15, // sale has already ended
//  	ORDER_VIOLATES_HARD_CAP = -16, // currentcap + order will exceed hard cap
//  	CANT_PARTICIPATE_OWN_SALE = -17, // it's not allowed to participate in own sale
//  	ASSET_MISMATCHED = -18, // sale assets does not match assets for specified balances
//  	PRICE_DOES_NOT_MATCH = -19, // price does not match sale price
//  	PRICE_IS_INVALID = -20, // price must be positive
//  	UPDATE_IS_NOT_ALLOWED = -21, // update of the offer is not allowed
//  	INVALID_AMOUNT = -22, // amount must be positive 
//  	SALE_IS_NOT_ACTIVE = -23,
//  	REQUIRES_KYC = -24 // source must have KYC in order to participate
//  
//  };

//  ===========================================================================
public enum class ManageOfferResultCode(val value: Int): XdrEncodable {
  SUCCESS(0),
  MALFORMED(-1),
  PAIR_NOT_TRADED(-2),
  BALANCE_NOT_FOUND(-3),
  UNDERFUNDED(-4),
  CROSS_SELF(-5),
  OFFER_OVERFLOW(-6),
  ASSET_PAIR_NOT_TRADABLE(-7),
  PHYSICAL_PRICE_RESTRICTION(-8),
  CURRENT_PRICE_RESTRICTION(-9),
  NOT_FOUND(-10),
  INVALID_PERCENT_FEE(-11),
  INSUFFICIENT_PRICE(-12),
  ORDER_BOOK_DOES_NOT_EXISTS(-13),
  SALE_IS_NOT_STARTED_YET(-14),
  SALE_ALREADY_ENDED(-15),
  ORDER_VIOLATES_HARD_CAP(-16),
  CANT_PARTICIPATE_OWN_SALE(-17),
  ASSET_MISMATCHED(-18),
  PRICE_DOES_NOT_MATCH(-19),
  PRICE_IS_INVALID(-20),
  UPDATE_IS_NOT_ALLOWED(-21),
  INVALID_AMOUNT(-22),
  SALE_IS_NOT_ACTIVE(-23),
  REQUIRES_KYC(-24),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  enum ManageOfferEffect
//  {
//      CREATED = 0,
//      UPDATED = 1,
//      DELETED = 2
//  };

//  ===========================================================================
public enum class ManageOfferEffect(val value: Int): XdrEncodable {
  CREATED(0),
  UPDATED(1),
  DELETED(2),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct ClaimOfferAtom
//  {
//      // emitted to identify the offer
//      AccountID bAccountID; // Account that owns the offer
//      uint64 offerID;
//  	int64 baseAmount;
//  	int64 quoteAmount;
//  	int64 bFeePaid;
//  	int64 aFeePaid;
//  	BalanceID baseBalance;
//  	BalanceID quoteBalance;
//  
//  	int64 currentPrice;
//  
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class ClaimOfferAtom(
    var bAccountID: AccountID,
    var offerID: Uint64,
    var baseAmount: Int64,
    var quoteAmount: Int64,
    var bFeePaid: Int64,
    var aFeePaid: Int64,
    var baseBalance: BalanceID,
    var quoteBalance: BalanceID,
    var currentPrice: Int64,
    var ext: ClaimOfferAtomExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    bAccountID.toXdr(stream)
    offerID.toXdr(stream)
    baseAmount.toXdr(stream)
    quoteAmount.toXdr(stream)
    bFeePaid.toXdr(stream)
    aFeePaid.toXdr(stream)
    baseBalance.toXdr(stream)
    quoteBalance.toXdr(stream)
    currentPrice.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class ClaimOfferAtomExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: ClaimOfferAtomExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct ManageOfferSuccessResult
//  {
//  
//      // offers that got claimed while creating this offer
//      ClaimOfferAtom offersClaimed<>;
//  	AssetCode baseAsset;
//  	AssetCode quoteAsset;
//  
//      union switch (ManageOfferEffect effect)
//      {
//      case CREATED:
//      case UPDATED:
//          OfferEntry offer;
//      default:
//          void;
//      }
//      offer;
//  
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class ManageOfferSuccessResult(
    var offersClaimed: Array<ClaimOfferAtom>,
    var baseAsset: AssetCode,
    var quoteAsset: AssetCode,
    var offer: ManageOfferSuccessResultOffer,
    var ext: ManageOfferSuccessResultExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    offersClaimed.size.toXdr(stream)
    offersClaimed.forEach {
      it.toXdr(stream)
    }
    baseAsset.toXdr(stream)
    quoteAsset.toXdr(stream)
    offer.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class ManageOfferSuccessResultOffer(val discriminant: ManageOfferEffect): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class Created(var offer: OfferEntry): ManageOfferSuccessResultOffer(ManageOfferEffect.CREATED) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        offer.toXdr(stream)
      }
    }

    open class Updated(var offer: OfferEntry): ManageOfferSuccessResultOffer(ManageOfferEffect.UPDATED) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        offer.toXdr(stream)
      }
    }
  }
  abstract class ManageOfferSuccessResultExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: ManageOfferSuccessResultExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  union ManageOfferResult switch (ManageOfferResultCode code)
//  {
//  case SUCCESS:
//      ManageOfferSuccessResult success;
//  case PHYSICAL_PRICE_RESTRICTION:
//  	struct {
//  		int64 physicalPrice;
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//  	} physicalPriceRestriction;
//  case CURRENT_PRICE_RESTRICTION:
//  	struct {
//  		int64 currentPrice;
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//  	} currentPriceRestriction;
//  
//  default:
//      void;
//  };

//  ===========================================================================
abstract class ManageOfferResult(val discriminant: ManageOfferResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Success(var success: ManageOfferSuccessResult): ManageOfferResult(ManageOfferResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }
  }

  open class PhysicalPriceRestriction(var physicalPriceRestriction: ManageOfferResultPhysicalPriceRestriction): ManageOfferResult(ManageOfferResultCode.PHYSICAL_PRICE_RESTRICTION) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      physicalPriceRestriction.toXdr(stream)
    }
  }

  open class CurrentPriceRestriction(var currentPriceRestriction: ManageOfferResultCurrentPriceRestriction): ManageOfferResult(ManageOfferResultCode.CURRENT_PRICE_RESTRICTION) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      currentPriceRestriction.toXdr(stream)
    }
  }

  open class ManageOfferResultPhysicalPriceRestriction(
      var physicalPrice: Int64,
      var ext: ManageOfferResultPhysicalPriceRestrictionExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      physicalPrice.toXdr(stream)
      ext.toXdr(stream)
    }

    abstract class ManageOfferResultPhysicalPriceRestrictionExt(val discriminant: LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      open class EmptyVersion: ManageOfferResultPhysicalPriceRestrictionExt(LedgerVersion.EMPTY_VERSION)
    }
  }
  open class ManageOfferResultCurrentPriceRestriction(
      var currentPrice: Int64,
      var ext: ManageOfferResultCurrentPriceRestrictionExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      currentPrice.toXdr(stream)
      ext.toXdr(stream)
    }

    abstract class ManageOfferResultCurrentPriceRestrictionExt(val discriminant: LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      open class EmptyVersion: ManageOfferResultCurrentPriceRestrictionExt(LedgerVersion.EMPTY_VERSION)
    }
  }
}

// === xdr source ============================================================

//  enum ManageSaleAction
//  {
//      CREATE_UPDATE_DETAILS_REQUEST = 1
//  };

//  ===========================================================================
public enum class ManageSaleAction(val value: Int): XdrEncodable {
  CREATE_UPDATE_DETAILS_REQUEST(1),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct UpdateSaleDetailsData {
//      uint64 requestID; // if requestID is 0 - create request, else - update
//      longstring newDetails;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
open class UpdateSaleDetailsData(
    var requestID: Uint64,
    var newDetails: Longstring,
    var ext: UpdateSaleDetailsDataExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    requestID.toXdr(stream)
    newDetails.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class UpdateSaleDetailsDataExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: UpdateSaleDetailsDataExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct ManageSaleOp
//  {
//      uint64 saleID;
//  
//      union switch (ManageSaleAction action) {
//      case CREATE_UPDATE_DETAILS_REQUEST:
//          UpdateSaleDetailsData updateSaleDetailsData;
//      } data;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
open class ManageSaleOp(
    var saleID: Uint64,
    var data: ManageSaleOpData,
    var ext: ManageSaleOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    saleID.toXdr(stream)
    data.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class ManageSaleOpData(val discriminant: ManageSaleAction): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class CreateUpdateDetailsRequest(var updateSaleDetailsData: UpdateSaleDetailsData): ManageSaleOpData(ManageSaleAction.CREATE_UPDATE_DETAILS_REQUEST) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        updateSaleDetailsData.toXdr(stream)
      }
    }
  }
  abstract class ManageSaleOpExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: ManageSaleOpExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum ManageSaleResultCode
//  {
//      SUCCESS = 0,
//  
//      SALE_NOT_FOUND = -1, // sale not found
//      INVALID_NEW_DETAILS = -2, // newDetails field is invalid JSON
//      UPDATE_DETAILS_REQUEST_ALREADY_EXISTS = -3,
//      UPDATE_DETAILS_REQUEST_NOT_FOUND = -4
//  };

//  ===========================================================================
public enum class ManageSaleResultCode(val value: Int): XdrEncodable {
  SUCCESS(0),
  SALE_NOT_FOUND(-1),
  INVALID_NEW_DETAILS(-2),
  UPDATE_DETAILS_REQUEST_ALREADY_EXISTS(-3),
  UPDATE_DETAILS_REQUEST_NOT_FOUND(-4),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct ManageSaleResultSuccess
//  {
//      union switch (ManageSaleAction action) {
//      case CREATE_UPDATE_DETAILS_REQUEST:
//          uint64 requestID;
//      } response;
//  
//      //reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class ManageSaleResultSuccess(
    var response: ManageSaleResultSuccessResponse,
    var ext: ManageSaleResultSuccessExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    response.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class ManageSaleResultSuccessResponse(val discriminant: ManageSaleAction): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class CreateUpdateDetailsRequest(var requestID: Uint64): ManageSaleResultSuccessResponse(ManageSaleAction.CREATE_UPDATE_DETAILS_REQUEST) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        requestID.toXdr(stream)
      }
    }
  }
  abstract class ManageSaleResultSuccessExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: ManageSaleResultSuccessExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  union ManageSaleResult switch (ManageSaleResultCode code)
//  {
//  case SUCCESS:
//      ManageSaleResultSuccess success;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class ManageSaleResult(val discriminant: ManageSaleResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Success(var success: ManageSaleResultSuccess): ManageSaleResult(ManageSaleResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  struct FeeDataV2 {
//      uint64 maxPaymentFee;
//      uint64 fixedFee;
//  
//      // Cross asset fees
//      AssetCode feeAsset;
//  
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class FeeDataV2(
    var maxPaymentFee: Uint64,
    var fixedFee: Uint64,
    var feeAsset: AssetCode,
    var ext: FeeDataV2Ext
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    maxPaymentFee.toXdr(stream)
    fixedFee.toXdr(stream)
    feeAsset.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class FeeDataV2Ext(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: FeeDataV2Ext(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct PaymentFeeDataV2 {
//      FeeDataV2 sourceFee;
//      FeeDataV2 destinationFee;
//      bool sourcePaysForDest; // if true - source account pays fee, else destination
//  
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class PaymentFeeDataV2(
    var sourceFee: FeeDataV2,
    var destinationFee: FeeDataV2,
    var sourcePaysForDest: Boolean,
    var ext: PaymentFeeDataV2Ext
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    sourceFee.toXdr(stream)
    destinationFee.toXdr(stream)
    sourcePaysForDest.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class PaymentFeeDataV2Ext(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: PaymentFeeDataV2Ext(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum PaymentDestinationType {
//      ACCOUNT = 0,
//      BALANCE = 1
//  };

//  ===========================================================================
public enum class PaymentDestinationType(val value: Int): XdrEncodable {
  ACCOUNT(0),
  BALANCE(1),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct PaymentOpV2
//  {
//      BalanceID sourceBalanceID;
//  
//      union switch (PaymentDestinationType type) {
//          case ACCOUNT:
//              AccountID accountID;
//          case BALANCE:
//              BalanceID balanceID;
//      } destination;
//  
//      uint64 amount;
//  
//      PaymentFeeDataV2 feeData;
//  
//      longstring subject;
//      longstring reference;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class PaymentOpV2(
    var sourceBalanceID: BalanceID,
    var destination: PaymentOpV2Destination,
    var amount: Uint64,
    var feeData: PaymentFeeDataV2,
    var subject: Longstring,
    var reference: Longstring,
    var ext: PaymentOpV2Ext
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    sourceBalanceID.toXdr(stream)
    destination.toXdr(stream)
    amount.toXdr(stream)
    feeData.toXdr(stream)
    subject.toXdr(stream)
    reference.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class PaymentOpV2Destination(val discriminant: PaymentDestinationType): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class Account(var accountID: AccountID): PaymentOpV2Destination(PaymentDestinationType.ACCOUNT) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        accountID.toXdr(stream)
      }
    }

    open class Balance(var balanceID: BalanceID): PaymentOpV2Destination(PaymentDestinationType.BALANCE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        balanceID.toXdr(stream)
      }
    }
  }
  abstract class PaymentOpV2Ext(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: PaymentOpV2Ext(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum PaymentV2ResultCode
//  {
//      // codes considered as "success" for the operation
//      SUCCESS = 0, // payment successfully completed
//  
//      // codes considered as "failure" for the operation
//      MALFORMED = -1, // bad input
//      UNDERFUNDED = -2, // not enough funds in source account
//      LINE_FULL = -3, // destination would go above their limit
//  	DESTINATION_BALANCE_NOT_FOUND = -4,
//      BALANCE_ASSETS_MISMATCHED = -5,
//  	SRC_BALANCE_NOT_FOUND = -6, // source balance not found
//      REFERENCE_DUPLICATION = -7,
//      STATS_OVERFLOW = -8,
//      LIMITS_EXCEEDED = -9,
//      NOT_ALLOWED_BY_ASSET_POLICY = -10,
//      INVALID_DESTINATION_FEE = -11,
//      INVALID_DESTINATION_FEE_ASSET = -12, // destination fee asset must be the same as source balance asset
//      FEE_ASSET_MISMATCHED = -13,
//      INSUFFICIENT_FEE_AMOUNT = -14,
//      BALANCE_TO_CHARGE_FEE_FROM_NOT_FOUND = -15,
//      PAYMENT_AMOUNT_IS_LESS_THAN_DEST_FEE = -16
//  };

//  ===========================================================================
public enum class PaymentV2ResultCode(val value: Int): XdrEncodable {
  SUCCESS(0),
  MALFORMED(-1),
  UNDERFUNDED(-2),
  LINE_FULL(-3),
  DESTINATION_BALANCE_NOT_FOUND(-4),
  BALANCE_ASSETS_MISMATCHED(-5),
  SRC_BALANCE_NOT_FOUND(-6),
  REFERENCE_DUPLICATION(-7),
  STATS_OVERFLOW(-8),
  LIMITS_EXCEEDED(-9),
  NOT_ALLOWED_BY_ASSET_POLICY(-10),
  INVALID_DESTINATION_FEE(-11),
  INVALID_DESTINATION_FEE_ASSET(-12),
  FEE_ASSET_MISMATCHED(-13),
  INSUFFICIENT_FEE_AMOUNT(-14),
  BALANCE_TO_CHARGE_FEE_FROM_NOT_FOUND(-15),
  PAYMENT_AMOUNT_IS_LESS_THAN_DEST_FEE(-16),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct PaymentV2Response {
//      AccountID destination;
//      BalanceID destinationBalanceID;
//  
//      AssetCode asset;
//      uint64 sourceSentUniversal;
//      uint64 paymentID;
//  
//      uint64 actualSourcePaymentFee;
//      uint64 actualDestinationPaymentFee;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class PaymentV2Response(
    var destination: AccountID,
    var destinationBalanceID: BalanceID,
    var asset: AssetCode,
    var sourceSentUniversal: Uint64,
    var paymentID: Uint64,
    var actualSourcePaymentFee: Uint64,
    var actualDestinationPaymentFee: Uint64,
    var ext: PaymentV2ResponseExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    destination.toXdr(stream)
    destinationBalanceID.toXdr(stream)
    asset.toXdr(stream)
    sourceSentUniversal.toXdr(stream)
    paymentID.toXdr(stream)
    actualSourcePaymentFee.toXdr(stream)
    actualDestinationPaymentFee.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class PaymentV2ResponseExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: PaymentV2ResponseExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  union PaymentV2Result switch (PaymentV2ResultCode code)
//  {
//  case SUCCESS:
//      PaymentV2Response paymentV2Response;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class PaymentV2Result(val discriminant: PaymentV2ResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Success(var paymentV2Response: PaymentV2Response): PaymentV2Result(PaymentV2ResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      paymentV2Response.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  struct InvoiceReference {
//      uint64 invoiceID;
//      bool accept;
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class InvoiceReference(
    var invoiceID: Uint64,
    var accept: Boolean,
    var ext: InvoiceReferenceExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    invoiceID.toXdr(stream)
    accept.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class InvoiceReferenceExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: InvoiceReferenceExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct FeeData {
//      int64 paymentFee;
//      int64 fixedFee;
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class FeeData(
    var paymentFee: Int64,
    var fixedFee: Int64,
    var ext: FeeDataExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    paymentFee.toXdr(stream)
    fixedFee.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class FeeDataExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: FeeDataExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct PaymentFeeData {
//      FeeData sourceFee;
//      FeeData destinationFee;
//      bool sourcePaysForDest;    // if true source account pays fee, else destination
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class PaymentFeeData(
    var sourceFee: FeeData,
    var destinationFee: FeeData,
    var sourcePaysForDest: Boolean,
    var ext: PaymentFeeDataExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    sourceFee.toXdr(stream)
    destinationFee.toXdr(stream)
    sourcePaysForDest.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class PaymentFeeDataExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: PaymentFeeDataExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct PaymentOp
//  {
//      BalanceID sourceBalanceID;
//      BalanceID destinationBalanceID;
//      int64 amount;          // amount they end up with
//  
//      PaymentFeeData feeData;
//  
//      string256 subject;
//      string64 reference;
//      
//      InvoiceReference* invoiceReference;
//  
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class PaymentOp(
    var sourceBalanceID: BalanceID,
    var destinationBalanceID: BalanceID,
    var amount: Int64,
    var feeData: PaymentFeeData,
    var subject: String256,
    var reference: String64,
    var invoiceReference: InvoiceReference?,
    var ext: PaymentOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    sourceBalanceID.toXdr(stream)
    destinationBalanceID.toXdr(stream)
    amount.toXdr(stream)
    feeData.toXdr(stream)
    subject.toXdr(stream)
    reference.toXdr(stream)
    if (invoiceReference != null) {
      true.toXdr(stream)
      invoiceReference?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    ext.toXdr(stream)
  }

  abstract class PaymentOpExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: PaymentOpExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum PaymentResultCode
//  {
//      // codes considered as "success" for the operation
//      SUCCESS = 0, // payment successfuly completed
//  
//      // codes considered as "failure" for the operation
//      MALFORMED = -1,       // bad input
//      UNDERFUNDED = -2,     // not enough funds in source account
//      LINE_FULL = -3,       // destination would go above their limit
//  	FEE_MISMATCHED = -4,   // fee is not equal to expected fee
//      BALANCE_NOT_FOUND = -5, // destination balance not found
//      BALANCE_ACCOUNT_MISMATCHED = -6,
//      BALANCE_ASSETS_MISMATCHED = -7,
//  	SRC_BALANCE_NOT_FOUND = -8, // source balance not found
//      REFERENCE_DUPLICATION = -9,
//      STATS_OVERFLOW = -10,
//      LIMITS_EXCEEDED = -11,
//      NOT_ALLOWED_BY_ASSET_POLICY = -12,
//      INVOICE_NOT_FOUND = -13,
//      INVOICE_WRONG_AMOUNT = -14,
//      INVOICE_BALANCE_MISMATCH = -15,
//      INVOICE_ACCOUNT_MISMATCH = -16,
//      INVOICE_ALREADY_PAID = -17
//  };

//  ===========================================================================
public enum class PaymentResultCode(val value: Int): XdrEncodable {
  SUCCESS(0),
  MALFORMED(-1),
  UNDERFUNDED(-2),
  LINE_FULL(-3),
  FEE_MISMATCHED(-4),
  BALANCE_NOT_FOUND(-5),
  BALANCE_ACCOUNT_MISMATCHED(-6),
  BALANCE_ASSETS_MISMATCHED(-7),
  SRC_BALANCE_NOT_FOUND(-8),
  REFERENCE_DUPLICATION(-9),
  STATS_OVERFLOW(-10),
  LIMITS_EXCEEDED(-11),
  NOT_ALLOWED_BY_ASSET_POLICY(-12),
  INVOICE_NOT_FOUND(-13),
  INVOICE_WRONG_AMOUNT(-14),
  INVOICE_BALANCE_MISMATCH(-15),
  INVOICE_ACCOUNT_MISMATCH(-16),
  INVOICE_ALREADY_PAID(-17),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct PaymentResponse {
//      AccountID destination;
//      uint64 paymentID;
//      AssetCode asset;
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class PaymentResponse(
    var destination: AccountID,
    var paymentID: Uint64,
    var asset: AssetCode,
    var ext: PaymentResponseExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    destination.toXdr(stream)
    paymentID.toXdr(stream)
    asset.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class PaymentResponseExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: PaymentResponseExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  union PaymentResult switch (PaymentResultCode code)
//  {
//  case SUCCESS:
//      PaymentResponse paymentResponse;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class PaymentResult(val discriminant: PaymentResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Success(var paymentResponse: PaymentResponse): PaymentResult(PaymentResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      paymentResponse.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  struct ReviewPaymentRequestOp
//  {
//      uint64 paymentID;
//  
//  	bool accept;
//      longstring* rejectReason;
//  	// reserved for future use
//  	union switch (LedgerVersion v)
//  	{
//  	case EMPTY_VERSION:
//  		void;
//  	}
//  	ext;
//  };

//  ===========================================================================
open class ReviewPaymentRequestOp(
    var paymentID: Uint64,
    var accept: Boolean,
    var rejectReason: Longstring?,
    var ext: ReviewPaymentRequestOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    paymentID.toXdr(stream)
    accept.toXdr(stream)
    if (rejectReason != null) {
      true.toXdr(stream)
      rejectReason?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    ext.toXdr(stream)
  }

  abstract class ReviewPaymentRequestOpExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: ReviewPaymentRequestOpExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum ReviewPaymentRequestResultCode
//  {
//      // codes considered as "success" for the operation
//      SUCCESS = 0,
//  
//      // codes considered as "failure" for the operation
//  	NOT_FOUND = -1,           // failed to find Recovery request with such ID
//      LINE_FULL = -2
//  };

//  ===========================================================================
public enum class ReviewPaymentRequestResultCode(val value: Int): XdrEncodable {
  SUCCESS(0),
  NOT_FOUND(-1),
  LINE_FULL(-2),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  enum PaymentState
//  {
//      PENDING = 0,
//      PROCESSED = 1,
//      REJECTED = 2
//  };

//  ===========================================================================
public enum class PaymentState(val value: Int): XdrEncodable {
  PENDING(0),
  PROCESSED(1),
  REJECTED(2),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct ReviewPaymentResponse {
//      PaymentState state;
//      
//      uint64* relatedInvoiceID;
//  	// reserved for future use
//  	union switch (LedgerVersion v)
//  	{
//  	case EMPTY_VERSION:
//  		void;
//  	}
//  	ext;
//  };

//  ===========================================================================
open class ReviewPaymentResponse(
    var state: PaymentState,
    var relatedInvoiceID: Uint64?,
    var ext: ReviewPaymentResponseExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    state.toXdr(stream)
    if (relatedInvoiceID != null) {
      true.toXdr(stream)
      relatedInvoiceID?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    ext.toXdr(stream)
  }

  abstract class ReviewPaymentResponseExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: ReviewPaymentResponseExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  union ReviewPaymentRequestResult switch (ReviewPaymentRequestResultCode code)
//  {
//  case SUCCESS:
//      ReviewPaymentResponse reviewPaymentResponse;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class ReviewPaymentRequestResult(val discriminant: ReviewPaymentRequestResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Success(var reviewPaymentResponse: ReviewPaymentResponse): ReviewPaymentRequestResult(ReviewPaymentRequestResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      reviewPaymentResponse.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  enum ReviewRequestOpAction {
//  	APPROVE = 1,
//  	REJECT = 2,
//  	PERMANENT_REJECT = 3
//  };

//  ===========================================================================
public enum class ReviewRequestOpAction(val value: Int): XdrEncodable {
  APPROVE(1),
  REJECT(2),
  PERMANENT_REJECT(3),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct LimitsUpdateDetails {
//      Limits newLimits;
//      union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//  };

//  ===========================================================================
open class LimitsUpdateDetails(
    var newLimits: Limits,
    var ext: LimitsUpdateDetailsExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    newLimits.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class LimitsUpdateDetailsExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: LimitsUpdateDetailsExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct WithdrawalDetails {
//  	string externalDetails<>;
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class WithdrawalDetails(
    var externalDetails: String,
    var ext: WithdrawalDetailsExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    externalDetails.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class WithdrawalDetailsExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: WithdrawalDetailsExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct AMLAlertDetails {
//  	string comment<>;
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class AMLAlertDetails(
    var comment: String,
    var ext: AMLAlertDetailsExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    comment.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class AMLAlertDetailsExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: AMLAlertDetailsExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct UpdateKYCDetails {
//      uint32 tasksToAdd;
//      uint32 tasksToRemove;
//      string externalDetails<>;
//      // Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class UpdateKYCDetails(
    var tasksToAdd: Uint32,
    var tasksToRemove: Uint32,
    var externalDetails: String,
    var ext: UpdateKYCDetailsExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    tasksToAdd.toXdr(stream)
    tasksToRemove.toXdr(stream)
    externalDetails.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class UpdateKYCDetailsExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: UpdateKYCDetailsExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct ReviewRequestOp
//  {
//  	uint64 requestID;
//  	Hash requestHash;
//  	union switch(ReviewableRequestType requestType) {
//  	case WITHDRAW:
//  		WithdrawalDetails withdrawal;
//      case LIMITS_UPDATE:
//          LimitsUpdateDetails limitsUpdate;
//  	case TWO_STEP_WITHDRAWAL:
//  		WithdrawalDetails twoStepWithdrawal;
//      case AML_ALERT:
//          AMLAlertDetails amlAlertDetails;
//      case UPDATE_KYC:
//          UpdateKYCDetails updateKYC;
//  	default:
//  		void;
//  	} requestDetails;
//  	ReviewRequestOpAction action;
//  	longstring reason;
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class ReviewRequestOp(
    var requestID: Uint64,
    var requestHash: Hash,
    var requestDetails: ReviewRequestOpRequestDetails,
    var action: ReviewRequestOpAction,
    var reason: Longstring,
    var ext: ReviewRequestOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    requestID.toXdr(stream)
    requestHash.toXdr(stream)
    requestDetails.toXdr(stream)
    action.toXdr(stream)
    reason.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class ReviewRequestOpRequestDetails(val discriminant: ReviewableRequestType): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class Withdraw(var withdrawal: WithdrawalDetails): ReviewRequestOpRequestDetails(ReviewableRequestType.WITHDRAW) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        withdrawal.toXdr(stream)
      }
    }

    open class LimitsUpdate(var limitsUpdate: LimitsUpdateDetails): ReviewRequestOpRequestDetails(ReviewableRequestType.LIMITS_UPDATE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        limitsUpdate.toXdr(stream)
      }
    }

    open class TwoStepWithdrawal(var twoStepWithdrawal: WithdrawalDetails): ReviewRequestOpRequestDetails(ReviewableRequestType.TWO_STEP_WITHDRAWAL) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        twoStepWithdrawal.toXdr(stream)
      }
    }

    open class AmlAlert(var amlAlertDetails: AMLAlertDetails): ReviewRequestOpRequestDetails(ReviewableRequestType.AML_ALERT) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        amlAlertDetails.toXdr(stream)
      }
    }

    open class UpdateKyc(var updateKYC: UpdateKYCDetails): ReviewRequestOpRequestDetails(ReviewableRequestType.UPDATE_KYC) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        updateKYC.toXdr(stream)
      }
    }
  }
  abstract class ReviewRequestOpExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: ReviewRequestOpExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum ReviewRequestResultCode
//  {
//      // Codes considered as "success" for the operation
//      SUCCESS = 0,
//  
//      // Codes considered as "failure" for the operation
//      INVALID_REASON = -1,        // reason must be empty if approving and not empty if rejecting
//  	INVALID_ACTION = -2,
//  	HASH_MISMATCHED = -3,
//  	NOT_FOUND = -4,
//  	TYPE_MISMATCHED = -5,
//  	REJECT_NOT_ALLOWED = -6, // reject not allowed, use permanent reject
//  	INVALID_EXTERNAL_DETAILS = -7,
//  	REQUESTOR_IS_BLOCKED = -8,
//  	PERMANENT_REJECT_NOT_ALLOWED = -9, // permanent reject not allowed, use reject
//  
//  	// Asset requests
//  	ASSET_ALREADY_EXISTS = -20,
//  	ASSET_DOES_NOT_EXISTS = -21,
//  
//  	// Issuance requests
//  	MAX_ISSUANCE_AMOUNT_EXCEEDED = -40,
//  	INSUFFICIENT_AVAILABLE_FOR_ISSUANCE_AMOUNT = -41,
//  	FULL_LINE = -42, // can't fund balance - total funds exceed UINT64_MAX
//  
//  	// Sale creation requests
//  	BASE_ASSET_DOES_NOT_EXISTS = -50,
//  	HARD_CAP_WILL_EXCEED_MAX_ISSUANCE = -51,
//  	INSUFFICIENT_PREISSUED_FOR_HARD_CAP = -52,
//  
//  	// Update KYC requests
//  	NON_ZERO_TASKS_TO_REMOVE_NOT_ALLOWED = -60,
//  
//  	// Update sale details requests
//  	SALE_NOT_FOUND = -70
//  };

//  ===========================================================================
public enum class ReviewRequestResultCode(val value: Int): XdrEncodable {
  SUCCESS(0),
  INVALID_REASON(-1),
  INVALID_ACTION(-2),
  HASH_MISMATCHED(-3),
  NOT_FOUND(-4),
  TYPE_MISMATCHED(-5),
  REJECT_NOT_ALLOWED(-6),
  INVALID_EXTERNAL_DETAILS(-7),
  REQUESTOR_IS_BLOCKED(-8),
  PERMANENT_REJECT_NOT_ALLOWED(-9),
  ASSET_ALREADY_EXISTS(-20),
  ASSET_DOES_NOT_EXISTS(-21),
  MAX_ISSUANCE_AMOUNT_EXCEEDED(-40),
  INSUFFICIENT_AVAILABLE_FOR_ISSUANCE_AMOUNT(-41),
  FULL_LINE(-42),
  BASE_ASSET_DOES_NOT_EXISTS(-50),
  HARD_CAP_WILL_EXCEED_MAX_ISSUANCE(-51),
  INSUFFICIENT_PREISSUED_FOR_HARD_CAP(-52),
  NON_ZERO_TASKS_TO_REMOVE_NOT_ALLOWED(-60),
  SALE_NOT_FOUND(-70),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  union ReviewRequestResult switch (ReviewRequestResultCode code)
//  {
//  case SUCCESS:
//  	struct {
//  		// reserved for future use
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//  	} success;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class ReviewRequestResult(val discriminant: ReviewRequestResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Success(var success: ReviewRequestResultSuccess): ReviewRequestResult(ReviewRequestResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }
  }

  open class ReviewRequestResultSuccess(
      var ext: ReviewRequestResultSuccessExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      ext.toXdr(stream)
    }

    abstract class ReviewRequestResultSuccessExt(val discriminant: LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      open class EmptyVersion: ReviewRequestResultSuccessExt(LedgerVersion.EMPTY_VERSION)
    }
  }
}

// === xdr source ============================================================

//  struct SetFeesOp
//      {
//          FeeEntry* fee;
//  		bool isDelete;
//  		// reserved for future use
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//      };

//  ===========================================================================
open class SetFeesOp(
    var fee: FeeEntry?,
    var isDelete: Boolean,
    var ext: SetFeesOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    if (fee != null) {
      true.toXdr(stream)
      fee?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    isDelete.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class SetFeesOpExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: SetFeesOpExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum SetFeesResultCode
//      {
//          // codes considered as "success" for the operation
//          SUCCESS = 0,
//          
//          // codes considered as "failure" for the operation
//          INVALID_AMOUNT = -1,      // amount is negative
//  		INVALID_FEE_TYPE = -2,     // operation type is invalid
//          ASSET_NOT_FOUND = -3,
//          INVALID_ASSET = -4,
//          MALFORMED = -5,
//  		MALFORMED_RANGE = -6,
//  		RANGE_OVERLAP = -7,
//  		NOT_FOUND = -8,
//  		SUB_TYPE_NOT_EXIST = -9,
//  		INVALID_FEE_VERSION = -10, // version of fee entry is greater than ledger version
//  		INVALID_FEE_ASSET = -11,
//  		FEE_ASSET_NOT_ALLOWED = -12, // feeAsset can be set only if feeType is PAYMENT
//  		CROSS_ASSET_FEE_NOT_ALLOWED = -13, // feeAsset on payment fee type can differ from asset only if payment fee subtype is OUTGOING
//  		FEE_ASSET_NOT_FOUND = -14,
//  		ASSET_PAIR_NOT_FOUND = -15, // cannot create cross asset fee entry without existing asset pair
//  		INVALID_ASSET_PAIR_PRICE = -16
//      };

//  ===========================================================================
public enum class SetFeesResultCode(val value: Int): XdrEncodable {
  SUCCESS(0),
  INVALID_AMOUNT(-1),
  INVALID_FEE_TYPE(-2),
  ASSET_NOT_FOUND(-3),
  INVALID_ASSET(-4),
  MALFORMED(-5),
  MALFORMED_RANGE(-6),
  RANGE_OVERLAP(-7),
  NOT_FOUND(-8),
  SUB_TYPE_NOT_EXIST(-9),
  INVALID_FEE_VERSION(-10),
  INVALID_FEE_ASSET(-11),
  FEE_ASSET_NOT_ALLOWED(-12),
  CROSS_ASSET_FEE_NOT_ALLOWED(-13),
  FEE_ASSET_NOT_FOUND(-14),
  ASSET_PAIR_NOT_FOUND(-15),
  INVALID_ASSET_PAIR_PRICE(-16),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  union SetFeesResult switch (SetFeesResultCode code)
//      {
//          case SUCCESS:
//              struct {
//  				// reserved for future use
//  				union switch (LedgerVersion v)
//  				{
//  				case EMPTY_VERSION:
//  					void;
//  				}
//  				ext;
//  			} success;
//          default:
//              void;
//      };

//  ===========================================================================
abstract class SetFeesResult(val discriminant: SetFeesResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Success(var success: SetFeesResultSuccess): SetFeesResult(SetFeesResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }
  }

  open class SetFeesResultSuccess(
      var ext: SetFeesResultSuccessExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      ext.toXdr(stream)
    }

    abstract class SetFeesResultSuccessExt(val discriminant: LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      open class EmptyVersion: SetFeesResultSuccessExt(LedgerVersion.EMPTY_VERSION)
    }
  }
}

// === xdr source ============================================================

//  struct SetLimitsOp
//  {
//      AccountID* account;
//      AccountType* accountType;
//  
//      Limits limits;
//  	// reserved for future use
//  	union switch (LedgerVersion v)
//  	{
//  	case EMPTY_VERSION:
//  		void;
//  	}
//  	ext;
//  };

//  ===========================================================================
open class SetLimitsOp(
    var account: AccountID?,
    var accountType: AccountType?,
    var limits: Limits,
    var ext: SetLimitsOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    if (account != null) {
      true.toXdr(stream)
      account?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    if (accountType != null) {
      true.toXdr(stream)
      accountType?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    limits.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class SetLimitsOpExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: SetLimitsOpExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum SetLimitsResultCode
//  {
//      // codes considered as "success" for the operation
//      SUCCESS = 0,
//      // codes considered as "failure" for the operation
//      MALFORMED = -1
//  };

//  ===========================================================================
public enum class SetLimitsResultCode(val value: Int): XdrEncodable {
  SUCCESS(0),
  MALFORMED(-1),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  union SetLimitsResult switch (SetLimitsResultCode code)
//  {
//  case SUCCESS:
//      struct {
//  		// reserved for future use
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//  	} success;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class SetLimitsResult(val discriminant: SetLimitsResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Success(var success: SetLimitsResultSuccess): SetLimitsResult(SetLimitsResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }
  }

  open class SetLimitsResultSuccess(
      var ext: SetLimitsResultSuccessExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      ext.toXdr(stream)
    }

    abstract class SetLimitsResultSuccessExt(val discriminant: LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      open class EmptyVersion: SetLimitsResultSuccessExt(LedgerVersion.EMPTY_VERSION)
    }
  }
}

// === xdr source ============================================================

//  enum ManageTrustAction
//  {
//      TRUST_ADD = 0,
//      TRUST_REMOVE = 1
//  };

//  ===========================================================================
public enum class ManageTrustAction(val value: Int): XdrEncodable {
  TRUST_ADD(0),
  TRUST_REMOVE(1),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct TrustData {
//      TrustEntry trust;
//      ManageTrustAction action;
//  	// reserved for future use
//  	union switch (LedgerVersion v)
//  	{
//  	case EMPTY_VERSION:
//  		void;
//  	}
//  	ext;
//  };

//  ===========================================================================
open class TrustData(
    var trust: TrustEntry,
    var action: ManageTrustAction,
    var ext: TrustDataExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    trust.toXdr(stream)
    action.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class TrustDataExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: TrustDataExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct LimitsUpdateRequestData {
//      Hash documentHash;
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class LimitsUpdateRequestData(
    var documentHash: Hash,
    var ext: LimitsUpdateRequestDataExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    documentHash.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class LimitsUpdateRequestDataExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: LimitsUpdateRequestDataExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct SetOptionsOp
//  {
//      // account threshold manipulation
//      uint32* masterWeight; // weight of the master account
//      uint32* lowThreshold;
//      uint32* medThreshold;
//      uint32* highThreshold;
//  
//      // Add, update or remove a signer for the account
//      // signer is deleted if the weight is 0
//      Signer* signer;
//  
//      TrustData* trustData;
//  
//      // Create LimitsUpdateRequest for account
//      LimitsUpdateRequestData* limitsUpdateRequestData;
//  
//  	// reserved for future use
//  	union switch (LedgerVersion v)
//  	{
//  	case EMPTY_VERSION:
//  		void;
//  	}
//  	ext;
//      
//  };

//  ===========================================================================
open class SetOptionsOp(
    var masterWeight: Uint32?,
    var lowThreshold: Uint32?,
    var medThreshold: Uint32?,
    var highThreshold: Uint32?,
    var signer: Signer?,
    var trustData: TrustData?,
    var limitsUpdateRequestData: LimitsUpdateRequestData?,
    var ext: SetOptionsOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    if (masterWeight != null) {
      true.toXdr(stream)
      masterWeight?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    if (lowThreshold != null) {
      true.toXdr(stream)
      lowThreshold?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    if (medThreshold != null) {
      true.toXdr(stream)
      medThreshold?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    if (highThreshold != null) {
      true.toXdr(stream)
      highThreshold?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    if (signer != null) {
      true.toXdr(stream)
      signer?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    if (trustData != null) {
      true.toXdr(stream)
      trustData?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    if (limitsUpdateRequestData != null) {
      true.toXdr(stream)
      limitsUpdateRequestData?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    ext.toXdr(stream)
  }

  abstract class SetOptionsOpExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: SetOptionsOpExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum SetOptionsResultCode
//  {
//      // codes considered as "success" for the operation
//      SUCCESS = 0,
//      // codes considered as "failure" for the operation
//      TOO_MANY_SIGNERS = -1, // max number of signers already reached
//      THRESHOLD_OUT_OF_RANGE = -2, // bad value for weight/threshold
//      BAD_SIGNER = -3,             // signer cannot be masterkey
//      BALANCE_NOT_FOUND = -4,
//      TRUST_MALFORMED = -5,
//  	TRUST_TOO_MANY = -6,
//  	INVALID_SIGNER_VERSION = -7, // if signer version is higher than ledger version
//  	LIMITS_UPDATE_REQUEST_REFERENCE_DUPLICATION = -8
//  };

//  ===========================================================================
public enum class SetOptionsResultCode(val value: Int): XdrEncodable {
  SUCCESS(0),
  TOO_MANY_SIGNERS(-1),
  THRESHOLD_OUT_OF_RANGE(-2),
  BAD_SIGNER(-3),
  BALANCE_NOT_FOUND(-4),
  TRUST_MALFORMED(-5),
  TRUST_TOO_MANY(-6),
  INVALID_SIGNER_VERSION(-7),
  LIMITS_UPDATE_REQUEST_REFERENCE_DUPLICATION(-8),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  union SetOptionsResult switch (SetOptionsResultCode code)
//  {
//  case SUCCESS:
//      struct {
//          uint64 limitsUpdateRequestID;
//  		// reserved for future use
//  		union switch (LedgerVersion v)
//  		{
//  		case EMPTY_VERSION:
//  			void;
//  		}
//  		ext;
//  	} success;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class SetOptionsResult(val discriminant: SetOptionsResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Success(var success: SetOptionsResultSuccess): SetOptionsResult(SetOptionsResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }
  }

  open class SetOptionsResultSuccess(
      var limitsUpdateRequestID: Uint64,
      var ext: SetOptionsResultSuccessExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      limitsUpdateRequestID.toXdr(stream)
      ext.toXdr(stream)
    }

    abstract class SetOptionsResultSuccessExt(val discriminant: LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      open class EmptyVersion: SetOptionsResultSuccessExt(LedgerVersion.EMPTY_VERSION)
    }
  }
}

// === xdr source ============================================================

//  enum ErrorCode
//  {
//      MISC = 0, // Unspecific error
//      DATA = 1, // Malformed data
//      CONF = 2, // Misconfiguration error
//      AUTH = 3, // Authentication failure
//      LOAD = 4  // System overloaded
//  };

//  ===========================================================================
public enum class ErrorCode(val value: Int): XdrEncodable {
  MISC(0),
  DATA(1),
  CONF(2),
  AUTH(3),
  LOAD(4),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct Error
//  {
//      ErrorCode code;
//      string msg<100>;
//  };

//  ===========================================================================
open class Error(
    var code: ErrorCode,
    var msg: String
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    code.toXdr(stream)
    msg.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct AuthCert
//  {
//      Curve25519Public pubkey;
//      uint64 expiration;
//      Signature sig;
//  };

//  ===========================================================================
open class AuthCert(
    var pubkey: Curve25519Public,
    var expiration: Uint64,
    var sig: Signature
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    pubkey.toXdr(stream)
    expiration.toXdr(stream)
    sig.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct Hello
//  {
//      uint32 ledgerVersion;
//      uint32 overlayVersion;
//      uint32 overlayMinVersion;
//      Hash networkID;
//      string versionStr<100>;
//      int listeningPort;
//      NodeID peerID;
//      AuthCert cert;
//      uint256 nonce;
//  };

//  ===========================================================================
open class Hello(
    var ledgerVersion: Uint32,
    var overlayVersion: Uint32,
    var overlayMinVersion: Uint32,
    var networkID: Hash,
    var versionStr: String,
    var listeningPort: Int,
    var peerID: NodeID,
    var cert: AuthCert,
    var nonce: Uint256
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    ledgerVersion.toXdr(stream)
    overlayVersion.toXdr(stream)
    overlayMinVersion.toXdr(stream)
    networkID.toXdr(stream)
    versionStr.toXdr(stream)
    listeningPort.toXdr(stream)
    peerID.toXdr(stream)
    cert.toXdr(stream)
    nonce.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct Auth
//  {
//      // Empty message, just to confirm
//      // establishment of MAC keys.
//      int unused;
//  };

//  ===========================================================================
open class Auth(
    var unused: Int
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    unused.toXdr(stream)
  }
}

// === xdr source ============================================================

//  enum IPAddrType
//  {
//      IPv4 = 0,
//      IPv6 = 1
//  };

//  ===========================================================================
public enum class IPAddrType(val value: Int): XdrEncodable {
  IPv4(0),
  IPv6(1),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct PeerAddress
//  {
//      union switch (IPAddrType type)
//      {
//      case IPv4:
//          opaque ipv4[4];
//      case IPv6:
//          opaque ipv6[16];
//      }
//      ip;
//      uint32 port;
//      uint32 numFailures;
//  };

//  ===========================================================================
open class PeerAddress(
    var ip: PeerAddressIp,
    var port: Uint32,
    var numFailures: Uint32
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    ip.toXdr(stream)
    port.toXdr(stream)
    numFailures.toXdr(stream)
  }

  abstract class PeerAddressIp(val discriminant: IPAddrType): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class Ipv4(var ipv4: XdrByteArrayFixed4): PeerAddressIp(IPAddrType.IPv4) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        ipv4.toXdr(stream)
      }
    }

    open class Ipv6(var ipv6: XdrByteArrayFixed16): PeerAddressIp(IPAddrType.IPv6) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        ipv6.toXdr(stream)
      }
    }
  }
}

// === xdr source ============================================================

//  enum MessageType
//  {
//      ERROR_MSG = 0,
//      AUTH = 2,
//      DONT_HAVE = 3,
//  
//      GET_PEERS = 4, // gets a list of peers this guy knows about
//      PEERS = 5,
//  
//      GET_TX_SET = 6, // gets a particular txset by hash
//      TX_SET = 7,
//  
//      TRANSACTION = 8, // pass on a tx you have heard about
//  
//      // SCP
//      GET_SCP_QUORUMSET = 9,
//      SCP_QUORUMSET = 10,
//      SCP_MESSAGE = 11,
//      GET_SCP_STATE = 12,
//  
//      // new messages
//      HELLO = 13
//  };

//  ===========================================================================
public enum class MessageType(val value: Int): XdrEncodable {
  ERROR_MSG(0),
  AUTH(2),
  DONT_HAVE(3),
  GET_PEERS(4),
  PEERS(5),
  GET_TX_SET(6),
  TX_SET(7),
  TRANSACTION(8),
  GET_SCP_QUORUMSET(9),
  SCP_QUORUMSET(10),
  SCP_MESSAGE(11),
  GET_SCP_STATE(12),
  HELLO(13),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct DontHave
//  {
//      MessageType type;
//      uint256 reqHash;
//  };

//  ===========================================================================
open class DontHave(
    var type: MessageType,
    var reqHash: Uint256
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    type.toXdr(stream)
    reqHash.toXdr(stream)
  }
}

// === xdr source ============================================================

//  union StellarMessage switch (MessageType type)
//  {
//  case ERROR_MSG:
//      Error error;
//  case HELLO:
//      Hello hello;
//  case AUTH:
//      Auth auth;
//  case DONT_HAVE:
//      DontHave dontHave;
//  case GET_PEERS:
//      void;
//  case PEERS:
//      PeerAddress peers<>;
//  
//  case GET_TX_SET:
//      uint256 txSetHash;
//  case TX_SET:
//      TransactionSet txSet;
//  
//  case TRANSACTION:
//      TransactionEnvelope transaction;
//  
//  // SCP
//  case GET_SCP_QUORUMSET:
//      uint256 qSetHash;
//  case SCP_QUORUMSET:
//      SCPQuorumSet qSet;
//  case SCP_MESSAGE:
//      SCPEnvelope envelope;
//  case GET_SCP_STATE:
//      uint32 getSCPLedgerSeq; // ledger seq requested ; if 0, requests the latest
//  };

//  ===========================================================================
abstract class StellarMessage(val discriminant: MessageType): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class ErrorMsg(var error: Error): StellarMessage(MessageType.ERROR_MSG) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      error.toXdr(stream)
    }
  }

  open class Hello(var hello: Hello): StellarMessage(MessageType.HELLO) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      hello.toXdr(stream)
    }
  }

  open class Auth(var auth: Auth): StellarMessage(MessageType.AUTH) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      auth.toXdr(stream)
    }
  }

  open class DontHave(var dontHave: DontHave): StellarMessage(MessageType.DONT_HAVE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      dontHave.toXdr(stream)
    }
  }

  open class GetPeers: StellarMessage(MessageType.GET_PEERS)

  open class Peers(var peers: Array<PeerAddress>): StellarMessage(MessageType.PEERS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      peers.size.toXdr(stream)
      peers.forEach {
        it.toXdr(stream)
      }
    }
  }

  open class GetTxSet(var txSetHash: Uint256): StellarMessage(MessageType.GET_TX_SET) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      txSetHash.toXdr(stream)
    }
  }

  open class TxSet(var txSet: TransactionSet): StellarMessage(MessageType.TX_SET) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      txSet.toXdr(stream)
    }
  }

  open class Transaction(var transaction: TransactionEnvelope): StellarMessage(MessageType.TRANSACTION) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      transaction.toXdr(stream)
    }
  }

  open class GetScpQuorumset(var qSetHash: Uint256): StellarMessage(MessageType.GET_SCP_QUORUMSET) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      qSetHash.toXdr(stream)
    }
  }

  open class ScpQuorumset(var qSet: SCPQuorumSet): StellarMessage(MessageType.SCP_QUORUMSET) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      qSet.toXdr(stream)
    }
  }

  open class ScpMessage(var envelope: SCPEnvelope): StellarMessage(MessageType.SCP_MESSAGE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      envelope.toXdr(stream)
    }
  }

  open class GetScpState(var getSCPLedgerSeq: Uint32): StellarMessage(MessageType.GET_SCP_STATE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      getSCPLedgerSeq.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  union AuthenticatedMessage switch (LedgerVersion v)
//  {
//  case EMPTY_VERSION:
//      struct
//  {
//     uint64 sequence;
//     StellarMessage message;
//     HmacSha256Mac mac;
//      } v0;
//  };

//  ===========================================================================
abstract class AuthenticatedMessage(val discriminant: LedgerVersion): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class EmptyVersion(var v0: AuthenticatedMessageV0): AuthenticatedMessage(LedgerVersion.EMPTY_VERSION) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      v0.toXdr(stream)
    }
  }

  open class AuthenticatedMessageV0(
      var sequence: Uint64,
      var message: StellarMessage,
      var mac: HmacSha256Mac
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      sequence.toXdr(stream)
      message.toXdr(stream)
      mac.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  struct AMLAlertRequest {
//      BalanceID balanceID;
//      uint64 amount;
//      longstring reason;
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class AMLAlertRequest(
    var balanceID: BalanceID,
    var amount: Uint64,
    var reason: Longstring,
    var ext: AMLAlertRequestExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    balanceID.toXdr(stream)
    amount.toXdr(stream)
    reason.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class AMLAlertRequestExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: AMLAlertRequestExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct AssetCreationRequest {
//  
//  	AssetCode code;
//  	AccountID preissuedAssetSigner;
//  	uint64 maxIssuanceAmount;
//  	uint64 initialPreissuedAmount;
//      uint32 policies;
//      longstring details;
//  
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class AssetCreationRequest(
    var code: AssetCode,
    var preissuedAssetSigner: AccountID,
    var maxIssuanceAmount: Uint64,
    var initialPreissuedAmount: Uint64,
    var policies: Uint32,
    var details: Longstring,
    var ext: AssetCreationRequestExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    code.toXdr(stream)
    preissuedAssetSigner.toXdr(stream)
    maxIssuanceAmount.toXdr(stream)
    initialPreissuedAmount.toXdr(stream)
    policies.toXdr(stream)
    details.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class AssetCreationRequestExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: AssetCreationRequestExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct AssetUpdateRequest {
//  	AssetCode code;
//  	longstring details;
//  	uint32 policies;
//  
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class AssetUpdateRequest(
    var code: AssetCode,
    var details: Longstring,
    var policies: Uint32,
    var ext: AssetUpdateRequestExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    code.toXdr(stream)
    details.toXdr(stream)
    policies.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class AssetUpdateRequestExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: AssetUpdateRequestExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct AssetChangePreissuedSigner {
//  	AssetCode code;
//  	AccountID accountID;
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class AssetChangePreissuedSigner(
    var code: AssetCode,
    var accountID: AccountID,
    var ext: AssetChangePreissuedSignerExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    code.toXdr(stream)
    accountID.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class AssetChangePreissuedSignerExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: AssetChangePreissuedSignerExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct PreIssuanceRequest {
//  	AssetCode asset;
//  	uint64 amount;
//  	DecoratedSignature signature;
//  	string64 reference;
//  
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class PreIssuanceRequest(
    var asset: AssetCode,
    var amount: Uint64,
    var signature: DecoratedSignature,
    var reference: String64,
    var ext: PreIssuanceRequestExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    asset.toXdr(stream)
    amount.toXdr(stream)
    signature.toXdr(stream)
    reference.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class PreIssuanceRequestExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: PreIssuanceRequestExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct IssuanceRequest {
//  	AssetCode asset;
//  	uint64 amount;
//  	BalanceID receiver;
//  	longstring externalDetails; // details of the issuance (External system id, etc.)
//  	Fee fee; //totalFee to be payed (calculated automatically)
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class IssuanceRequest(
    var asset: AssetCode,
    var amount: Uint64,
    var receiver: BalanceID,
    var externalDetails: Longstring,
    var fee: Fee,
    var ext: IssuanceRequestExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    asset.toXdr(stream)
    amount.toXdr(stream)
    receiver.toXdr(stream)
    externalDetails.toXdr(stream)
    fee.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class IssuanceRequestExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: IssuanceRequestExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct LimitsUpdateRequest {
//      Hash documentHash;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class LimitsUpdateRequest(
    var documentHash: Hash,
    var ext: LimitsUpdateRequestExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    documentHash.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class LimitsUpdateRequestExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: LimitsUpdateRequestExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct SaleCreationRequestQuoteAsset {
//  	AssetCode quoteAsset; // asset in which participation will be accepted
//  	uint64 price; // price for 1 baseAsset in terms of quote asset
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class SaleCreationRequestQuoteAsset(
    var quoteAsset: AssetCode,
    var price: Uint64,
    var ext: SaleCreationRequestQuoteAssetExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    quoteAsset.toXdr(stream)
    price.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class SaleCreationRequestQuoteAssetExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: SaleCreationRequestQuoteAssetExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct SaleCreationRequest {
//  	AssetCode baseAsset; // asset for which sale will be performed
//  	AssetCode defaultQuoteAsset; // asset for soft and hard cap
//  	uint64 startTime; // start time of the sale
//  	uint64 endTime; // close time of the sale
//  	uint64 softCap; // minimum amount of quote asset to be received at which sale will be considered a successful
//  	uint64 hardCap; // max amount of quote asset to be received
//  	longstring details; // sale specific details
//  
//  	SaleCreationRequestQuoteAsset quoteAssets<100>;
//  
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//  	case TYPED_SALE:
//  		SaleTypeExt saleTypeExt;
//      case ALLOW_TO_SPECIFY_REQUIRED_BASE_ASSET_AMOUNT_FOR_HARD_CAP:
//          struct {
//              SaleTypeExt saleTypeExt;
//              uint64 requiredBaseAssetForHardCap;
//          } extV2;
//      }
//      ext;
//  };

//  ===========================================================================
open class SaleCreationRequest(
    var baseAsset: AssetCode,
    var defaultQuoteAsset: AssetCode,
    var startTime: Uint64,
    var endTime: Uint64,
    var softCap: Uint64,
    var hardCap: Uint64,
    var details: Longstring,
    var quoteAssets: Array<SaleCreationRequestQuoteAsset>,
    var ext: SaleCreationRequestExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    baseAsset.toXdr(stream)
    defaultQuoteAsset.toXdr(stream)
    startTime.toXdr(stream)
    endTime.toXdr(stream)
    softCap.toXdr(stream)
    hardCap.toXdr(stream)
    details.toXdr(stream)
    quoteAssets.size.toXdr(stream)
    quoteAssets.forEach {
      it.toXdr(stream)
    }
    ext.toXdr(stream)
  }

  abstract class SaleCreationRequestExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: SaleCreationRequestExt(LedgerVersion.EMPTY_VERSION)

    open class TypedSale(var saleTypeExt: SaleTypeExt): SaleCreationRequestExt(LedgerVersion.TYPED_SALE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        saleTypeExt.toXdr(stream)
      }
    }

    open class AllowToSpecifyRequiredBaseAssetAmountForHardCap(var extV2: SaleCreationRequestExtV2): SaleCreationRequestExt(LedgerVersion.ALLOW_TO_SPECIFY_REQUIRED_BASE_ASSET_AMOUNT_FOR_HARD_CAP) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        extV2.toXdr(stream)
      }
    }

    open class SaleCreationRequestExtV2(
        var saleTypeExt: SaleTypeExt,
        var requiredBaseAssetForHardCap: Uint64
      ) : XdrEncodable {

      override fun toXdr(stream: XdrDataOutputStream) {
        saleTypeExt.toXdr(stream)
        requiredBaseAssetForHardCap.toXdr(stream)
      }
    }
  }
}

// === xdr source ============================================================

//  struct UpdateKYCRequest {
//  	AccountID accountToUpdateKYC;
//  	AccountType accountTypeToSet;
//  	uint32 kycLevel;
//  	longstring kycData;
//  
//  	// Tasks are represented by a bit mask. Each flag(task) in mask refers to specific KYC data validity checker
//  	uint32 allTasks;
//  	uint32 pendingTasks;
//  
//  	// Sequence number increases when request is rejected
//  	uint32 sequenceNumber;
//  
//  	// External details vector consists of comments written by KYC data validity checkers
//  	longstring externalDetails<>;
//  
//  	// Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class UpdateKYCRequest(
    var accountToUpdateKYC: AccountID,
    var accountTypeToSet: AccountType,
    var kycLevel: Uint32,
    var kycData: Longstring,
    var allTasks: Uint32,
    var pendingTasks: Uint32,
    var sequenceNumber: Uint32,
    var externalDetails: Array<Longstring>,
    var ext: UpdateKYCRequestExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    accountToUpdateKYC.toXdr(stream)
    accountTypeToSet.toXdr(stream)
    kycLevel.toXdr(stream)
    kycData.toXdr(stream)
    allTasks.toXdr(stream)
    pendingTasks.toXdr(stream)
    sequenceNumber.toXdr(stream)
    externalDetails.size.toXdr(stream)
    externalDetails.forEach {
      it.toXdr(stream)
    }
    ext.toXdr(stream)
  }

  abstract class UpdateKYCRequestExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: UpdateKYCRequestExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct UpdateSaleDetailsRequest {
//      uint64 saleID; // ID of sale to update details
//      longstring newDetails;
//  
//      // Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class UpdateSaleDetailsRequest(
    var saleID: Uint64,
    var newDetails: Longstring,
    var ext: UpdateSaleDetailsRequestExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    saleID.toXdr(stream)
    newDetails.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class UpdateSaleDetailsRequestExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: UpdateSaleDetailsRequestExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum WithdrawalType {
//  	AUTO_CONVERSION = 0
//  };

//  ===========================================================================
public enum class WithdrawalType(val value: Int): XdrEncodable {
  AUTO_CONVERSION(0),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct AutoConversionWithdrawalDetails {
//  	AssetCode destAsset; // asset in which withdrawal will be converted
//  	uint64 expectedAmount; // expected amount to be received in specified asset
//  
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class AutoConversionWithdrawalDetails(
    var destAsset: AssetCode,
    var expectedAmount: Uint64,
    var ext: AutoConversionWithdrawalDetailsExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    destAsset.toXdr(stream)
    expectedAmount.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class AutoConversionWithdrawalDetailsExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: AutoConversionWithdrawalDetailsExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct WithdrawalRequest {
//  	BalanceID balance; // balance id from which withdrawal will be performed
//      uint64 amount; // amount to be withdrawn
//      uint64 universalAmount; // amount in stats asset
//  	Fee fee; // expected fee to be paid
//      longstring externalDetails; // details of the withdrawal (External system id, etc.)
//  	longstring preConfirmationDetails; // details provided by PSIM if two step withdrwal is required
//  	union switch (WithdrawalType withdrawalType) {
//  	case AUTO_CONVERSION:
//  		AutoConversionWithdrawalDetails autoConversion;
//  	} details;
//  
//  	union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class WithdrawalRequest(
    var balance: BalanceID,
    var amount: Uint64,
    var universalAmount: Uint64,
    var fee: Fee,
    var externalDetails: Longstring,
    var preConfirmationDetails: Longstring,
    var details: WithdrawalRequestDetails,
    var ext: WithdrawalRequestExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    balance.toXdr(stream)
    amount.toXdr(stream)
    universalAmount.toXdr(stream)
    fee.toXdr(stream)
    externalDetails.toXdr(stream)
    preConfirmationDetails.toXdr(stream)
    details.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class WithdrawalRequestDetails(val discriminant: WithdrawalType): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class AutoConversion(var autoConversion: AutoConversionWithdrawalDetails): WithdrawalRequestDetails(WithdrawalType.AUTO_CONVERSION) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        autoConversion.toXdr(stream)
      }
    }
  }
  abstract class WithdrawalRequestExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: WithdrawalRequestExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct Operation
//  {
//      // sourceAccount is the account used to run the operation
//      // if not set, the runtime defaults to "sourceAccount" specified at
//      // the transaction level
//      AccountID* sourceAccount;
//  
//      union switch (OperationType type)
//      {
//      case CREATE_ACCOUNT:
//          CreateAccountOp createAccountOp;
//      case PAYMENT:
//          PaymentOp paymentOp;
//      case SET_OPTIONS:
//          SetOptionsOp setOptionsOp;
//  	case CREATE_ISSUANCE_REQUEST:
//  		CreateIssuanceRequestOp createIssuanceRequestOp;
//      case SET_FEES:
//          SetFeesOp setFeesOp;
//  	case MANAGE_ACCOUNT:
//  		ManageAccountOp manageAccountOp;
//  	case CREATE_WITHDRAWAL_REQUEST:
//  		CreateWithdrawalRequestOp createWithdrawalRequestOp;
//  	case MANAGE_BALANCE:
//  		ManageBalanceOp manageBalanceOp;
//  	case REVIEW_PAYMENT_REQUEST:
//  		ReviewPaymentRequestOp reviewPaymentRequestOp;
//      case MANAGE_ASSET:
//          ManageAssetOp manageAssetOp;
//      case CREATE_PREISSUANCE_REQUEST:
//          CreatePreIssuanceRequestOp createPreIssuanceRequest;
//      case SET_LIMITS:
//          SetLimitsOp setLimitsOp;
//      case DIRECT_DEBIT:
//          DirectDebitOp directDebitOp;
//  	case MANAGE_ASSET_PAIR:
//  		ManageAssetPairOp manageAssetPairOp;
//  	case MANAGE_OFFER:
//  		ManageOfferOp manageOfferOp;
//      case MANAGE_INVOICE:
//          ManageInvoiceOp manageInvoiceOp;
//  	case REVIEW_REQUEST:
//  		ReviewRequestOp reviewRequestOp;
//  	case CREATE_SALE_REQUEST:
//  		CreateSaleCreationRequestOp createSaleCreationRequestOp;
//  	case CHECK_SALE_STATE:
//  		CheckSaleStateOp checkSaleStateOp;
//  	case CREATE_AML_ALERT:
//  	    CreateAMLAlertRequestOp createAMLAlertRequestOp;
//  	case MANAGE_KEY_VALUE:
//  	    ManageKeyValueOp manageKeyValueOp;
//  	case CREATE_KYC_REQUEST:
//  		CreateUpdateKYCRequestOp createUpdateKYCRequestOp;
//      case MANAGE_EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY:
//          ManageExternalSystemAccountIdPoolEntryOp manageExternalSystemAccountIdPoolEntryOp;
//      case BIND_EXTERNAL_SYSTEM_ACCOUNT_ID:
//          BindExternalSystemAccountIdOp bindExternalSystemAccountIdOp;
//      case PAYMENT_V2:
//          PaymentOpV2 paymentOpV2;
//      case MANAGE_SALE:
//          ManageSaleOp manageSaleOp;
//      }
//      body;
//  };

//  ===========================================================================
open class Operation(
    var sourceAccount: AccountID?,
    var body: OperationBody
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    if (sourceAccount != null) {
      true.toXdr(stream)
      sourceAccount?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    body.toXdr(stream)
  }

  abstract class OperationBody(val discriminant: OperationType): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class CreateAccount(var createAccountOp: CreateAccountOp): OperationBody(OperationType.CREATE_ACCOUNT) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        createAccountOp.toXdr(stream)
      }
    }

    open class Payment(var paymentOp: PaymentOp): OperationBody(OperationType.PAYMENT) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        paymentOp.toXdr(stream)
      }
    }

    open class SetOptions(var setOptionsOp: SetOptionsOp): OperationBody(OperationType.SET_OPTIONS) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        setOptionsOp.toXdr(stream)
      }
    }

    open class CreateIssuanceRequest(var createIssuanceRequestOp: CreateIssuanceRequestOp): OperationBody(OperationType.CREATE_ISSUANCE_REQUEST) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        createIssuanceRequestOp.toXdr(stream)
      }
    }

    open class SetFees(var setFeesOp: SetFeesOp): OperationBody(OperationType.SET_FEES) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        setFeesOp.toXdr(stream)
      }
    }

    open class ManageAccount(var manageAccountOp: ManageAccountOp): OperationBody(OperationType.MANAGE_ACCOUNT) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        manageAccountOp.toXdr(stream)
      }
    }

    open class CreateWithdrawalRequest(var createWithdrawalRequestOp: CreateWithdrawalRequestOp): OperationBody(OperationType.CREATE_WITHDRAWAL_REQUEST) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        createWithdrawalRequestOp.toXdr(stream)
      }
    }

    open class ManageBalance(var manageBalanceOp: ManageBalanceOp): OperationBody(OperationType.MANAGE_BALANCE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        manageBalanceOp.toXdr(stream)
      }
    }

    open class ReviewPaymentRequest(var reviewPaymentRequestOp: ReviewPaymentRequestOp): OperationBody(OperationType.REVIEW_PAYMENT_REQUEST) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        reviewPaymentRequestOp.toXdr(stream)
      }
    }

    open class ManageAsset(var manageAssetOp: ManageAssetOp): OperationBody(OperationType.MANAGE_ASSET) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        manageAssetOp.toXdr(stream)
      }
    }

    open class CreatePreissuanceRequest(var createPreIssuanceRequest: CreatePreIssuanceRequestOp): OperationBody(OperationType.CREATE_PREISSUANCE_REQUEST) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        createPreIssuanceRequest.toXdr(stream)
      }
    }

    open class SetLimits(var setLimitsOp: SetLimitsOp): OperationBody(OperationType.SET_LIMITS) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        setLimitsOp.toXdr(stream)
      }
    }

    open class DirectDebit(var directDebitOp: DirectDebitOp): OperationBody(OperationType.DIRECT_DEBIT) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        directDebitOp.toXdr(stream)
      }
    }

    open class ManageAssetPair(var manageAssetPairOp: ManageAssetPairOp): OperationBody(OperationType.MANAGE_ASSET_PAIR) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        manageAssetPairOp.toXdr(stream)
      }
    }

    open class ManageOffer(var manageOfferOp: ManageOfferOp): OperationBody(OperationType.MANAGE_OFFER) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        manageOfferOp.toXdr(stream)
      }
    }

    open class ManageInvoice(var manageInvoiceOp: ManageInvoiceOp): OperationBody(OperationType.MANAGE_INVOICE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        manageInvoiceOp.toXdr(stream)
      }
    }

    open class ReviewRequest(var reviewRequestOp: ReviewRequestOp): OperationBody(OperationType.REVIEW_REQUEST) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        reviewRequestOp.toXdr(stream)
      }
    }

    open class CreateSaleRequest(var createSaleCreationRequestOp: CreateSaleCreationRequestOp): OperationBody(OperationType.CREATE_SALE_REQUEST) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        createSaleCreationRequestOp.toXdr(stream)
      }
    }

    open class CheckSaleState(var checkSaleStateOp: CheckSaleStateOp): OperationBody(OperationType.CHECK_SALE_STATE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        checkSaleStateOp.toXdr(stream)
      }
    }

    open class CreateAmlAlert(var createAMLAlertRequestOp: CreateAMLAlertRequestOp): OperationBody(OperationType.CREATE_AML_ALERT) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        createAMLAlertRequestOp.toXdr(stream)
      }
    }

    open class ManageKeyValue(var manageKeyValueOp: ManageKeyValueOp): OperationBody(OperationType.MANAGE_KEY_VALUE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        manageKeyValueOp.toXdr(stream)
      }
    }

    open class CreateKycRequest(var createUpdateKYCRequestOp: CreateUpdateKYCRequestOp): OperationBody(OperationType.CREATE_KYC_REQUEST) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        createUpdateKYCRequestOp.toXdr(stream)
      }
    }

    open class ManageExternalSystemAccountIdPoolEntry(var manageExternalSystemAccountIdPoolEntryOp: ManageExternalSystemAccountIdPoolEntryOp): OperationBody(OperationType.MANAGE_EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        manageExternalSystemAccountIdPoolEntryOp.toXdr(stream)
      }
    }

    open class BindExternalSystemAccountId(var bindExternalSystemAccountIdOp: BindExternalSystemAccountIdOp): OperationBody(OperationType.BIND_EXTERNAL_SYSTEM_ACCOUNT_ID) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        bindExternalSystemAccountIdOp.toXdr(stream)
      }
    }

    open class PaymentV2(var paymentOpV2: PaymentOpV2): OperationBody(OperationType.PAYMENT_V2) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        paymentOpV2.toXdr(stream)
      }
    }

    open class ManageSale(var manageSaleOp: ManageSaleOp): OperationBody(OperationType.MANAGE_SALE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        manageSaleOp.toXdr(stream)
      }
    }
  }
}

// === xdr source ============================================================

//  enum MemoType
//  {
//      MEMO_NONE = 0,
//      MEMO_TEXT = 1,
//      MEMO_ID = 2,
//      MEMO_HASH = 3,
//      MEMO_RETURN = 4
//  };

//  ===========================================================================
public enum class MemoType(val value: Int): XdrEncodable {
  MEMO_NONE(0),
  MEMO_TEXT(1),
  MEMO_ID(2),
  MEMO_HASH(3),
  MEMO_RETURN(4),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  union Memo switch (MemoType type)
//  {
//  case MEMO_NONE:
//      void;
//  case MEMO_TEXT:
//      string text<28>;
//  case MEMO_ID:
//      uint64 id;
//  case MEMO_HASH:
//      Hash hash; // the hash of what to pull from the content server
//  case MEMO_RETURN:
//      Hash retHash; // the hash of the tx you are rejecting
//  };

//  ===========================================================================
abstract class Memo(val discriminant: MemoType): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class MemoNone: Memo(MemoType.MEMO_NONE)

  open class MemoText(var text: String): Memo(MemoType.MEMO_TEXT) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      text.toXdr(stream)
    }
  }

  open class MemoId(var id: Uint64): Memo(MemoType.MEMO_ID) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      id.toXdr(stream)
    }
  }

  open class MemoHash(var hash: Hash): Memo(MemoType.MEMO_HASH) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      hash.toXdr(stream)
    }
  }

  open class MemoReturn(var retHash: Hash): Memo(MemoType.MEMO_RETURN) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      retHash.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  struct TimeBounds
//  {
//      uint64 minTime;
//      uint64 maxTime; // 0 here means no maxTime
//  };

//  ===========================================================================
open class TimeBounds(
    var minTime: Uint64,
    var maxTime: Uint64
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    minTime.toXdr(stream)
    maxTime.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct Transaction
//  {
//      // account used to run the transaction
//      AccountID sourceAccount;
//  
//      Salt salt;
//  
//      // validity range (inclusive) for the last ledger close time
//      TimeBounds timeBounds;
//  
//      Memo memo;
//  
//      Operation operations<100>;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class Transaction(
    var sourceAccount: AccountID,
    var salt: Salt,
    var timeBounds: TimeBounds,
    var memo: Memo,
    var operations: Array<Operation>,
    var ext: TransactionExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    sourceAccount.toXdr(stream)
    salt.toXdr(stream)
    timeBounds.toXdr(stream)
    memo.toXdr(stream)
    operations.size.toXdr(stream)
    operations.forEach {
      it.toXdr(stream)
    }
    ext.toXdr(stream)
  }

  abstract class TransactionExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: TransactionExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct TransactionEnvelope
//  {
//      Transaction tx;
//      DecoratedSignature signatures<20>;
//  };

//  ===========================================================================
open class TransactionEnvelope(
    var tx: Transaction,
    var signatures: Array<DecoratedSignature>
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    tx.toXdr(stream)
    signatures.size.toXdr(stream)
    signatures.forEach {
      it.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  enum OperationResultCode
//  {
//      opINNER = 0, // inner object result is valid
//  
//      opBAD_AUTH = -1,      // too few valid signatures / wrong network
//      opNO_ACCOUNT = -2,    // source account was not found
//  	opNOT_ALLOWED = -3,   // operation is not allowed for this type of source account
//  	opACCOUNT_BLOCKED = -4, // account is blocked
//      opNO_COUNTERPARTY = -5,
//      opCOUNTERPARTY_BLOCKED = -6,
//      opCOUNTERPARTY_WRONG_TYPE = -7,
//  	opBAD_AUTH_EXTRA = -8
//  };

//  ===========================================================================
public enum class OperationResultCode(val value: Int): XdrEncodable {
  opINNER(0),
  opBAD_AUTH(-1),
  opNO_ACCOUNT(-2),
  opNOT_ALLOWED(-3),
  opACCOUNT_BLOCKED(-4),
  opNO_COUNTERPARTY(-5),
  opCOUNTERPARTY_BLOCKED(-6),
  opCOUNTERPARTY_WRONG_TYPE(-7),
  opBAD_AUTH_EXTRA(-8),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  union OperationResult switch (OperationResultCode code)
//  {
//  case opINNER:
//      union switch (OperationType type)
//      {
//      case CREATE_ACCOUNT:
//          CreateAccountResult createAccountResult;
//      case PAYMENT:
//          PaymentResult paymentResult;
//      case SET_OPTIONS:
//          SetOptionsResult setOptionsResult;
//  	case CREATE_ISSUANCE_REQUEST:
//  		CreateIssuanceRequestResult createIssuanceRequestResult;
//      case SET_FEES:
//          SetFeesResult setFeesResult;
//  	case MANAGE_ACCOUNT:
//  		ManageAccountResult manageAccountResult;
//      case CREATE_WITHDRAWAL_REQUEST:
//  		CreateWithdrawalRequestResult createWithdrawalRequestResult;
//      case MANAGE_BALANCE:
//          ManageBalanceResult manageBalanceResult;
//      case REVIEW_PAYMENT_REQUEST:
//          ReviewPaymentRequestResult reviewPaymentRequestResult;
//      case MANAGE_ASSET:
//          ManageAssetResult manageAssetResult;
//      case CREATE_PREISSUANCE_REQUEST:
//          CreatePreIssuanceRequestResult createPreIssuanceRequestResult;
//      case SET_LIMITS:
//          SetLimitsResult setLimitsResult;
//      case DIRECT_DEBIT:
//          DirectDebitResult directDebitResult;
//  	case MANAGE_ASSET_PAIR:
//  		ManageAssetPairResult manageAssetPairResult;
//  	case MANAGE_OFFER:
//  		ManageOfferResult manageOfferResult;
//  	case MANAGE_INVOICE:
//  		ManageInvoiceResult manageInvoiceResult;
//  	case REVIEW_REQUEST:
//  		ReviewRequestResult reviewRequestResult;
//  	case CREATE_SALE_REQUEST:
//  		CreateSaleCreationRequestResult createSaleCreationRequestResult;
//  	case CHECK_SALE_STATE:
//  		CheckSaleStateResult checkSaleStateResult;
//  	case CREATE_AML_ALERT:
//  	    CreateAMLAlertRequestResult createAMLAlertRequestResult;
//  	case MANAGE_KEY_VALUE:
//  	    ManageKeyValueResult manageKeyValueResult;
//  	case CREATE_KYC_REQUEST:
//  	    CreateUpdateKYCRequestResult createUpdateKYCRequestResult;
//      case MANAGE_EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY:
//          ManageExternalSystemAccountIdPoolEntryResult manageExternalSystemAccountIdPoolEntryResult;
//      case BIND_EXTERNAL_SYSTEM_ACCOUNT_ID:
//          BindExternalSystemAccountIdResult bindExternalSystemAccountIdResult;
//      case PAYMENT_V2:
//          PaymentV2Result paymentV2Result;
//      case MANAGE_SALE:
//          ManageSaleResult manageSaleResult;
//      }
//      tr;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class OperationResult(val discriminant: OperationResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class Opinner(var tr: OperationResultTr): OperationResult(OperationResultCode.opINNER) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      tr.toXdr(stream)
    }
  }

  abstract class OperationResultTr(val discriminant: OperationType): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class CreateAccount(var createAccountResult: CreateAccountResult): OperationResultTr(OperationType.CREATE_ACCOUNT) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        createAccountResult.toXdr(stream)
      }
    }

    open class Payment(var paymentResult: PaymentResult): OperationResultTr(OperationType.PAYMENT) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        paymentResult.toXdr(stream)
      }
    }

    open class SetOptions(var setOptionsResult: SetOptionsResult): OperationResultTr(OperationType.SET_OPTIONS) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        setOptionsResult.toXdr(stream)
      }
    }

    open class CreateIssuanceRequest(var createIssuanceRequestResult: CreateIssuanceRequestResult): OperationResultTr(OperationType.CREATE_ISSUANCE_REQUEST) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        createIssuanceRequestResult.toXdr(stream)
      }
    }

    open class SetFees(var setFeesResult: SetFeesResult): OperationResultTr(OperationType.SET_FEES) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        setFeesResult.toXdr(stream)
      }
    }

    open class ManageAccount(var manageAccountResult: ManageAccountResult): OperationResultTr(OperationType.MANAGE_ACCOUNT) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        manageAccountResult.toXdr(stream)
      }
    }

    open class CreateWithdrawalRequest(var createWithdrawalRequestResult: CreateWithdrawalRequestResult): OperationResultTr(OperationType.CREATE_WITHDRAWAL_REQUEST) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        createWithdrawalRequestResult.toXdr(stream)
      }
    }

    open class ManageBalance(var manageBalanceResult: ManageBalanceResult): OperationResultTr(OperationType.MANAGE_BALANCE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        manageBalanceResult.toXdr(stream)
      }
    }

    open class ReviewPaymentRequest(var reviewPaymentRequestResult: ReviewPaymentRequestResult): OperationResultTr(OperationType.REVIEW_PAYMENT_REQUEST) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        reviewPaymentRequestResult.toXdr(stream)
      }
    }

    open class ManageAsset(var manageAssetResult: ManageAssetResult): OperationResultTr(OperationType.MANAGE_ASSET) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        manageAssetResult.toXdr(stream)
      }
    }

    open class CreatePreissuanceRequest(var createPreIssuanceRequestResult: CreatePreIssuanceRequestResult): OperationResultTr(OperationType.CREATE_PREISSUANCE_REQUEST) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        createPreIssuanceRequestResult.toXdr(stream)
      }
    }

    open class SetLimits(var setLimitsResult: SetLimitsResult): OperationResultTr(OperationType.SET_LIMITS) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        setLimitsResult.toXdr(stream)
      }
    }

    open class DirectDebit(var directDebitResult: DirectDebitResult): OperationResultTr(OperationType.DIRECT_DEBIT) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        directDebitResult.toXdr(stream)
      }
    }

    open class ManageAssetPair(var manageAssetPairResult: ManageAssetPairResult): OperationResultTr(OperationType.MANAGE_ASSET_PAIR) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        manageAssetPairResult.toXdr(stream)
      }
    }

    open class ManageOffer(var manageOfferResult: ManageOfferResult): OperationResultTr(OperationType.MANAGE_OFFER) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        manageOfferResult.toXdr(stream)
      }
    }

    open class ManageInvoice(var manageInvoiceResult: ManageInvoiceResult): OperationResultTr(OperationType.MANAGE_INVOICE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        manageInvoiceResult.toXdr(stream)
      }
    }

    open class ReviewRequest(var reviewRequestResult: ReviewRequestResult): OperationResultTr(OperationType.REVIEW_REQUEST) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        reviewRequestResult.toXdr(stream)
      }
    }

    open class CreateSaleRequest(var createSaleCreationRequestResult: CreateSaleCreationRequestResult): OperationResultTr(OperationType.CREATE_SALE_REQUEST) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        createSaleCreationRequestResult.toXdr(stream)
      }
    }

    open class CheckSaleState(var checkSaleStateResult: CheckSaleStateResult): OperationResultTr(OperationType.CHECK_SALE_STATE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        checkSaleStateResult.toXdr(stream)
      }
    }

    open class CreateAmlAlert(var createAMLAlertRequestResult: CreateAMLAlertRequestResult): OperationResultTr(OperationType.CREATE_AML_ALERT) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        createAMLAlertRequestResult.toXdr(stream)
      }
    }

    open class ManageKeyValue(var manageKeyValueResult: ManageKeyValueResult): OperationResultTr(OperationType.MANAGE_KEY_VALUE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        manageKeyValueResult.toXdr(stream)
      }
    }

    open class CreateKycRequest(var createUpdateKYCRequestResult: CreateUpdateKYCRequestResult): OperationResultTr(OperationType.CREATE_KYC_REQUEST) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        createUpdateKYCRequestResult.toXdr(stream)
      }
    }

    open class ManageExternalSystemAccountIdPoolEntry(var manageExternalSystemAccountIdPoolEntryResult: ManageExternalSystemAccountIdPoolEntryResult): OperationResultTr(OperationType.MANAGE_EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        manageExternalSystemAccountIdPoolEntryResult.toXdr(stream)
      }
    }

    open class BindExternalSystemAccountId(var bindExternalSystemAccountIdResult: BindExternalSystemAccountIdResult): OperationResultTr(OperationType.BIND_EXTERNAL_SYSTEM_ACCOUNT_ID) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        bindExternalSystemAccountIdResult.toXdr(stream)
      }
    }

    open class PaymentV2(var paymentV2Result: PaymentV2Result): OperationResultTr(OperationType.PAYMENT_V2) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        paymentV2Result.toXdr(stream)
      }
    }

    open class ManageSale(var manageSaleResult: ManageSaleResult): OperationResultTr(OperationType.MANAGE_SALE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        manageSaleResult.toXdr(stream)
      }
    }
  }
}

// === xdr source ============================================================

//  enum TransactionResultCode
//  {
//      txSUCCESS = 0, // all operations succeeded
//  
//      txFAILED = -1, // one of the operations failed (none were applied)
//  
//      txTOO_EARLY = -2,         // ledger closeTime before minTime
//      txTOO_LATE = -3,          // ledger closeTime after maxTime
//      txMISSING_OPERATION = -4, // no operation was specified
//  
//      txBAD_AUTH = -5,             // too few valid signatures / wrong network
//      txNO_ACCOUNT = -6,           // source account not found
//      txBAD_AUTH_EXTRA = -7,      // unused signatures attached to transaction
//      txINTERNAL_ERROR = -8,      // an unknown error occured
//  	txACCOUNT_BLOCKED = -9,     // account is blocked and cannot be source of tx
//      txDUPLICATION = -10         // if timing is stored
//  };

//  ===========================================================================
public enum class TransactionResultCode(val value: Int): XdrEncodable {
  txSUCCESS(0),
  txFAILED(-1),
  txTOO_EARLY(-2),
  txTOO_LATE(-3),
  txMISSING_OPERATION(-4),
  txBAD_AUTH(-5),
  txNO_ACCOUNT(-6),
  txBAD_AUTH_EXTRA(-7),
  txINTERNAL_ERROR(-8),
  txACCOUNT_BLOCKED(-9),
  txDUPLICATION(-10),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct TransactionResult
//  {
//      int64 feeCharged; // actual fee charged for the transaction
//  
//      union switch (TransactionResultCode code)
//      {
//      case txSUCCESS:
//      case txFAILED:
//          OperationResult results<>;
//      default:
//          void;
//      }
//      result;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class TransactionResult(
    var feeCharged: Int64,
    var result: TransactionResultResult,
    var ext: TransactionResultExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    feeCharged.toXdr(stream)
    result.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class TransactionResultResult(val discriminant: TransactionResultCode): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class Txsuccess(var results: Array<OperationResult>): TransactionResultResult(TransactionResultCode.txSUCCESS) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        results.size.toXdr(stream)
        results.forEach {
          it.toXdr(stream)
        }
      }
    }

    open class Txfailed(var results: Array<OperationResult>): TransactionResultResult(TransactionResultCode.txFAILED) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        results.size.toXdr(stream)
        results.forEach {
          it.toXdr(stream)
        }
      }
    }
  }
  abstract class TransactionResultExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: TransactionResultExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  typedef opaque Hash[32];

//  ===========================================================================
public typealias Hash = XdrByteArrayFixed32

// === xdr source ============================================================

//  typedef opaque uint256[32];

//  ===========================================================================
public typealias Uint256 = XdrByteArrayFixed32

// === xdr source ============================================================

//  typedef unsigned int uint32;

//  ===========================================================================
public typealias Uint32 = Int

// === xdr source ============================================================

//  typedef int int32;

//  ===========================================================================
public typealias Int32 = Int

// === xdr source ============================================================

//  typedef unsigned hyper uint64;

//  ===========================================================================
public typealias Uint64 = Long

// === xdr source ============================================================

//  typedef hyper int64;

//  ===========================================================================
public typealias Int64 = Long

// === xdr source ============================================================

//  enum CryptoKeyType
//  {
//      KEY_TYPE_ED25519 = 0
//  };

//  ===========================================================================
public enum class CryptoKeyType(val value: Int): XdrEncodable {
  KEY_TYPE_ED25519(0),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  enum PublicKeyType
//  {
//  	PUBLIC_KEY_TYPE_ED25519 = 0
//  };

//  ===========================================================================
public enum class PublicKeyType(val value: Int): XdrEncodable {
  PUBLIC_KEY_TYPE_ED25519(0),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  union PublicKey switch (CryptoKeyType type)
//  {
//  case KEY_TYPE_ED25519:
//      uint256 ed25519;
//  };

//  ===========================================================================
abstract class PublicKey(val discriminant: CryptoKeyType): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  open class KeyTypeEd25519(var ed25519: Uint256): PublicKey(CryptoKeyType.KEY_TYPE_ED25519) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      ed25519.toXdr(stream)
    }
  }
}

// === xdr source ============================================================

//  enum LedgerVersion {
//  	EMPTY_VERSION = 0,
//  	PASS_EXTERNAL_SYS_ACC_ID_IN_CREATE_ACC = 1,
//  	DETAILED_LEDGER_CHANGES = 2, // write more all ledger changes to transaction meta
//  	NEW_SIGNER_TYPES = 3, // use more comprehensive list of signer types
//  	TYPED_SALE = 4, // sales can have type
//  	UNIQUE_BALANCE_CREATION = 5, // allows to specify in manage balance that balance should not be created if one for such asset and account exists
//  	ASSET_PREISSUER_MIGRATION = 6,
//  	ASSET_PREISSUER_MIGRATED = 7,
//  	USE_KYC_LEVEL = 8,
//  	ERROR_ON_NON_ZERO_TASKS_TO_REMOVE_IN_REJECT_KYC = 9,
//  	ALLOW_ACCOUNT_MANAGER_TO_CHANGE_KYC = 10,
//  	CHANGE_ASSET_ISSUER_BAD_AUTH_EXTRA_FIXED = 11,
//  	AUTO_CREATE_COMMISSION_BALANCE_ON_TRANSFER = 12,
//      ALLOW_REJECT_REQUEST_OF_BLOCKED_REQUESTOR = 13,
//  	ASSET_UPDATE_CHECK_REFERENCE_EXISTS = 14,
//  	CROSS_ASSET_FEE = 15,
//  	USE_PAYMENT_V2 = 16,
//  	ALLOW_SYNDICATE_TO_UPDATE_KYC = 17,
//  	DO_NOT_BUILD_ACCOUNT_IF_VERSION_EQUALS_OR_GREATER = 18,
//  	ALLOW_TO_SPECIFY_REQUIRED_BASE_ASSET_AMOUNT_FOR_HARD_CAP = 19,
//  	KYC_RULES = 20,
//  	ALLOW_TO_CREATE_SEVERAL_SALES = 21,
//  	KEY_VALUE_POOL_ENTRY_EXPIRES_AT = 22,
//  	KEY_VALUE_UPDATE = 23,
//  	ALLOW_TO_CANCEL_SALE_PARTICIP_WITHOUT_SPECIFING_BALANCE = 24,
//  	DETAILS_MAX_LENGTH_EXTENDED = 25
//  };

//  ===========================================================================
public enum class LedgerVersion(val value: Int): XdrEncodable {
  EMPTY_VERSION(0),
  PASS_EXTERNAL_SYS_ACC_ID_IN_CREATE_ACC(1),
  DETAILED_LEDGER_CHANGES(2),
  NEW_SIGNER_TYPES(3),
  TYPED_SALE(4),
  UNIQUE_BALANCE_CREATION(5),
  ASSET_PREISSUER_MIGRATION(6),
  ASSET_PREISSUER_MIGRATED(7),
  USE_KYC_LEVEL(8),
  ERROR_ON_NON_ZERO_TASKS_TO_REMOVE_IN_REJECT_KYC(9),
  ALLOW_ACCOUNT_MANAGER_TO_CHANGE_KYC(10),
  CHANGE_ASSET_ISSUER_BAD_AUTH_EXTRA_FIXED(11),
  AUTO_CREATE_COMMISSION_BALANCE_ON_TRANSFER(12),
  ALLOW_REJECT_REQUEST_OF_BLOCKED_REQUESTOR(13),
  ASSET_UPDATE_CHECK_REFERENCE_EXISTS(14),
  CROSS_ASSET_FEE(15),
  USE_PAYMENT_V2(16),
  ALLOW_SYNDICATE_TO_UPDATE_KYC(17),
  DO_NOT_BUILD_ACCOUNT_IF_VERSION_EQUALS_OR_GREATER(18),
  ALLOW_TO_SPECIFY_REQUIRED_BASE_ASSET_AMOUNT_FOR_HARD_CAP(19),
  KYC_RULES(20),
  ALLOW_TO_CREATE_SEVERAL_SALES(21),
  KEY_VALUE_POOL_ENTRY_EXPIRES_AT(22),
  KEY_VALUE_UPDATE(23),
  ALLOW_TO_CANCEL_SALE_PARTICIP_WITHOUT_SPECIFING_BALANCE(24),
  DETAILS_MAX_LENGTH_EXTENDED(25),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  typedef opaque Signature<64>;

//  ===========================================================================
public typealias Signature = ByteArray

// === xdr source ============================================================

//  typedef opaque SignatureHint[4];

//  ===========================================================================
public typealias SignatureHint = XdrByteArrayFixed4

// === xdr source ============================================================

//  typedef PublicKey NodeID;

//  ===========================================================================
public typealias NodeID = PublicKey

// === xdr source ============================================================

//  struct Curve25519Secret
//  {
//          opaque key[32];
//  };

//  ===========================================================================
open class Curve25519Secret(
    var key: XdrByteArrayFixed32
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    key.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct Curve25519Public
//  {
//          opaque key[32];
//  };

//  ===========================================================================
open class Curve25519Public(
    var key: XdrByteArrayFixed32
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    key.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct HmacSha256Key
//  {
//          opaque key[32];
//  };

//  ===========================================================================
open class HmacSha256Key(
    var key: XdrByteArrayFixed32
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    key.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct HmacSha256Mac
//  {
//          opaque mac[32];
//  };

//  ===========================================================================
open class HmacSha256Mac(
    var mac: XdrByteArrayFixed32
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    mac.toXdr(stream)
  }
}

// === xdr source ============================================================

//  typedef PublicKey AccountID;

//  ===========================================================================
public typealias AccountID = PublicKey

// === xdr source ============================================================

//  typedef PublicKey BalanceID;

//  ===========================================================================
public typealias BalanceID = PublicKey

// === xdr source ============================================================

//  typedef opaque Thresholds[4];

//  ===========================================================================
public typealias Thresholds = XdrByteArrayFixed4

// === xdr source ============================================================

//  typedef string string32<32>;

//  ===========================================================================
public typealias String32 = String

// === xdr source ============================================================

//  typedef string string64<64>;

//  ===========================================================================
public typealias String64 = String

// === xdr source ============================================================

//  typedef string string256<256>;

//  ===========================================================================
public typealias String256 = String

// === xdr source ============================================================

//  typedef string longstring<>;

//  ===========================================================================
public typealias Longstring = String

// === xdr source ============================================================

//  typedef string AssetCode<16>;

//  ===========================================================================
public typealias AssetCode = String

// === xdr source ============================================================

//  typedef uint64 Salt;

//  ===========================================================================
public typealias Salt = Uint64

// === xdr source ============================================================

//  typedef opaque DataValue<64>;

//  ===========================================================================
public typealias DataValue = ByteArray

// === xdr source ============================================================

//  struct Fee {
//  	uint64 fixed;
//  	uint64 percent;
//  
//      // reserved for future use
//      union switch(LedgerVersion v)
//      {
//          case EMPTY_VERSION:
//              void;
//      }
//      ext;
//  };

//  ===========================================================================
open class Fee(
    var fixed: Uint64,
    var percent: Uint64,
    var ext: FeeExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    fixed.toXdr(stream)
    percent.toXdr(stream)
    ext.toXdr(stream)
  }

  abstract class FeeExt(val discriminant: LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    open class EmptyVersion: FeeExt(LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum OperationType
//  {
//      CREATE_ACCOUNT = 0,
//      PAYMENT = 1,
//      SET_OPTIONS = 2,
//      CREATE_ISSUANCE_REQUEST = 3,
//      SET_FEES = 5,
//  	MANAGE_ACCOUNT = 6,
//      CREATE_WITHDRAWAL_REQUEST = 7,
//      MANAGE_BALANCE = 9,
//      REVIEW_PAYMENT_REQUEST = 10,
//      MANAGE_ASSET = 11,
//      CREATE_PREISSUANCE_REQUEST = 12,
//      SET_LIMITS = 13,
//      DIRECT_DEBIT = 14,
//  	MANAGE_ASSET_PAIR = 15,
//  	MANAGE_OFFER = 16,
//      MANAGE_INVOICE = 17,
//  	REVIEW_REQUEST = 18,
//  	CREATE_SALE_REQUEST = 19,
//  	CHECK_SALE_STATE = 20,
//      CREATE_AML_ALERT = 21,
//      CREATE_KYC_REQUEST = 22,
//      PAYMENT_V2 = 23,
//      MANAGE_EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY = 24,
//      BIND_EXTERNAL_SYSTEM_ACCOUNT_ID = 25,
//      MANAGE_SALE = 26,
//      MANAGE_KEY_VALUE = 27
//  };

//  ===========================================================================
public enum class OperationType(val value: Int): XdrEncodable {
  CREATE_ACCOUNT(0),
  PAYMENT(1),
  SET_OPTIONS(2),
  CREATE_ISSUANCE_REQUEST(3),
  SET_FEES(5),
  MANAGE_ACCOUNT(6),
  CREATE_WITHDRAWAL_REQUEST(7),
  MANAGE_BALANCE(9),
  REVIEW_PAYMENT_REQUEST(10),
  MANAGE_ASSET(11),
  CREATE_PREISSUANCE_REQUEST(12),
  SET_LIMITS(13),
  DIRECT_DEBIT(14),
  MANAGE_ASSET_PAIR(15),
  MANAGE_OFFER(16),
  MANAGE_INVOICE(17),
  REVIEW_REQUEST(18),
  CREATE_SALE_REQUEST(19),
  CHECK_SALE_STATE(20),
  CREATE_AML_ALERT(21),
  CREATE_KYC_REQUEST(22),
  PAYMENT_V2(23),
  MANAGE_EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY(24),
  BIND_EXTERNAL_SYSTEM_ACCOUNT_ID(25),
  MANAGE_SALE(26),
  MANAGE_KEY_VALUE(27),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct DecoratedSignature
//  {
//      SignatureHint hint;  // last 4 bytes of the public key, used as a hint
//      Signature signature; // actual signature
//  };

//  ===========================================================================
open class DecoratedSignature(
    var hint: SignatureHint,
    var signature: Signature
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    hint.toXdr(stream)
    signature.toXdr(stream)
  }
}
