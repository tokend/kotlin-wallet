// Automatically generated by xdrgen 
// DO NOT EDIT or your changes may be overwritten

package org.tokend.wallet.xdr

import org.tokend.wallet.xdr.utils.*

// === xdr source ============================================================

//  struct AccountKYCEntry
//  {
//      AccountID accountID;
//      longstring KYCData;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class AccountKYCEntry(
    var accountID: org.tokend.wallet.xdr.AccountID,
    var KYCData: org.tokend.wallet.xdr.Longstring,
    var ext: AccountKYCEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    accountID.toXdr(stream)
    KYCData.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<AccountKYCEntry> by ReflectiveXdrDecoder.wrapType()

  abstract class AccountKYCEntryExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<AccountKYCEntryExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: AccountKYCEntryExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct AccountEntry
//  {
//      AccountID accountID;      // master public key for this account
//  
//      // Referral marketing
//      AccountID* referrer; // parent account
//  
//      // sequential ID - unique identifier of the account, used by ingesting applications to
//      // identify account, while keeping size of index small
//      uint64 sequentialID;
//  
//  	uint64 roleIDs<>;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class AccountEntry(
    var accountID: org.tokend.wallet.xdr.AccountID,
    @XdrOptionalField
    var referrer: org.tokend.wallet.xdr.AccountID?,
    var sequentialID: org.tokend.wallet.xdr.Uint64,
    var roleIDs: kotlin.Array<org.tokend.wallet.xdr.Uint64>,
    var ext: AccountEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    accountID.toXdr(stream)
    if (referrer != null) {
      true.toXdr(stream)
      referrer?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    sequentialID.toXdr(stream)
    roleIDs.size.toXdr(stream)
    roleIDs.forEach {
      it.toXdr(stream)
    }
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<AccountEntry> by ReflectiveXdrDecoder.wrapType()

  abstract class AccountEntryExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<AccountEntryExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: AccountEntryExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct AssetEntry
//  {
//      AssetCode code;
//  
//      uint32 securityType; // use instead policies that limit usage, use in account rules
//      uint32 state; // smth that can be used to disable asset
//  	
//  	uint64 maxIssuanceAmount; // max number of tokens to be issued
//  	uint64 issued; // number of issued tokens
//  	uint64 pendingIssuance; // number of tokens to be issued
//  	
//      uint32 trailingDigitsCount;
//      
//      AccountID owner;
//  	longstring details;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class AssetEntry(
    var code: org.tokend.wallet.xdr.AssetCode,
    var securityType: org.tokend.wallet.xdr.Uint32,
    var state: org.tokend.wallet.xdr.Uint32,
    var maxIssuanceAmount: org.tokend.wallet.xdr.Uint64,
    var issued: org.tokend.wallet.xdr.Uint64,
    var pendingIssuance: org.tokend.wallet.xdr.Uint64,
    var trailingDigitsCount: org.tokend.wallet.xdr.Uint32,
    var owner: org.tokend.wallet.xdr.AccountID,
    var details: org.tokend.wallet.xdr.Longstring,
    var ext: AssetEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    code.toXdr(stream)
    securityType.toXdr(stream)
    state.toXdr(stream)
    maxIssuanceAmount.toXdr(stream)
    issued.toXdr(stream)
    pendingIssuance.toXdr(stream)
    trailingDigitsCount.toXdr(stream)
    owner.toXdr(stream)
    details.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<AssetEntry> by ReflectiveXdrDecoder.wrapType()

  abstract class AssetEntryExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<AssetEntryExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: AssetEntryExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct BalanceEntry
//  {
//      BalanceID balanceID;
//  	// sequential ID - unique identifier of the balance, used by ingesting applications to
//  	// identify account, while keeping size of index small 
//      uint64 sequentialID;
//      AssetCode asset;
//      AccountID accountID;
//      uint64 amount;
//      uint64 locked;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class BalanceEntry(
    var balanceID: org.tokend.wallet.xdr.BalanceID,
    var sequentialID: org.tokend.wallet.xdr.Uint64,
    var asset: org.tokend.wallet.xdr.AssetCode,
    var accountID: org.tokend.wallet.xdr.AccountID,
    var amount: org.tokend.wallet.xdr.Uint64,
    var locked: org.tokend.wallet.xdr.Uint64,
    var ext: BalanceEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    balanceID.toXdr(stream)
    sequentialID.toXdr(stream)
    asset.toXdr(stream)
    accountID.toXdr(stream)
    amount.toXdr(stream)
    locked.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<BalanceEntry> by ReflectiveXdrDecoder.wrapType()

  abstract class BalanceEntryExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<BalanceEntryExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: BalanceEntryExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct DataEntry 
//  {
//      uint64 id;
//      uint32 securityType;
//      longstring value;
//  
//      AccountID owner;
//  
//      EmptyExt ext;
//  };

//  ===========================================================================
open class DataEntry(
    var id: org.tokend.wallet.xdr.Uint64,
    var securityType: org.tokend.wallet.xdr.Uint32,
    var value: org.tokend.wallet.xdr.Longstring,
    var owner: org.tokend.wallet.xdr.AccountID,
    var ext: org.tokend.wallet.xdr.EmptyExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    id.toXdr(stream)
    securityType.toXdr(stream)
    value.toXdr(stream)
    owner.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<DataEntry> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: `KeyValueEntryType` defines the type of value in the key-value entry
//      enum KeyValueEntryType
//      {
//          UINT32 = 1,
//          STRING = 2,
//          UINT64 = 3
//      };

//  ===========================================================================
public enum class KeyValueEntryType(val value: kotlin.Int): XdrEncodable {
  UINT32(1),
  STRING(2),
  UINT64(3),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<KeyValueEntryType> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: `KeyValueEntryValue` represents the value based on given `KeyValueEntryType`
//      union KeyValueEntryValue switch (KeyValueEntryType type)
//      {
//          case UINT32:
//              uint32 ui32Value;
//          case STRING:
//              string stringValue<>;
//          case UINT64:
//              uint64 ui64Value;
//      };

//  ===========================================================================
abstract class KeyValueEntryValue(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.KeyValueEntryType): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<KeyValueEntryValue> by ReflectiveXdrDecoder.wrapType()

  open class Uint32(var ui32Value: org.tokend.wallet.xdr.Uint32): KeyValueEntryValue(org.tokend.wallet.xdr.KeyValueEntryType.UINT32) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      ui32Value.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Uint32> by ReflectiveXdrDecoder.wrapType()
  }

  open class String(var stringValue: kotlin.String): KeyValueEntryValue(org.tokend.wallet.xdr.KeyValueEntryType.STRING) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      stringValue.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<String> by ReflectiveXdrDecoder.wrapType()
  }

  open class Uint64(var ui64Value: org.tokend.wallet.xdr.Uint64): KeyValueEntryValue(org.tokend.wallet.xdr.KeyValueEntryType.UINT64) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      ui64Value.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Uint64> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  //: `KeyValueEntry` is an entry used to store key mapped values
//      struct KeyValueEntry
//      {
//          //: String value that must be unique among other keys for kev-value pairs
//          longstring key;
//  
//          //: Value that corresponds to particular key (depending on `KeyValueEntryType`, 
//          //: the value can be either uint32, or uint64, or string)
//          KeyValueEntryValue value;
//  
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//              case EMPTY_VERSION:
//                  void;
//          }
//          ext;
//      };

//  ===========================================================================
open class KeyValueEntry(
    var key: org.tokend.wallet.xdr.Longstring,
    var value: org.tokend.wallet.xdr.KeyValueEntryValue,
    var ext: KeyValueEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    key.toXdr(stream)
    value.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<KeyValueEntry> by ReflectiveXdrDecoder.wrapType()

  abstract class KeyValueEntryExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<KeyValueEntryExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: KeyValueEntryExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct ReferenceEntry
//  {
//  	AccountID sender;
//      string64 reference;
//      OperationType opType;
//      uint32 securityType;
//  
//  	// reserved for future use
//  	EmptyExt ext;
//  };

//  ===========================================================================
open class ReferenceEntry(
    var sender: org.tokend.wallet.xdr.AccountID,
    var reference: org.tokend.wallet.xdr.String64,
    var opType: org.tokend.wallet.xdr.OperationType,
    var securityType: org.tokend.wallet.xdr.Uint32,
    var ext: org.tokend.wallet.xdr.EmptyExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    sender.toXdr(stream)
    reference.toXdr(stream)
    opType.toXdr(stream)
    securityType.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<ReferenceEntry> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  union ReviewableRequestOperation switch (OperationType type)
//  {
//  case CREATE_ACCOUNT:
//      CreateAccountOp createAccountOp;
//  case PAYMENT:
//      PaymentOp paymentOp;
//  case CREATE_SIGNER:
//      CreateSignerOp createSignerOp;
//  case UPDATE_SIGNER:
//      UpdateSignerOp updateSignerOp;
//  case REMOVE_SIGNER:
//      RemoveSignerOp removeSignerOp;
//  case CREATE_ROLE:
//      CreateRoleOp createRoleOp;
//  case UPDATE_ROLE:
//      UpdateRoleOp updateRoleOp;
//  case REMOVE_ROLE:
//      RemoveRoleOp removeRoleOp;
//  case CREATE_RULE:
//      CreateRuleOp createRuleOp;
//  case UPDATE_RULE:
//      UpdateRuleOp updateRuleOp;
//  case REMOVE_RULE:
//      RemoveRuleOp removeRuleOp;
//  case ISSUANCE:
//      IssuanceOp issuanceOp;
//  case DESTRUCTION:
//      DestructionOp destructionOp;
//  case CHANGE_ACCOUNT_ROLES:
//      ChangeAccountRolesOp changeAccountRolesOp;
//  case CREATE_ASSET:
//      CreateAssetOp createAssetOp;
//  case UPDATE_ASSET:
//      UpdateAssetOp updateAssetOp;
//  case PUT_KEY_VALUE:
//      PutKeyValueOp putKeyValueOp;
//  case REMOVE_KEY_VALUE:
//      RemoveKeyValueOp removeKeyValueOp;
//  case CREATE_DATA:
//      CreateDataOp createDataOp;
//  case UPDATE_DATA:
//      UpdateDataOp updateDataOp;
//  case REMOVE_DATA:
//      RemoveDataOp removeDataOp;
//  case CREATE_BALANCE:
//      CreateBalanceOp createBalanceOp;
//  case INITIATE_KYC_RECOVERY:
//      InitiateKYCRecoveryOp initiateKYCRecoveryOp;
//  case KYC_RECOVERY:
//      KYCRecoveryOp kycRecoveryOp;
//  
//  };

//  ===========================================================================
abstract class ReviewableRequestOperation(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.OperationType): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<ReviewableRequestOperation> by ReflectiveXdrDecoder.wrapType()

  open class CreateAccount(var createAccountOp: org.tokend.wallet.xdr.CreateAccountOp): ReviewableRequestOperation(org.tokend.wallet.xdr.OperationType.CREATE_ACCOUNT) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      createAccountOp.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<CreateAccount> by ReflectiveXdrDecoder.wrapType()
  }

  open class Payment(var paymentOp: org.tokend.wallet.xdr.PaymentOp): ReviewableRequestOperation(org.tokend.wallet.xdr.OperationType.PAYMENT) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      paymentOp.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Payment> by ReflectiveXdrDecoder.wrapType()
  }

  open class CreateSigner(var createSignerOp: org.tokend.wallet.xdr.CreateSignerOp): ReviewableRequestOperation(org.tokend.wallet.xdr.OperationType.CREATE_SIGNER) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      createSignerOp.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<CreateSigner> by ReflectiveXdrDecoder.wrapType()
  }

  open class UpdateSigner(var updateSignerOp: org.tokend.wallet.xdr.UpdateSignerOp): ReviewableRequestOperation(org.tokend.wallet.xdr.OperationType.UPDATE_SIGNER) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      updateSignerOp.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<UpdateSigner> by ReflectiveXdrDecoder.wrapType()
  }

  open class RemoveSigner(var removeSignerOp: org.tokend.wallet.xdr.RemoveSignerOp): ReviewableRequestOperation(org.tokend.wallet.xdr.OperationType.REMOVE_SIGNER) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      removeSignerOp.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RemoveSigner> by ReflectiveXdrDecoder.wrapType()
  }

  open class CreateRole(var createRoleOp: org.tokend.wallet.xdr.CreateRoleOp): ReviewableRequestOperation(org.tokend.wallet.xdr.OperationType.CREATE_ROLE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      createRoleOp.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<CreateRole> by ReflectiveXdrDecoder.wrapType()
  }

  open class UpdateRole(var updateRoleOp: org.tokend.wallet.xdr.UpdateRoleOp): ReviewableRequestOperation(org.tokend.wallet.xdr.OperationType.UPDATE_ROLE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      updateRoleOp.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<UpdateRole> by ReflectiveXdrDecoder.wrapType()
  }

  open class RemoveRole(var removeRoleOp: org.tokend.wallet.xdr.RemoveRoleOp): ReviewableRequestOperation(org.tokend.wallet.xdr.OperationType.REMOVE_ROLE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      removeRoleOp.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RemoveRole> by ReflectiveXdrDecoder.wrapType()
  }

  open class CreateRule(var createRuleOp: org.tokend.wallet.xdr.CreateRuleOp): ReviewableRequestOperation(org.tokend.wallet.xdr.OperationType.CREATE_RULE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      createRuleOp.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<CreateRule> by ReflectiveXdrDecoder.wrapType()
  }

  open class UpdateRule(var updateRuleOp: org.tokend.wallet.xdr.UpdateRuleOp): ReviewableRequestOperation(org.tokend.wallet.xdr.OperationType.UPDATE_RULE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      updateRuleOp.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<UpdateRule> by ReflectiveXdrDecoder.wrapType()
  }

  open class RemoveRule(var removeRuleOp: org.tokend.wallet.xdr.RemoveRuleOp): ReviewableRequestOperation(org.tokend.wallet.xdr.OperationType.REMOVE_RULE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      removeRuleOp.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RemoveRule> by ReflectiveXdrDecoder.wrapType()
  }

  open class Issuance(var issuanceOp: org.tokend.wallet.xdr.IssuanceOp): ReviewableRequestOperation(org.tokend.wallet.xdr.OperationType.ISSUANCE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      issuanceOp.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Issuance> by ReflectiveXdrDecoder.wrapType()
  }

  open class Destruction(var destructionOp: org.tokend.wallet.xdr.DestructionOp): ReviewableRequestOperation(org.tokend.wallet.xdr.OperationType.DESTRUCTION) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      destructionOp.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Destruction> by ReflectiveXdrDecoder.wrapType()
  }

  open class ChangeAccountRoles(var changeAccountRolesOp: org.tokend.wallet.xdr.ChangeAccountRolesOp): ReviewableRequestOperation(org.tokend.wallet.xdr.OperationType.CHANGE_ACCOUNT_ROLES) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      changeAccountRolesOp.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<ChangeAccountRoles> by ReflectiveXdrDecoder.wrapType()
  }

  open class CreateAsset(var createAssetOp: org.tokend.wallet.xdr.CreateAssetOp): ReviewableRequestOperation(org.tokend.wallet.xdr.OperationType.CREATE_ASSET) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      createAssetOp.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<CreateAsset> by ReflectiveXdrDecoder.wrapType()
  }

  open class UpdateAsset(var updateAssetOp: org.tokend.wallet.xdr.UpdateAssetOp): ReviewableRequestOperation(org.tokend.wallet.xdr.OperationType.UPDATE_ASSET) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      updateAssetOp.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<UpdateAsset> by ReflectiveXdrDecoder.wrapType()
  }

  open class PutKeyValue(var putKeyValueOp: org.tokend.wallet.xdr.PutKeyValueOp): ReviewableRequestOperation(org.tokend.wallet.xdr.OperationType.PUT_KEY_VALUE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      putKeyValueOp.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<PutKeyValue> by ReflectiveXdrDecoder.wrapType()
  }

  open class RemoveKeyValue(var removeKeyValueOp: org.tokend.wallet.xdr.RemoveKeyValueOp): ReviewableRequestOperation(org.tokend.wallet.xdr.OperationType.REMOVE_KEY_VALUE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      removeKeyValueOp.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RemoveKeyValue> by ReflectiveXdrDecoder.wrapType()
  }

  open class CreateData(var createDataOp: org.tokend.wallet.xdr.CreateDataOp): ReviewableRequestOperation(org.tokend.wallet.xdr.OperationType.CREATE_DATA) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      createDataOp.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<CreateData> by ReflectiveXdrDecoder.wrapType()
  }

  open class UpdateData(var updateDataOp: org.tokend.wallet.xdr.UpdateDataOp): ReviewableRequestOperation(org.tokend.wallet.xdr.OperationType.UPDATE_DATA) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      updateDataOp.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<UpdateData> by ReflectiveXdrDecoder.wrapType()
  }

  open class RemoveData(var removeDataOp: org.tokend.wallet.xdr.RemoveDataOp): ReviewableRequestOperation(org.tokend.wallet.xdr.OperationType.REMOVE_DATA) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      removeDataOp.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RemoveData> by ReflectiveXdrDecoder.wrapType()
  }

  open class CreateBalance(var createBalanceOp: org.tokend.wallet.xdr.CreateBalanceOp): ReviewableRequestOperation(org.tokend.wallet.xdr.OperationType.CREATE_BALANCE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      createBalanceOp.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<CreateBalance> by ReflectiveXdrDecoder.wrapType()
  }

  open class InitiateKycRecovery(var initiateKYCRecoveryOp: org.tokend.wallet.xdr.InitiateKYCRecoveryOp): ReviewableRequestOperation(org.tokend.wallet.xdr.OperationType.INITIATE_KYC_RECOVERY) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      initiateKYCRecoveryOp.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<InitiateKycRecovery> by ReflectiveXdrDecoder.wrapType()
  }

  open class KycRecovery(var kycRecoveryOp: org.tokend.wallet.xdr.KYCRecoveryOp): ReviewableRequestOperation(org.tokend.wallet.xdr.OperationType.KYC_RECOVERY) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      kycRecoveryOp.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<KycRecovery> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  struct ReviewableRequestEntry
//  {
//  	uint64 requestID;
//  	Hash hash; // hash of the request body
//  
//      uint32 securityType; // responsible for operations (types, count)
//  
//  	AccountID requestor;
//      longstring rejectReason;
//  	int64 createdAt; // when request was created
//  
//  	ReviewableRequestOperation operations<>;
//  
//  	uint64 allTasks;
//      uint64 pendingTasks;
//      // maybe add sequenceNumber and creator details
//  
//      // External details vector consists of comments written by request reviewers
//      longstring externalDetails<>;
//  
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//  	}
//      ext;
//  };

//  ===========================================================================
open class ReviewableRequestEntry(
    var requestID: org.tokend.wallet.xdr.Uint64,
    var hash: org.tokend.wallet.xdr.Hash,
    var securityType: org.tokend.wallet.xdr.Uint32,
    var requestor: org.tokend.wallet.xdr.AccountID,
    var rejectReason: org.tokend.wallet.xdr.Longstring,
    var createdAt: org.tokend.wallet.xdr.Int64,
    var operations: kotlin.Array<org.tokend.wallet.xdr.ReviewableRequestOperation>,
    var allTasks: org.tokend.wallet.xdr.Uint64,
    var pendingTasks: org.tokend.wallet.xdr.Uint64,
    var externalDetails: kotlin.Array<org.tokend.wallet.xdr.Longstring>,
    var ext: ReviewableRequestEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    requestID.toXdr(stream)
    hash.toXdr(stream)
    securityType.toXdr(stream)
    requestor.toXdr(stream)
    rejectReason.toXdr(stream)
    createdAt.toXdr(stream)
    operations.size.toXdr(stream)
    operations.forEach {
      it.toXdr(stream)
    }
    allTasks.toXdr(stream)
    pendingTasks.toXdr(stream)
    externalDetails.size.toXdr(stream)
    externalDetails.forEach {
      it.toXdr(stream)
    }
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<ReviewableRequestEntry> by ReflectiveXdrDecoder.wrapType()

  abstract class ReviewableRequestEntryExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<ReviewableRequestEntryExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: ReviewableRequestEntryExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct RoleEntry
//  {
//      uint64 id;
//      uint64 ruleIDs<>;
//  
//      longstring details;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class RoleEntry(
    var id: org.tokend.wallet.xdr.Uint64,
    var ruleIDs: kotlin.Array<org.tokend.wallet.xdr.Uint64>,
    var details: org.tokend.wallet.xdr.Longstring,
    var ext: RoleEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    id.toXdr(stream)
    ruleIDs.size.toXdr(stream)
    ruleIDs.forEach {
      it.toXdr(stream)
    }
    details.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<RoleEntry> by ReflectiveXdrDecoder.wrapType()

  abstract class RoleEntryExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RoleEntryExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: RoleEntryExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct RuleEntry
//  {
//      uint64 id;
//  
//      RuleResource resource;
//      RuleAction action;
//  
//      bool forbids;
//  
//      longstring details;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class RuleEntry(
    var id: org.tokend.wallet.xdr.Uint64,
    var resource: org.tokend.wallet.xdr.RuleResource,
    var action: org.tokend.wallet.xdr.RuleAction,
    var forbids: kotlin.Boolean,
    var details: org.tokend.wallet.xdr.Longstring,
    var ext: RuleEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    id.toXdr(stream)
    resource.toXdr(stream)
    action.toXdr(stream)
    forbids.toXdr(stream)
    details.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<RuleEntry> by ReflectiveXdrDecoder.wrapType()

  abstract class RuleEntryExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RuleEntryExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: RuleEntryExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct SignerEntry
//  {
//      PublicKey pubKey;
//      AccountID accountID; // account to which signer had attached
//  
//      uint32 weight; // threshold for all SignerRules equals 1000
//  	uint32 identity;
//  
//  	longstring details;
//  
//  	uint64 roleIDs<>;
//  
//  	 // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class SignerEntry(
    var pubKey: org.tokend.wallet.xdr.PublicKey,
    var accountID: org.tokend.wallet.xdr.AccountID,
    var weight: org.tokend.wallet.xdr.Uint32,
    var identity: org.tokend.wallet.xdr.Uint32,
    var details: org.tokend.wallet.xdr.Longstring,
    var roleIDs: kotlin.Array<org.tokend.wallet.xdr.Uint64>,
    var ext: SignerEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    pubKey.toXdr(stream)
    accountID.toXdr(stream)
    weight.toXdr(stream)
    identity.toXdr(stream)
    details.toXdr(stream)
    roleIDs.size.toXdr(stream)
    roleIDs.forEach {
      it.toXdr(stream)
    }
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<SignerEntry> by ReflectiveXdrDecoder.wrapType()

  abstract class SignerEntryExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<SignerEntryExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: SignerEntryExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct LedgerEntry
//  {
//      uint32 lastModifiedLedgerSeq; // ledger the LedgerEntry was last changed
//  
//      union switch (LedgerEntryType type)
//      {
//      case ACCOUNT:
//          AccountEntry account;
//      case SIGNER:
//          SignerEntry signer;
//      case BALANCE:
//          BalanceEntry balance;
//      case ASSET:
//          AssetEntry asset;
//      case DATA:
//          DataEntry data;
//      case REFERENCE:
//          ReferenceEntry reference;
//      case REVIEWABLE_REQUEST:
//  		ReviewableRequestEntry reviewableRequest;
//  	case KEY_VALUE:
//  	    KeyValueEntry keyValue;
//  	case ACCOUNT_KYC:
//          AccountKYCEntry accountKYC;
//      case RULE:
//          RuleEntry rule;
//      case ROLE:
//          RoleEntry role;
//      }
//      data;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class LedgerEntry(
    var lastModifiedLedgerSeq: org.tokend.wallet.xdr.Uint32,
    var data: LedgerEntryData,
    var ext: LedgerEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    lastModifiedLedgerSeq.toXdr(stream)
    data.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<LedgerEntry> by ReflectiveXdrDecoder.wrapType()

  abstract class LedgerEntryData(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerEntryType): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<LedgerEntryData> by ReflectiveXdrDecoder.wrapType()

    open class Account(var account: org.tokend.wallet.xdr.AccountEntry): LedgerEntryData(org.tokend.wallet.xdr.LedgerEntryType.ACCOUNT) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        account.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<Account> by ReflectiveXdrDecoder.wrapType()
    }

    open class Signer(var signer: org.tokend.wallet.xdr.SignerEntry): LedgerEntryData(org.tokend.wallet.xdr.LedgerEntryType.SIGNER) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        signer.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<Signer> by ReflectiveXdrDecoder.wrapType()
    }

    open class Balance(var balance: org.tokend.wallet.xdr.BalanceEntry): LedgerEntryData(org.tokend.wallet.xdr.LedgerEntryType.BALANCE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        balance.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<Balance> by ReflectiveXdrDecoder.wrapType()
    }

    open class Asset(var asset: org.tokend.wallet.xdr.AssetEntry): LedgerEntryData(org.tokend.wallet.xdr.LedgerEntryType.ASSET) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        asset.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<Asset> by ReflectiveXdrDecoder.wrapType()
    }

    open class Data(var data: org.tokend.wallet.xdr.DataEntry): LedgerEntryData(org.tokend.wallet.xdr.LedgerEntryType.DATA) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        data.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<Data> by ReflectiveXdrDecoder.wrapType()
    }

    open class Reference(var reference: org.tokend.wallet.xdr.ReferenceEntry): LedgerEntryData(org.tokend.wallet.xdr.LedgerEntryType.REFERENCE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        reference.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<Reference> by ReflectiveXdrDecoder.wrapType()
    }

    open class ReviewableRequest(var reviewableRequest: org.tokend.wallet.xdr.ReviewableRequestEntry): LedgerEntryData(org.tokend.wallet.xdr.LedgerEntryType.REVIEWABLE_REQUEST) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        reviewableRequest.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<ReviewableRequest> by ReflectiveXdrDecoder.wrapType()
    }

    open class KeyValue(var keyValue: org.tokend.wallet.xdr.KeyValueEntry): LedgerEntryData(org.tokend.wallet.xdr.LedgerEntryType.KEY_VALUE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        keyValue.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<KeyValue> by ReflectiveXdrDecoder.wrapType()
    }

    open class AccountKyc(var accountKYC: org.tokend.wallet.xdr.AccountKYCEntry): LedgerEntryData(org.tokend.wallet.xdr.LedgerEntryType.ACCOUNT_KYC) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        accountKYC.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<AccountKyc> by ReflectiveXdrDecoder.wrapType()
    }

    open class Rule(var rule: org.tokend.wallet.xdr.RuleEntry): LedgerEntryData(org.tokend.wallet.xdr.LedgerEntryType.RULE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        rule.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<Rule> by ReflectiveXdrDecoder.wrapType()
    }

    open class Role(var role: org.tokend.wallet.xdr.RoleEntry): LedgerEntryData(org.tokend.wallet.xdr.LedgerEntryType.ROLE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        role.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<Role> by ReflectiveXdrDecoder.wrapType()
    }
  }
  abstract class LedgerEntryExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<LedgerEntryExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: LedgerEntryExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum EnvelopeType
//  {
//      SCP = 1,
//      TX = 2,
//      AUTH = 3
//  };

//  ===========================================================================
public enum class EnvelopeType(val value: kotlin.Int): XdrEncodable {
  SCP(1),
  TX(2),
  AUTH(3),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<EnvelopeType> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  union LedgerKey switch (LedgerEntryType type)
//  {
//  case ACCOUNT:
//      struct
//      {
//          AccountID accountID;
//          union switch (LedgerVersion v)
//         {
//         case EMPTY_VERSION:
//            void;
//         }
//         ext;
//      } account;
//  case SIGNER:
//      struct
//      {
//          PublicKey pubKey;
//          AccountID accountID;
//  
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      } signer;
//  case BALANCE:
//      struct
//      {
//          BalanceID balanceID;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      } balance;
//  case ASSET:
//      struct
//      {
//          AssetCode code;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      } asset;
//  case REFERENCE:
//      struct
//      {
//          AccountID sender;
//          string64 reference;
//          OperationType opType;
//          uint32 securityType;
//  
//          EmptyExt ext;
//      } reference;
//  case REVIEWABLE_REQUEST:
//      struct {
//          uint64 requestID;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      } reviewableRequest;
//  case KEY_VALUE:
//      struct {
//          longstring key;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      } keyValue;
//  case ACCOUNT_KYC:
//      struct {
//          AccountID accountID;
//          union switch(LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      } accountKYC;
//  case ROLE:
//      struct {
//          uint64 id;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      } role;
//  case RULE:
//      struct {
//          uint64 id;
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      } rule;
//  case DATA:
//      struct {
//          uint64 id;
//  
//          EmptyExt ext;
//      } data;
//  
//  };

//  ===========================================================================
abstract class LedgerKey(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerEntryType): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<LedgerKey> by ReflectiveXdrDecoder.wrapType()

  open class Account(var account: LedgerKeyAccount): LedgerKey(org.tokend.wallet.xdr.LedgerEntryType.ACCOUNT) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      account.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Account> by ReflectiveXdrDecoder.wrapType()
  }

  open class Signer(var signer: LedgerKeySigner): LedgerKey(org.tokend.wallet.xdr.LedgerEntryType.SIGNER) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      signer.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Signer> by ReflectiveXdrDecoder.wrapType()
  }

  open class Balance(var balance: LedgerKeyBalance): LedgerKey(org.tokend.wallet.xdr.LedgerEntryType.BALANCE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      balance.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Balance> by ReflectiveXdrDecoder.wrapType()
  }

  open class Asset(var asset: LedgerKeyAsset): LedgerKey(org.tokend.wallet.xdr.LedgerEntryType.ASSET) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      asset.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Asset> by ReflectiveXdrDecoder.wrapType()
  }

  open class Reference(var reference: LedgerKeyReference): LedgerKey(org.tokend.wallet.xdr.LedgerEntryType.REFERENCE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      reference.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Reference> by ReflectiveXdrDecoder.wrapType()
  }

  open class ReviewableRequest(var reviewableRequest: LedgerKeyReviewableRequest): LedgerKey(org.tokend.wallet.xdr.LedgerEntryType.REVIEWABLE_REQUEST) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      reviewableRequest.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<ReviewableRequest> by ReflectiveXdrDecoder.wrapType()
  }

  open class KeyValue(var keyValue: LedgerKeyKeyValue): LedgerKey(org.tokend.wallet.xdr.LedgerEntryType.KEY_VALUE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      keyValue.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<KeyValue> by ReflectiveXdrDecoder.wrapType()
  }

  open class AccountKyc(var accountKYC: LedgerKeyAccountKYC): LedgerKey(org.tokend.wallet.xdr.LedgerEntryType.ACCOUNT_KYC) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      accountKYC.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<AccountKyc> by ReflectiveXdrDecoder.wrapType()
  }

  open class Role(var role: LedgerKeyRole): LedgerKey(org.tokend.wallet.xdr.LedgerEntryType.ROLE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      role.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Role> by ReflectiveXdrDecoder.wrapType()
  }

  open class Rule(var rule: LedgerKeyRule): LedgerKey(org.tokend.wallet.xdr.LedgerEntryType.RULE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      rule.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Rule> by ReflectiveXdrDecoder.wrapType()
  }

  open class Data(var data: LedgerKeyData): LedgerKey(org.tokend.wallet.xdr.LedgerEntryType.DATA) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      data.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Data> by ReflectiveXdrDecoder.wrapType()
  }

  open class LedgerKeyAccount(
      var accountID: org.tokend.wallet.xdr.AccountID,
      var ext: LedgerKeyAccountExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      accountID.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<LedgerKeyAccount> by ReflectiveXdrDecoder.wrapType()

    abstract class LedgerKeyAccountExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<LedgerKeyAccountExt> by ReflectiveXdrDecoder.wrapType()

      open class EmptyVersion: LedgerKeyAccountExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
    }
  }
  open class LedgerKeySigner(
      var pubKey: org.tokend.wallet.xdr.PublicKey,
      var accountID: org.tokend.wallet.xdr.AccountID,
      var ext: LedgerKeySignerExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      pubKey.toXdr(stream)
      accountID.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<LedgerKeySigner> by ReflectiveXdrDecoder.wrapType()

    abstract class LedgerKeySignerExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<LedgerKeySignerExt> by ReflectiveXdrDecoder.wrapType()

      open class EmptyVersion: LedgerKeySignerExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
    }
  }
  open class LedgerKeyBalance(
      var balanceID: org.tokend.wallet.xdr.BalanceID,
      var ext: LedgerKeyBalanceExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      balanceID.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<LedgerKeyBalance> by ReflectiveXdrDecoder.wrapType()

    abstract class LedgerKeyBalanceExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<LedgerKeyBalanceExt> by ReflectiveXdrDecoder.wrapType()

      open class EmptyVersion: LedgerKeyBalanceExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
    }
  }
  open class LedgerKeyAsset(
      var code: org.tokend.wallet.xdr.AssetCode,
      var ext: LedgerKeyAssetExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      code.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<LedgerKeyAsset> by ReflectiveXdrDecoder.wrapType()

    abstract class LedgerKeyAssetExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<LedgerKeyAssetExt> by ReflectiveXdrDecoder.wrapType()

      open class EmptyVersion: LedgerKeyAssetExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
    }
  }
  open class LedgerKeyReference(
      var sender: org.tokend.wallet.xdr.AccountID,
      var reference: org.tokend.wallet.xdr.String64,
      var opType: org.tokend.wallet.xdr.OperationType,
      var securityType: org.tokend.wallet.xdr.Uint32,
      var ext: org.tokend.wallet.xdr.EmptyExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      sender.toXdr(stream)
      reference.toXdr(stream)
      opType.toXdr(stream)
      securityType.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<LedgerKeyReference> by ReflectiveXdrDecoder.wrapType()
  }
  open class LedgerKeyReviewableRequest(
      var requestID: org.tokend.wallet.xdr.Uint64,
      var ext: LedgerKeyReviewableRequestExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      requestID.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<LedgerKeyReviewableRequest> by ReflectiveXdrDecoder.wrapType()

    abstract class LedgerKeyReviewableRequestExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<LedgerKeyReviewableRequestExt> by ReflectiveXdrDecoder.wrapType()

      open class EmptyVersion: LedgerKeyReviewableRequestExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
    }
  }
  open class LedgerKeyKeyValue(
      var key: org.tokend.wallet.xdr.Longstring,
      var ext: LedgerKeyKeyValueExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      key.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<LedgerKeyKeyValue> by ReflectiveXdrDecoder.wrapType()

    abstract class LedgerKeyKeyValueExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<LedgerKeyKeyValueExt> by ReflectiveXdrDecoder.wrapType()

      open class EmptyVersion: LedgerKeyKeyValueExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
    }
  }
  open class LedgerKeyAccountKYC(
      var accountID: org.tokend.wallet.xdr.AccountID,
      var ext: LedgerKeyAccountKYCExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      accountID.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<LedgerKeyAccountKYC> by ReflectiveXdrDecoder.wrapType()

    abstract class LedgerKeyAccountKYCExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<LedgerKeyAccountKYCExt> by ReflectiveXdrDecoder.wrapType()

      open class EmptyVersion: LedgerKeyAccountKYCExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
    }
  }
  open class LedgerKeyRole(
      var id: org.tokend.wallet.xdr.Uint64,
      var ext: LedgerKeyRoleExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      id.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<LedgerKeyRole> by ReflectiveXdrDecoder.wrapType()

    abstract class LedgerKeyRoleExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<LedgerKeyRoleExt> by ReflectiveXdrDecoder.wrapType()

      open class EmptyVersion: LedgerKeyRoleExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
    }
  }
  open class LedgerKeyRule(
      var id: org.tokend.wallet.xdr.Uint64,
      var ext: LedgerKeyRuleExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      id.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<LedgerKeyRule> by ReflectiveXdrDecoder.wrapType()

    abstract class LedgerKeyRuleExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<LedgerKeyRuleExt> by ReflectiveXdrDecoder.wrapType()

      open class EmptyVersion: LedgerKeyRuleExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
    }
  }
  open class LedgerKeyData(
      var id: org.tokend.wallet.xdr.Uint64,
      var ext: org.tokend.wallet.xdr.EmptyExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      id.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<LedgerKeyData> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  enum LedgerUpgradeType
//  {
//      NONE = 0,
//      VERSION = 1,
//      MAX_TX_SET_SIZE = 2,
//      TX_EXPIRATION_PERIOD = 3
//  };

//  ===========================================================================
public enum class LedgerUpgradeType(val value: kotlin.Int): XdrEncodable {
  NONE(0),
  VERSION(1),
  MAX_TX_SET_SIZE(2),
  TX_EXPIRATION_PERIOD(3),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<LedgerUpgradeType> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  union LedgerUpgrade switch (LedgerUpgradeType type)
//  {
//  case NONE:
//      void;
//  case VERSION:
//      uint32 newLedgerVersion; // update ledgerVersion
//  case MAX_TX_SET_SIZE:
//      uint32 newMaxTxSetSize; // update maxTxSetSize
//  case TX_EXPIRATION_PERIOD:
//      uint64 newTxExpirationPeriod;
//  };

//  ===========================================================================
abstract class LedgerUpgrade(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerUpgradeType): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<LedgerUpgrade> by ReflectiveXdrDecoder.wrapType()

  open class None: LedgerUpgrade(org.tokend.wallet.xdr.LedgerUpgradeType.NONE)

  open class Version(var newLedgerVersion: org.tokend.wallet.xdr.Uint32): LedgerUpgrade(org.tokend.wallet.xdr.LedgerUpgradeType.VERSION) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      newLedgerVersion.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Version> by ReflectiveXdrDecoder.wrapType()
  }

  open class MaxTxSetSize(var newMaxTxSetSize: org.tokend.wallet.xdr.Uint32): LedgerUpgrade(org.tokend.wallet.xdr.LedgerUpgradeType.MAX_TX_SET_SIZE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      newMaxTxSetSize.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<MaxTxSetSize> by ReflectiveXdrDecoder.wrapType()
  }

  open class TxExpirationPeriod(var newTxExpirationPeriod: org.tokend.wallet.xdr.Uint64): LedgerUpgrade(org.tokend.wallet.xdr.LedgerUpgradeType.TX_EXPIRATION_PERIOD) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      newTxExpirationPeriod.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<TxExpirationPeriod> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  struct IdGenerator {
//  	LedgerEntryType entryType; // type of the entry, for which ids will be generated
//  	uint64 idPool; // last used entry specific ID, used for generating entry of specified type
//  };

//  ===========================================================================
open class IdGenerator(
    var entryType: org.tokend.wallet.xdr.LedgerEntryType,
    var idPool: org.tokend.wallet.xdr.Uint64
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    entryType.toXdr(stream)
    idPool.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<IdGenerator> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  struct LedgerHeader
//  {
//      uint32 ledgerVersion;    // the protocol version of the ledger
//      Hash previousLedgerHash; // hash of the previous ledger header
//      Hash txSetHash;          // hash of transactions' hashes
//      Hash txSetResultHash;    // the TransactionResultSet that led to this ledger
//  
//      uint32 ledgerSeq; // sequence number of this ledger
//      uint64 closeTime; // network close time
//  
//      IdGenerator idGenerators<>; // generators of ids
//      LedgerUpgrade upgrade; // upgrade in current ledger (usually none), only one upgrade in one closed ledger is enough
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class LedgerHeader(
    var ledgerVersion: org.tokend.wallet.xdr.Uint32,
    var previousLedgerHash: org.tokend.wallet.xdr.Hash,
    var txSetHash: org.tokend.wallet.xdr.Hash,
    var txSetResultHash: org.tokend.wallet.xdr.Hash,
    var ledgerSeq: org.tokend.wallet.xdr.Uint32,
    var closeTime: org.tokend.wallet.xdr.Uint64,
    var idGenerators: kotlin.Array<org.tokend.wallet.xdr.IdGenerator>,
    var upgrade: org.tokend.wallet.xdr.LedgerUpgrade,
    var ext: LedgerHeaderExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    ledgerVersion.toXdr(stream)
    previousLedgerHash.toXdr(stream)
    txSetHash.toXdr(stream)
    txSetResultHash.toXdr(stream)
    ledgerSeq.toXdr(stream)
    closeTime.toXdr(stream)
    idGenerators.size.toXdr(stream)
    idGenerators.forEach {
      it.toXdr(stream)
    }
    upgrade.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<LedgerHeader> by ReflectiveXdrDecoder.wrapType()

  abstract class LedgerHeaderExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<LedgerHeaderExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: LedgerHeaderExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct TransactionSet
//  {
//      Hash previousLedgerHash;
//      TransactionEnvelope txs<>;
//  };

//  ===========================================================================
open class TransactionSet(
    var previousLedgerHash: org.tokend.wallet.xdr.Hash,
    var txs: kotlin.Array<org.tokend.wallet.xdr.TransactionEnvelope>
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    previousLedgerHash.toXdr(stream)
    txs.size.toXdr(stream)
    txs.forEach {
      it.toXdr(stream)
    }
  }

  companion object Decoder: XdrDecodable<TransactionSet> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  struct TransactionResultPair
//  {
//      Hash transactionHash;
//      TransactionResult result; // result for the transaction
//  };

//  ===========================================================================
open class TransactionResultPair(
    var transactionHash: org.tokend.wallet.xdr.Hash,
    var result: org.tokend.wallet.xdr.TransactionResult
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    transactionHash.toXdr(stream)
    result.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<TransactionResultPair> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  struct TransactionResultSet
//  {
//      TransactionResultPair results<>;
//  };

//  ===========================================================================
open class TransactionResultSet(
    var results: kotlin.Array<org.tokend.wallet.xdr.TransactionResultPair>
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    results.size.toXdr(stream)
    results.forEach {
      it.toXdr(stream)
    }
  }

  companion object Decoder: XdrDecodable<TransactionResultSet> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  struct TransactionHistoryEntry
//  {
//      uint32 ledgerSeq;
//      TransactionSet txSet;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class TransactionHistoryEntry(
    var ledgerSeq: org.tokend.wallet.xdr.Uint32,
    var txSet: org.tokend.wallet.xdr.TransactionSet,
    var ext: TransactionHistoryEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    ledgerSeq.toXdr(stream)
    txSet.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<TransactionHistoryEntry> by ReflectiveXdrDecoder.wrapType()

  abstract class TransactionHistoryEntryExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<TransactionHistoryEntryExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: TransactionHistoryEntryExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct TransactionHistoryResultEntry
//  {
//      uint32 ledgerSeq;
//      TransactionResultSet txResultSet;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class TransactionHistoryResultEntry(
    var ledgerSeq: org.tokend.wallet.xdr.Uint32,
    var txResultSet: org.tokend.wallet.xdr.TransactionResultSet,
    var ext: TransactionHistoryResultEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    ledgerSeq.toXdr(stream)
    txResultSet.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<TransactionHistoryResultEntry> by ReflectiveXdrDecoder.wrapType()

  abstract class TransactionHistoryResultEntryExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<TransactionHistoryResultEntryExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: TransactionHistoryResultEntryExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct LedgerHeaderHistoryEntry
//  {
//      Hash hash;
//      LedgerHeader header;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class LedgerHeaderHistoryEntry(
    var hash: org.tokend.wallet.xdr.Hash,
    var header: org.tokend.wallet.xdr.LedgerHeader,
    var ext: LedgerHeaderHistoryEntryExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    hash.toXdr(stream)
    header.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<LedgerHeaderHistoryEntry> by ReflectiveXdrDecoder.wrapType()

  abstract class LedgerHeaderHistoryEntryExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<LedgerHeaderHistoryEntryExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: LedgerHeaderHistoryEntryExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum LedgerEntryChangeType
//  {
//      CREATED = 0, // entry was added to the ledger
//      UPDATED = 1, // entry was modified in the ledger
//      REMOVED = 2, // entry was removed from the ledger
//      STATE = 3    // value of the entry
//  };

//  ===========================================================================
public enum class LedgerEntryChangeType(val value: kotlin.Int): XdrEncodable {
  CREATED(0),
  UPDATED(1),
  REMOVED(2),
  STATE(3),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<LedgerEntryChangeType> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  union LedgerEntryChange switch (LedgerEntryChangeType type)
//  {
//  case CREATED:
//      LedgerEntry created;
//  case UPDATED:
//      LedgerEntry updated;
//  case REMOVED:
//      LedgerKey removed;
//  case STATE:
//      LedgerEntry state;
//  };

//  ===========================================================================
abstract class LedgerEntryChange(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerEntryChangeType): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<LedgerEntryChange> by ReflectiveXdrDecoder.wrapType()

  open class Created(var created: org.tokend.wallet.xdr.LedgerEntry): LedgerEntryChange(org.tokend.wallet.xdr.LedgerEntryChangeType.CREATED) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      created.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Created> by ReflectiveXdrDecoder.wrapType()
  }

  open class Updated(var updated: org.tokend.wallet.xdr.LedgerEntry): LedgerEntryChange(org.tokend.wallet.xdr.LedgerEntryChangeType.UPDATED) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      updated.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Updated> by ReflectiveXdrDecoder.wrapType()
  }

  open class Removed(var removed: org.tokend.wallet.xdr.LedgerKey): LedgerEntryChange(org.tokend.wallet.xdr.LedgerEntryChangeType.REMOVED) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      removed.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Removed> by ReflectiveXdrDecoder.wrapType()
  }

  open class State(var state: org.tokend.wallet.xdr.LedgerEntry): LedgerEntryChange(org.tokend.wallet.xdr.LedgerEntryChangeType.STATE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      state.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<State> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  typedef LedgerEntryChange LedgerEntryChanges<>;

//  ===========================================================================
public typealias LedgerEntryChanges = kotlin.Array<org.tokend.wallet.xdr.LedgerEntryChange>

fun LedgerEntryChanges.toXdr(stream: XdrDataOutputStream) {
  this.size.toXdr(stream)
  this.forEach {
    it.toXdr(stream)
  }
}

// === xdr source ============================================================

//  struct OperationMeta
//  {
//      LedgerEntryChanges changes;
//  };

//  ===========================================================================
open class OperationMeta(
    var changes: org.tokend.wallet.xdr.LedgerEntryChanges
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    changes.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<OperationMeta> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  union TransactionMeta switch (LedgerVersion v)
//  {
//  case EMPTY_VERSION:
//      OperationMeta operations<>;
//  };

//  ===========================================================================
abstract class TransactionMeta(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<TransactionMeta> by ReflectiveXdrDecoder.wrapType()

  open class EmptyVersion(var operations: kotlin.Array<org.tokend.wallet.xdr.OperationMeta>): TransactionMeta(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      operations.size.toXdr(stream)
      operations.forEach {
        it.toXdr(stream)
      }
    }

    companion object Decoder: XdrDecodable<EmptyVersion> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  struct ChangeAccountRolesOp
//  {
//      AccountID destinationAccount;
//  
//      //: ID of account role that will be attached to `destinationAccount`
//      uint64 rolesToSet<>;
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring details;
//  
//      EmptyExt ext;
//  };

//  ===========================================================================
open class ChangeAccountRolesOp(
    var destinationAccount: org.tokend.wallet.xdr.AccountID,
    var rolesToSet: kotlin.Array<org.tokend.wallet.xdr.Uint64>,
    var details: org.tokend.wallet.xdr.Longstring,
    var ext: org.tokend.wallet.xdr.EmptyExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    destinationAccount.toXdr(stream)
    rolesToSet.size.toXdr(stream)
    rolesToSet.forEach {
      it.toXdr(stream)
    }
    details.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<ChangeAccountRolesOp> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  enum ChangeAccountRolesResultCode
//  {
//      SUCCESS = 0,
//  
//      INVALID_DETAILS = -1,
//      ACCOUNT_NOT_FOUND = -2,
//      TOO_MANY_ROLES = -3,
//      NO_SUCH_ROLE = -4,
//      NO_ROLE_IDS = -5,
//      ROLE_ID_DUPLICATION = -6
//  };

//  ===========================================================================
public enum class ChangeAccountRolesResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  INVALID_DETAILS(-1),
  ACCOUNT_NOT_FOUND(-2),
  TOO_MANY_ROLES(-3),
  NO_SUCH_ROLE(-4),
  NO_ROLE_IDS(-5),
  ROLE_ID_DUPLICATION(-6),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<ChangeAccountRolesResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  union ChangeAccountRolesResult switch (ChangeAccountRolesResultCode code)
//  {
//  case SUCCESS:
//      EmptyExt ext;
//  case TOO_MANY_ROLES:
//      uint32 maxRolesCount;
//  case NO_SUCH_ROLE:
//  case ROLE_ID_DUPLICATION:
//      uint64 roleID;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class ChangeAccountRolesResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.ChangeAccountRolesResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<ChangeAccountRolesResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var ext: org.tokend.wallet.xdr.EmptyExt): ChangeAccountRolesResult(org.tokend.wallet.xdr.ChangeAccountRolesResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }

  open class TooManyRoles(var maxRolesCount: org.tokend.wallet.xdr.Uint32): ChangeAccountRolesResult(org.tokend.wallet.xdr.ChangeAccountRolesResultCode.TOO_MANY_ROLES) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      maxRolesCount.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<TooManyRoles> by ReflectiveXdrDecoder.wrapType()
  }

  open class NoSuchRole(var roleID: org.tokend.wallet.xdr.Uint64): ChangeAccountRolesResult(org.tokend.wallet.xdr.ChangeAccountRolesResultCode.NO_SUCH_ROLE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      roleID.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<NoSuchRole> by ReflectiveXdrDecoder.wrapType()
  }

  open class RoleIdDuplication(var roleID: org.tokend.wallet.xdr.Uint64): ChangeAccountRolesResult(org.tokend.wallet.xdr.ChangeAccountRolesResultCode.ROLE_ID_DUPLICATION) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      roleID.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RoleIdDuplication> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  //: CreateAccountOp is used to create new account
//  struct CreateAccountOp
//  {
//      //: ID of account to be created
//      AccountID destination;
//      //: ID of an another account that introduced this account into the system.
//      //: If account with such ID does not exist or it's Admin Account. Referrer won't be set.
//      AccountID* referrer;
//      //: ID of the role that will be attached to an account
//      uint64 roleIDs<>;
//  
//      //: Array of data about 'destination' account signers to be created
//      SignerData signersData<>;
//  
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class CreateAccountOp(
    var destination: org.tokend.wallet.xdr.AccountID,
    @XdrOptionalField
    var referrer: org.tokend.wallet.xdr.AccountID?,
    var roleIDs: kotlin.Array<org.tokend.wallet.xdr.Uint64>,
    var signersData: kotlin.Array<org.tokend.wallet.xdr.SignerData>,
    var ext: CreateAccountOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    destination.toXdr(stream)
    if (referrer != null) {
      true.toXdr(stream)
      referrer?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    roleIDs.size.toXdr(stream)
    roleIDs.forEach {
      it.toXdr(stream)
    }
    signersData.size.toXdr(stream)
    signersData.forEach {
      it.toXdr(stream)
    }
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateAccountOp> by ReflectiveXdrDecoder.wrapType()

  abstract class CreateAccountOpExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<CreateAccountOpExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: CreateAccountOpExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  //: Result codes of CreateAccountOp
//  enum CreateAccountResultCode
//  {
//      //: Means that `destination` account has been successfully created with signers specified in `signersData`
//      SUCCESS = 0,
//  
//      // codes considered as "failure" for the operation
//      //: Source account cannot be the same as the destination account
//      INVALID_DESTINATION = -1,
//      //: Account with such an ID already exists
//      ALREADY_EXISTS = -2, // account already exist
//      //: Sum of weights of signers with different identities must exceed the threshold (for now, 1000)
//      INVALID_WEIGHT = -3,
//      //: There is no role with such an ID
//      NO_SUCH_ROLE = -4,
//      //: Creation of a signer for an account is failed because `signersData` is invalid.
//      //: See `createSignerErrorCode`
//      INVALID_SIGNER_DATA = -5,
//      //: It is not allowed to create accounts without signers
//      NO_SIGNER_DATA = -6, // empty signer data array not allowed
//      NO_ROLE_IDS = -7,
//      ROLE_ID_DUPLICATION = -8,
//      TOO_MANY_ROLES = -9
//  };

//  ===========================================================================
public enum class CreateAccountResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  INVALID_DESTINATION(-1),
  ALREADY_EXISTS(-2),
  INVALID_WEIGHT(-3),
  NO_SUCH_ROLE(-4),
  INVALID_SIGNER_DATA(-5),
  NO_SIGNER_DATA(-6),
  NO_ROLE_IDS(-7),
  ROLE_ID_DUPLICATION(-8),
  TOO_MANY_ROLES(-9),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateAccountResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: Result of successful application of `CreateAccount` operation
//  struct CreateAccountSuccess
//  {
//      //: Unique unsigned integer identifier of the new account
//      uint64 sequentialID;
//  
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class CreateAccountSuccess(
    var sequentialID: org.tokend.wallet.xdr.Uint64,
    var ext: CreateAccountSuccessExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    sequentialID.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateAccountSuccess> by ReflectiveXdrDecoder.wrapType()

  abstract class CreateAccountSuccessExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<CreateAccountSuccessExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: CreateAccountSuccessExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  //: Result of operation application
//  union CreateAccountResult switch (CreateAccountResultCode code)
//  {
//  case SUCCESS:
//      CreateAccountSuccess success;
//  case INVALID_SIGNER_DATA:
//      //: `createSignerErrorCode` is used to determine the reason of signer creation failure
//      CreateSignerResultCode createSignerErrorCode;
//  case NO_SUCH_ROLE:
//  case ROLE_ID_DUPLICATION:
//      uint64 roleID;
//  case TOO_MANY_ROLES:
//      uint32 maxRolesCount;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class CreateAccountResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.CreateAccountResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateAccountResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var success: org.tokend.wallet.xdr.CreateAccountSuccess): CreateAccountResult(org.tokend.wallet.xdr.CreateAccountResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }

  open class InvalidSignerData(var createSignerErrorCode: org.tokend.wallet.xdr.CreateSignerResultCode): CreateAccountResult(org.tokend.wallet.xdr.CreateAccountResultCode.INVALID_SIGNER_DATA) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      createSignerErrorCode.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<InvalidSignerData> by ReflectiveXdrDecoder.wrapType()
  }

  open class NoSuchRole(var roleID: org.tokend.wallet.xdr.Uint64): CreateAccountResult(org.tokend.wallet.xdr.CreateAccountResultCode.NO_SUCH_ROLE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      roleID.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<NoSuchRole> by ReflectiveXdrDecoder.wrapType()
  }

  open class RoleIdDuplication(var roleID: org.tokend.wallet.xdr.Uint64): CreateAccountResult(org.tokend.wallet.xdr.CreateAccountResultCode.ROLE_ID_DUPLICATION) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      roleID.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RoleIdDuplication> by ReflectiveXdrDecoder.wrapType()
  }

  open class TooManyRoles(var maxRolesCount: org.tokend.wallet.xdr.Uint32): CreateAccountResult(org.tokend.wallet.xdr.CreateAccountResultCode.TOO_MANY_ROLES) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      maxRolesCount.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<TooManyRoles> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  struct CreateAssetOp
//  {
//      AssetCode code;
//  
//      uint32 securityType; // use instead policies that limit usage, use in account rules
//      uint32 state; 
//  
//  	uint64 maxIssuanceAmount; // max number of tokens to be issued
//      
//      uint32 trailingDigitsCount;
//  
//      longstring details;
//  
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class CreateAssetOp(
    var code: org.tokend.wallet.xdr.AssetCode,
    var securityType: org.tokend.wallet.xdr.Uint32,
    var state: org.tokend.wallet.xdr.Uint32,
    var maxIssuanceAmount: org.tokend.wallet.xdr.Uint64,
    var trailingDigitsCount: org.tokend.wallet.xdr.Uint32,
    var details: org.tokend.wallet.xdr.Longstring,
    var ext: CreateAssetOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    code.toXdr(stream)
    securityType.toXdr(stream)
    state.toXdr(stream)
    maxIssuanceAmount.toXdr(stream)
    trailingDigitsCount.toXdr(stream)
    details.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateAssetOp> by ReflectiveXdrDecoder.wrapType()

  abstract class CreateAssetOpExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<CreateAssetOpExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: CreateAssetOpExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  //: Result codes of ManageAssetOp
//  enum CreateAssetResultCode
//  {
//      //: Specified action in `data` of ManageSignerOp was successfully performed
//      SUCCESS = 0,                       // request was successfully created/updated/canceled
//  
//      //: It is not allowed to create an asset with a code that is already used for another asset
//      ASSET_ALREADY_EXISTS = -1,	      // asset with such code already exist
//      //: It is not allowed to set max issuance amount that is
//      //: less than the sum of issued, pending issuance and available for issuance amounts
//      INVALID_MAX_ISSUANCE_AMOUNT = -2, // max issuance amount is 0
//      //: It is not allowed to use an asset code that is empty or contains space
//      INVALID_CODE = -3,                // asset code is invalid (empty or contains space)
//      //: It is not allowed to use details with invalid json structure
//      INVALID_CREATOR_DETAILS = -4,                        // details must be a valid json
//      //: It is not allowed to set a trailing digits count greater than the maximum trailing digits count (6 at the moment)
//      INVALID_TRAILING_DIGITS_COUNT = -5,          // invalid number of trailing digits
//      //: Maximum issuance amount precision and asset precision are mismatched
//      INVALID_MAX_ISSUANCE_AMOUNT_PRECISION = -6
//  };

//  ===========================================================================
public enum class CreateAssetResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  ASSET_ALREADY_EXISTS(-1),
  INVALID_MAX_ISSUANCE_AMOUNT(-2),
  INVALID_CODE(-3),
  INVALID_CREATOR_DETAILS(-4),
  INVALID_TRAILING_DIGITS_COUNT(-5),
  INVALID_MAX_ISSUANCE_AMOUNT_PRECISION(-6),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateAssetResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: Is used to return the result of operation application
//  union CreateAssetResult switch (CreateAssetResultCode code)
//  {
//  case SUCCESS:
//      //: Result of successful operation application
//      EmptyExt ext;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class CreateAssetResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.CreateAssetResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateAssetResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var ext: org.tokend.wallet.xdr.EmptyExt): CreateAssetResult(org.tokend.wallet.xdr.CreateAssetResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  //: `ManageBalanceOp` applies an `action` of the `ManageBalanceAction` type on the balance of a particular `asset` (referenced to by its AssetCode)
//  //: of the `destination` account (referenced to by its AccountID)
//  struct CreateBalanceOp
//  {
//      //: Defines an account whose balance will be managed
//      AccountID destination;
//      //: Defines an asset code of the balance to which `action` will be applied
//      AssetCode asset;
//  
//      bool additional;
//  
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class CreateBalanceOp(
    var destination: org.tokend.wallet.xdr.AccountID,
    var asset: org.tokend.wallet.xdr.AssetCode,
    var additional: kotlin.Boolean,
    var ext: CreateBalanceOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    destination.toXdr(stream)
    asset.toXdr(stream)
    additional.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateBalanceOp> by ReflectiveXdrDecoder.wrapType()

  abstract class CreateBalanceOpExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<CreateBalanceOpExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: CreateBalanceOpExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  //: Result codes for the ManageBalance operation
//  enum CreateBalanceResultCode
//  {
//      // codes considered as "success" for the operation
//      //: Indicates that `ManageBalanceOp` is successfully applied
//      SUCCESS = 0,
//  
//      //: AssetCode `asset` is invalid (e.g. `AssetCode` does not consist of alphanumeric symbols)
//      INVALID_ASSET = -1,
//      //: Cannot find an asset with a provided asset code
//      ASSET_NOT_FOUND = -2,
//      //: Cannot find an account provided by the `destination` AccountID
//      DESTINATION_NOT_FOUND = -3,
//      ALREADY_EXISTS = -4
//  };

//  ===========================================================================
public enum class CreateBalanceResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  INVALID_ASSET(-1),
  ASSET_NOT_FOUND(-2),
  DESTINATION_NOT_FOUND(-3),
  ALREADY_EXISTS(-4),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateBalanceResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  struct CreateBalanceSuccess {
//      //: ID of the balance that was managed
//      BalanceID balanceID;
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class CreateBalanceSuccess(
    var balanceID: org.tokend.wallet.xdr.BalanceID,
    var ext: CreateBalanceSuccessExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    balanceID.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateBalanceSuccess> by ReflectiveXdrDecoder.wrapType()

  abstract class CreateBalanceSuccessExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<CreateBalanceSuccessExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: CreateBalanceSuccessExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  union CreateBalanceResult switch (CreateBalanceResultCode code)
//  {
//  case SUCCESS:
//      CreateBalanceSuccess success;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class CreateBalanceResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.CreateBalanceResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateBalanceResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var success: org.tokend.wallet.xdr.CreateBalanceSuccess): CreateBalanceResult(org.tokend.wallet.xdr.CreateBalanceResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  struct CreateDataOp 
//  {
//      uint32 securityType;
//      longstring value;
//  
//      EmptyExt ext;
//  };

//  ===========================================================================
open class CreateDataOp(
    var securityType: org.tokend.wallet.xdr.Uint32,
    var value: org.tokend.wallet.xdr.Longstring,
    var ext: org.tokend.wallet.xdr.EmptyExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    securityType.toXdr(stream)
    value.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateDataOp> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  enum CreateDataResultCode
//  {
//      SUCCESS = 0,
//  
//      INVALID_DATA = -1
//  };

//  ===========================================================================
public enum class CreateDataResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  INVALID_DATA(-1),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateDataResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  struct CreateDataSuccess 
//  {
//      uint64 dataID;
//  
//      EmptyExt ext;
//  };

//  ===========================================================================
open class CreateDataSuccess(
    var dataID: org.tokend.wallet.xdr.Uint64,
    var ext: org.tokend.wallet.xdr.EmptyExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    dataID.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateDataSuccess> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  union CreateDataResult switch (CreateDataResultCode code)
//  {
//      case SUCCESS:
//          CreateDataSuccess success;
//      default:
//          void;
//  };

//  ===========================================================================
abstract class CreateDataResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.CreateDataResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateDataResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var success: org.tokend.wallet.xdr.CreateDataSuccess): CreateDataResult(org.tokend.wallet.xdr.CreateDataResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  struct CreateReviewableRequestOp
//  {
//      uint32 securityType;
//      ReviewableRequestOperation operations<>;
//  
//      EmptyExt ext;
//  };

//  ===========================================================================
open class CreateReviewableRequestOp(
    var securityType: org.tokend.wallet.xdr.Uint32,
    var operations: kotlin.Array<org.tokend.wallet.xdr.ReviewableRequestOperation>,
    var ext: org.tokend.wallet.xdr.EmptyExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    securityType.toXdr(stream)
    operations.size.toXdr(stream)
    operations.forEach {
      it.toXdr(stream)
    }
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateReviewableRequestOp> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  enum CreateReviewableRequestResultCode
//  {
//      SUCCESS = 0,
//  
//      INVALID_OPERATION = -1,
//      TASKS_NOT_FOUND = -2,
//      TOO_MANY_OPERATIONS = -3,
//      SECURITY_TYPE_MISMATCH = -4
//  };

//  ===========================================================================
public enum class CreateReviewableRequestResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  INVALID_OPERATION(-1),
  TASKS_NOT_FOUND(-2),
  TOO_MANY_OPERATIONS(-3),
  SECURITY_TYPE_MISMATCH(-4),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateReviewableRequestResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  struct CreateReviewableRequestSuccessResult 
//  {
//      uint64 requestID;
//  
//      ExtendedResult extendedResult;
//  
//      EmptyExt ext;
//  };

//  ===========================================================================
open class CreateReviewableRequestSuccessResult(
    var requestID: org.tokend.wallet.xdr.Uint64,
    var extendedResult: org.tokend.wallet.xdr.ExtendedResult,
    var ext: org.tokend.wallet.xdr.EmptyExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    requestID.toXdr(stream)
    extendedResult.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateReviewableRequestSuccessResult> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  union CreateReviewableRequestResult switch (CreateReviewableRequestResultCode code)
//  {
//  case SUCCESS:
//      CreateReviewableRequestSuccessResult success;
//  case INVALID_OPERATION:
//      OperationResult operationResult;
//  case TOO_MANY_OPERATIONS:
//      uint32 maxOperationsCount;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class CreateReviewableRequestResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.CreateReviewableRequestResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateReviewableRequestResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var success: org.tokend.wallet.xdr.CreateReviewableRequestSuccessResult): CreateReviewableRequestResult(org.tokend.wallet.xdr.CreateReviewableRequestResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }

  open class InvalidOperation(var operationResult: org.tokend.wallet.xdr.OperationResult): CreateReviewableRequestResult(org.tokend.wallet.xdr.CreateReviewableRequestResultCode.INVALID_OPERATION) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      operationResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<InvalidOperation> by ReflectiveXdrDecoder.wrapType()
  }

  open class TooManyOperations(var maxOperationsCount: org.tokend.wallet.xdr.Uint32): CreateReviewableRequestResult(org.tokend.wallet.xdr.CreateReviewableRequestResultCode.TOO_MANY_OPERATIONS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      maxOperationsCount.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<TooManyOperations> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  //: CreateSignerRoleData is used to pass necessary params to create a new signer role
//  struct CreateRoleOp
//  {
//      //: Array of ids of existing, unique and not default rules
//      uint64 ruleIDs<>;
//      //: Arbitrary stringified json object with details to attach to the role
//      longstring details;
//  
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
open class CreateRoleOp(
    var ruleIDs: kotlin.Array<org.tokend.wallet.xdr.Uint64>,
    var details: org.tokend.wallet.xdr.Longstring,
    var ext: CreateRoleOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    ruleIDs.size.toXdr(stream)
    ruleIDs.forEach {
      it.toXdr(stream)
    }
    details.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateRoleOp> by ReflectiveXdrDecoder.wrapType()

  abstract class CreateRoleOpExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<CreateRoleOpExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: CreateRoleOpExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  //: Result codes of ManageSignerRoleResultCode
//  enum CreateRoleResultCode
//  {
//      //: Means that the specified action in `data` of ManageSignerRoleOp was successfully executed
//      SUCCESS = 0,
//  
//      // codes considered as "failure" for the operation
//      //: Passed details have invalid json structure
//      INVALID_DETAILS = -1,
//      //: There is no rule with id passed through `ruleIDs`
//      NO_SUCH_RULE = -2,
//      //: It is not allowed to duplicate ids in `ruleIDs` array
//      RULE_ID_DUPLICATION = -3,
//      //: It is not allowed to pass ruleIDs that are more than maxSignerRuleCount (by default, 128)
//      TOO_MANY_RULE_IDS = -4
//  };

//  ===========================================================================
public enum class CreateRoleResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  INVALID_DETAILS(-1),
  NO_SUCH_RULE(-2),
  RULE_ID_DUPLICATION(-3),
  TOO_MANY_RULE_IDS(-4),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateRoleResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: Result of operation application
//  union CreateRoleResult switch (CreateRoleResultCode code)
//  {
//  case SUCCESS:
//      struct
//      {
//          //: id of a role that was managed
//          uint64 roleID;
//  
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      } success;
//  case RULE_ID_DUPLICATION:
//  case NO_SUCH_RULE:
//      //: ID of a rule that was either duplicated or is default or does not exist
//      uint64 ruleID;
//  case TOO_MANY_RULE_IDS:
//      //: max count of rule ids that can be passed in `ruleIDs` array
//      uint32 maxRuleIDsCount;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class CreateRoleResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.CreateRoleResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateRoleResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var success: CreateRoleResultSuccess): CreateRoleResult(org.tokend.wallet.xdr.CreateRoleResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }

  open class RuleIdDuplication(var ruleID: org.tokend.wallet.xdr.Uint64): CreateRoleResult(org.tokend.wallet.xdr.CreateRoleResultCode.RULE_ID_DUPLICATION) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      ruleID.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RuleIdDuplication> by ReflectiveXdrDecoder.wrapType()
  }

  open class NoSuchRule(var ruleID: org.tokend.wallet.xdr.Uint64): CreateRoleResult(org.tokend.wallet.xdr.CreateRoleResultCode.NO_SUCH_RULE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      ruleID.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<NoSuchRule> by ReflectiveXdrDecoder.wrapType()
  }

  open class TooManyRuleIds(var maxRuleIDsCount: org.tokend.wallet.xdr.Uint32): CreateRoleResult(org.tokend.wallet.xdr.CreateRoleResultCode.TOO_MANY_RULE_IDS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      maxRuleIDsCount.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<TooManyRuleIds> by ReflectiveXdrDecoder.wrapType()
  }

  open class CreateRoleResultSuccess(
      var roleID: org.tokend.wallet.xdr.Uint64,
      var ext: CreateRoleResultSuccessExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      roleID.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<CreateRoleResultSuccess> by ReflectiveXdrDecoder.wrapType()

    abstract class CreateRoleResultSuccessExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<CreateRoleResultSuccessExt> by ReflectiveXdrDecoder.wrapType()

      open class EmptyVersion: CreateRoleResultSuccessExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
    }
  }
}

// === xdr source ============================================================

//  //: CreateSignerRuleData is used to pass necessary params to create a new signer rule
//  struct CreateRuleOp
//  {
//      //: Resource is used to specify an entity (for some, with properties) that can be managed through operations
//      RuleResource resource;
//      //: Value from enum that can be applied to `resource`
//      RuleAction action;
//      //: Indicate whether or not an `action` on the provided `resource` is prohibited
//      bool forbids;
//      //: Arbitrary stringified json object with details that will be attached to a rule
//      longstring details;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
open class CreateRuleOp(
    var resource: org.tokend.wallet.xdr.RuleResource,
    var action: org.tokend.wallet.xdr.RuleAction,
    var forbids: kotlin.Boolean,
    var details: org.tokend.wallet.xdr.Longstring,
    var ext: CreateRuleOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    resource.toXdr(stream)
    action.toXdr(stream)
    forbids.toXdr(stream)
    details.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateRuleOp> by ReflectiveXdrDecoder.wrapType()

  abstract class CreateRuleOpExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<CreateRuleOpExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: CreateRuleOpExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  //: Result codes of ManageSignerRuleOp
//  enum CreateRuleResultCode
//  {
//      //: Specified action in `data` of ManageSignerRuleOp was successfully executed
//      SUCCESS = 0,
//  
//      // codes considered as "failure" for the operation
//      //: Passed details have invalid json structure
//      INVALID_DETAILS = -1,
//  
//      INVALID_CUSTOM_ACTION = -2,
//      INVALID_CUSTOM_RESOURCE = -3
//  };

//  ===========================================================================
public enum class CreateRuleResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  INVALID_DETAILS(-1),
  INVALID_CUSTOM_ACTION(-2),
  INVALID_CUSTOM_RESOURCE(-3),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateRuleResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: Result of operation application
//  union CreateRuleResult switch (CreateRuleResultCode code)
//  {
//  case SUCCESS:
//      struct {
//          //: id of the rule that was managed
//          uint64 ruleID;
//  
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      } success;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class CreateRuleResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.CreateRuleResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateRuleResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var success: CreateRuleResultSuccess): CreateRuleResult(org.tokend.wallet.xdr.CreateRuleResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }

  open class CreateRuleResultSuccess(
      var ruleID: org.tokend.wallet.xdr.Uint64,
      var ext: CreateRuleResultSuccessExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      ruleID.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<CreateRuleResultSuccess> by ReflectiveXdrDecoder.wrapType()

    abstract class CreateRuleResultSuccessExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<CreateRuleResultSuccessExt> by ReflectiveXdrDecoder.wrapType()

      open class EmptyVersion: CreateRuleResultSuccessExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
    }
  }
}

// === xdr source ============================================================

//  struct SignerData
//  {
//      //: Public key of a signer
//      PublicKey publicKey;
//      //: id of the role that will be attached to a signer
//      uint64 roleIDs<>;
//  
//      //: weight that signer will have, threshold for all SignerRequirements equals 1000
//      uint32 weight;
//      //: If there are some signers with equal identity, only one signer will be chosen
//      //: (either the one with the biggest weight or the one who was the first to satisfy a threshold)
//      uint32 identity;
//  
//      //: Arbitrary stringified json object with details that will be attached to signer
//      longstring details;
//  
//      //: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
open class SignerData(
    var publicKey: org.tokend.wallet.xdr.PublicKey,
    var roleIDs: kotlin.Array<org.tokend.wallet.xdr.Uint64>,
    var weight: org.tokend.wallet.xdr.Uint32,
    var identity: org.tokend.wallet.xdr.Uint32,
    var details: org.tokend.wallet.xdr.Longstring,
    var ext: org.tokend.wallet.xdr.EmptyExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    publicKey.toXdr(stream)
    roleIDs.size.toXdr(stream)
    roleIDs.forEach {
      it.toXdr(stream)
    }
    weight.toXdr(stream)
    identity.toXdr(stream)
    details.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<SignerData> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  struct CreateSignerOp
//  {
//      SignerData data;
//  
//      //: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
open class CreateSignerOp(
    var data: org.tokend.wallet.xdr.SignerData,
    var ext: org.tokend.wallet.xdr.EmptyExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    data.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateSignerOp> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  enum CreateSignerResultCode
//  {
//      SUCCESS = 0,
//  
//      //: Passed details have invalid json structure
//      INVALID_DETAILS = -1, // invalid json details
//      //: Signer with such public key is already attached to the source account
//      ALREADY_EXISTS = -2, // signer already exist
//      //: There is no role with such id
//      NO_SUCH_ROLE = -3,
//      //: It is not allowed to set weight more than 1000
//      INVALID_WEIGHT = -4, // more than 1000
//      NO_ROLE_IDS = -5,
//      ROLE_ID_DUPLICATION = -6,
//      TOO_MANY_ROLES = -7
//  };

//  ===========================================================================
public enum class CreateSignerResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  INVALID_DETAILS(-1),
  ALREADY_EXISTS(-2),
  NO_SUCH_ROLE(-3),
  INVALID_WEIGHT(-4),
  NO_ROLE_IDS(-5),
  ROLE_ID_DUPLICATION(-6),
  TOO_MANY_ROLES(-7),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateSignerResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  union CreateSignerResult switch (CreateSignerResultCode code)
//  {
//  case SUCCESS:
//      EmptyExt ext;
//  case NO_SUCH_ROLE:
//  case ROLE_ID_DUPLICATION:
//      uint64 roleID;
//  case TOO_MANY_ROLES:
//      uint32 maxRolesCount;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class CreateSignerResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.CreateSignerResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CreateSignerResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var ext: org.tokend.wallet.xdr.EmptyExt): CreateSignerResult(org.tokend.wallet.xdr.CreateSignerResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }

  open class NoSuchRole(var roleID: org.tokend.wallet.xdr.Uint64): CreateSignerResult(org.tokend.wallet.xdr.CreateSignerResultCode.NO_SUCH_ROLE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      roleID.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<NoSuchRole> by ReflectiveXdrDecoder.wrapType()
  }

  open class RoleIdDuplication(var roleID: org.tokend.wallet.xdr.Uint64): CreateSignerResult(org.tokend.wallet.xdr.CreateSignerResultCode.ROLE_ID_DUPLICATION) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      roleID.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RoleIdDuplication> by ReflectiveXdrDecoder.wrapType()
  }

  open class TooManyRoles(var maxRolesCount: org.tokend.wallet.xdr.Uint32): CreateSignerResult(org.tokend.wallet.xdr.CreateSignerResultCode.TOO_MANY_ROLES) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      maxRolesCount.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<TooManyRoles> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  //: Destruction operation will charge the specified amount from balance
//  struct DestructionOp
//  {
//      //: security type
//      uint32 securityType;
//      //: Balance to withdraw from
//      BalanceID balance; // balance id from which withdrawal will be performed
//      //: Amount to withdraw
//      uint64 amount; // amount to be withdrawn
//  
//      longstring reference;
//  
//      //: Total fee to pay, contains fixed amount and calculated percent of the withdrawn amount
//      Fee fee; // expected fee to be paid
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//  
//      //: Reserved for future use
//      EmptyExt ext;
//  };

//  ===========================================================================
open class DestructionOp(
    var securityType: org.tokend.wallet.xdr.Uint32,
    var balance: org.tokend.wallet.xdr.BalanceID,
    var amount: org.tokend.wallet.xdr.Uint64,
    var reference: org.tokend.wallet.xdr.Longstring,
    var fee: org.tokend.wallet.xdr.Fee,
    var creatorDetails: org.tokend.wallet.xdr.Longstring,
    var ext: org.tokend.wallet.xdr.EmptyExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    securityType.toXdr(stream)
    balance.toXdr(stream)
    amount.toXdr(stream)
    reference.toXdr(stream)
    fee.toXdr(stream)
    creatorDetails.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<DestructionOp> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: Destruction operation result codes
//  enum DestructionResultCode
//  {
//      // codes considered as "success" for the operation
//      //: Destruction operation successfully applied
//      SUCCESS = 0,
//  
//      // codes considered as "failure" for the operation
//      //: Trying to create a withdrawal with a 0 amount 
//      INVALID_AMOUNT = -1,
//      //: Creator details are not in a valid JSON format
//      INVALID_CREATOR_DETAILS = -2,
//      //: Source balance to withdraw from is not found 
//      BALANCE_NOT_FOUND = -3, // balance not found
//      //: Asset cannot be withdrawn because AssetPolicy::WITHDRAWABLE is not set
//      ASSET_IS_NOT_WITHDRAWABLE = -4,
//      //: Expected fee and actual fee mismatch
//      FEE_MISMATCHED = -5,
//      //: Trying to lock balance, locked amount would exceed UINT64_MAX
//      BALANCE_LOCK_OVERFLOW = -6,
//      //: Insufficient balance to withdraw the requested amount
//      UNDERFUNDED = -7,
//      //: Applying operation would overflow statistics
//      STATS_OVERFLOW = -8,
//      //: Applying operation would exceed limits set in the system
//      LIMITS_EXCEEDED = -9,
//      //: Amount withdrawn is smaller than the minimal withdrawable amount set in the system
//      LOWER_BOUND_NOT_EXCEEDED = -10,
//      REFERENCE_DUPLICATION = -11
//  };

//  ===========================================================================
public enum class DestructionResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  INVALID_AMOUNT(-1),
  INVALID_CREATOR_DETAILS(-2),
  BALANCE_NOT_FOUND(-3),
  ASSET_IS_NOT_WITHDRAWABLE(-4),
  FEE_MISMATCHED(-5),
  BALANCE_LOCK_OVERFLOW(-6),
  UNDERFUNDED(-7),
  STATS_OVERFLOW(-8),
  LIMITS_EXCEEDED(-9),
  LOWER_BOUND_NOT_EXCEEDED(-10),
  REFERENCE_DUPLICATION(-11),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<DestructionResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: Result of the successful withdrawal request creation
//  struct DestructionSuccess {
//      //: Account address of the receiver
//      AccountID targetAccount;
//      BalanceID targetBalance;
//  
//      uint64 actualAmount;
//      //: Paid fee
//      Fee fee;
//  
//      EmptyExt ext;
//  };

//  ===========================================================================
open class DestructionSuccess(
    var targetAccount: org.tokend.wallet.xdr.AccountID,
    var targetBalance: org.tokend.wallet.xdr.BalanceID,
    var actualAmount: org.tokend.wallet.xdr.Uint64,
    var fee: org.tokend.wallet.xdr.Fee,
    var ext: org.tokend.wallet.xdr.EmptyExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    targetAccount.toXdr(stream)
    targetBalance.toXdr(stream)
    actualAmount.toXdr(stream)
    fee.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<DestructionSuccess> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: Result of applying Destruction operation along with the result code
//  union DestructionResult switch (DestructionResultCode code)
//  {
//      case SUCCESS:
//          DestructionSuccess success;
//      default:
//          void;
//  };

//  ===========================================================================
abstract class DestructionResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.DestructionResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<DestructionResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var success: org.tokend.wallet.xdr.DestructionSuccess): DestructionResult(org.tokend.wallet.xdr.DestructionResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  //: InitiateKYCRecoveryOp is used to start KYC recovery process
//  struct InitiateKYCRecoveryOp
//  {
//      //: Address of account to be recovered
//      AccountID account;
//      //: New signer to set
//      PublicKey signer;
//  
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
open class InitiateKYCRecoveryOp(
    var account: org.tokend.wallet.xdr.AccountID,
    var signer: org.tokend.wallet.xdr.PublicKey,
    var ext: InitiateKYCRecoveryOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    account.toXdr(stream)
    signer.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<InitiateKYCRecoveryOp> by ReflectiveXdrDecoder.wrapType()

  abstract class InitiateKYCRecoveryOpExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<InitiateKYCRecoveryOpExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: InitiateKYCRecoveryOpExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  //: Result codes of InitiateKYCRecoveryOp
//  enum InitiateKYCRecoveryResultCode
//  {
//      //: Means that KYC recovery was successfully initiated
//      SUCCESS = 0,
//  
//      //: System configuration forbids KYC recovery
//      RECOVERY_NOT_ALLOWED = -1,
//      //: Either, there is no entry by key `kyc_recovery_signer_role`, or such role does not exists
//      RECOVERY_SIGNER_ROLE_NOT_FOUND = -2
//  };

//  ===========================================================================
public enum class InitiateKYCRecoveryResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  RECOVERY_NOT_ALLOWED(-1),
  RECOVERY_SIGNER_ROLE_NOT_FOUND(-2),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<InitiateKYCRecoveryResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: Result of operation applying
//  union InitiateKYCRecoveryResult switch (InitiateKYCRecoveryResultCode code)
//  {
//  case SUCCESS:
//      struct
//      {
//           //: reserved for future use
//           union switch (LedgerVersion v)
//           {
//           case EMPTY_VERSION:
//               void;
//           } ext;
//      } success;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class InitiateKYCRecoveryResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.InitiateKYCRecoveryResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<InitiateKYCRecoveryResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var success: InitiateKYCRecoveryResultSuccess): InitiateKYCRecoveryResult(org.tokend.wallet.xdr.InitiateKYCRecoveryResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }

  open class InitiateKYCRecoveryResultSuccess(
      var ext: InitiateKYCRecoveryResultSuccessExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<InitiateKYCRecoveryResultSuccess> by ReflectiveXdrDecoder.wrapType()

    abstract class InitiateKYCRecoveryResultSuccessExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
      override fun toXdr(stream: XdrDataOutputStream) {
          discriminant.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<InitiateKYCRecoveryResultSuccessExt> by ReflectiveXdrDecoder.wrapType()

      open class EmptyVersion: InitiateKYCRecoveryResultSuccessExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
    }
  }
}

// === xdr source ============================================================

//  //: IssuanceOp is used to issuance specified amount of asset to a receiver's balance
//  struct IssuanceOp
//  {
//      //: security type
//      uint32 securityType;
//  
//      //: Code of an asset to issuance
//      AssetCode asset;
//      //: Amount to issuance
//      uint64 amount;
//  
//      MovementDestination destination;
//  
//      longstring reference;
//  
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details of the issuance (External system id, etc.)
//      //: Total fee to pay, consists of fixed fee and percent fee, calculated automatically
//      Fee fee; //totalFee to be payed (calculated automatically)
//      //: Reserved for future use
//      EmptyExt ext;
//  };

//  ===========================================================================
open class IssuanceOp(
    var securityType: org.tokend.wallet.xdr.Uint32,
    var asset: org.tokend.wallet.xdr.AssetCode,
    var amount: org.tokend.wallet.xdr.Uint64,
    var destination: org.tokend.wallet.xdr.MovementDestination,
    var reference: org.tokend.wallet.xdr.Longstring,
    var creatorDetails: org.tokend.wallet.xdr.Longstring,
    var fee: org.tokend.wallet.xdr.Fee,
    var ext: org.tokend.wallet.xdr.EmptyExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    securityType.toXdr(stream)
    asset.toXdr(stream)
    amount.toXdr(stream)
    destination.toXdr(stream)
    reference.toXdr(stream)
    creatorDetails.toXdr(stream)
    fee.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<IssuanceOp> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: Result codes of the IssuanceOp
//  enum IssuanceResultCode
//  {
//      // codes considered as "success" for the operation
//      //: Issuance operation application was successful
//      SUCCESS = 0,
//      
//      // codes considered as "failure" for the operation
//      //: Asset to issuance is not found
//      ASSET_NOT_FOUND = -1,
//      //: Trying to create an issuance request with negative/zero amount
//      INVALID_AMOUNT = -2,
//      //: Either the target balance is not found or there is a mismatch between the target balance asset and an asset in the request
//      NO_COUNTERPARTY = -4,
//      //: Source of operation is not an owner of the asset 
//      NOT_AUTHORIZED = -5,
//      //: Issuanced amount plus amount to issuance will exceed max issuance amount
//      EXCEEDS_MAX_ISSUANCE_AMOUNT = -6,
//      //: Amount to issuance plus amount on balance would exceed UINT64_MAX 
//      RECEIVER_FULL_LINE = -7,
//      //: Creator details are not valid JSON
//      INVALID_CREATOR_DETAILS = -8,
//      //: Fee is greater than the amount to issuance
//      FEE_EXCEEDS_AMOUNT = -9,
//      INVALID_AMOUNT_PRECISION = -10
//  };

//  ===========================================================================
public enum class IssuanceResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  ASSET_NOT_FOUND(-1),
  INVALID_AMOUNT(-2),
  NO_COUNTERPARTY(-4),
  NOT_AUTHORIZED(-5),
  EXCEEDS_MAX_ISSUANCE_AMOUNT(-6),
  RECEIVER_FULL_LINE(-7),
  INVALID_CREATOR_DETAILS(-8),
  FEE_EXCEEDS_AMOUNT(-9),
  INVALID_AMOUNT_PRECISION(-10),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<IssuanceResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //:Result of successful application of Issuance operation
//  struct IssuanceSuccess {
//  
//      //: Account address of the receiver
//      AccountID receiver;
//      BalanceID receiverBalance;
//  
//      //: Paid fee
//      Fee fee;
//      //: Reserved for future use
//      EmptyExt ext;
//  };

//  ===========================================================================
open class IssuanceSuccess(
    var receiver: org.tokend.wallet.xdr.AccountID,
    var receiverBalance: org.tokend.wallet.xdr.BalanceID,
    var fee: org.tokend.wallet.xdr.Fee,
    var ext: org.tokend.wallet.xdr.EmptyExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    receiver.toXdr(stream)
    receiverBalance.toXdr(stream)
    fee.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<IssuanceSuccess> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: Create issuance request result with result code
//  union IssuanceResult switch (IssuanceResultCode code)
//  {
//  case SUCCESS:
//      IssuanceSuccess success;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class IssuanceResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.IssuanceResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<IssuanceResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var success: org.tokend.wallet.xdr.IssuanceSuccess): IssuanceResult(org.tokend.wallet.xdr.IssuanceResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  //: KYCRecoveryOp to create KYC recovery request and set new signers for account
//  struct KYCRecoveryOp
//  {
//      //: Account for which signers will be set
//      AccountID targetAccount;
//      //: New signers to set
//      SignerData signersData<>;
//  
//       //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//  
//      EmptyExt ext;
//  };

//  ===========================================================================
open class KYCRecoveryOp(
    var targetAccount: org.tokend.wallet.xdr.AccountID,
    var signersData: kotlin.Array<org.tokend.wallet.xdr.SignerData>,
    var creatorDetails: org.tokend.wallet.xdr.Longstring,
    var ext: org.tokend.wallet.xdr.EmptyExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    targetAccount.toXdr(stream)
    signersData.size.toXdr(stream)
    signersData.forEach {
      it.toXdr(stream)
    }
    creatorDetails.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<KYCRecoveryOp> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: Result codes of KYCRecoveryOp
//  enum KYCRecoveryResultCode
//  {
//      //: KYC Recovery request was successfully created
//      SUCCESS = 0,
//  
//      //: Creator details are not in a valid JSON format
//      INVALID_CREATOR_DETAILS = -1,
//      //: Not allowed to provide empty slice of signers
//      NO_SIGNER_DATA = -2,
//      //: SignerData contains duplicates
//      SIGNER_DUPLICATION = -3,
//      //: Signer has weight > threshold
//      INVALID_WEIGHT = -4,
//      //: Signer has invalid details
//      INVALID_DETAILS = -5,
//      //: Account with provided account address does not exist
//      TARGET_ACCOUNT_NOT_FOUND = -9,
//      //: System configuration forbids KYC recovery
//      RECOVERY_NOT_ALLOWED = -10
//  };

//  ===========================================================================
public enum class KYCRecoveryResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  INVALID_CREATOR_DETAILS(-1),
  NO_SIGNER_DATA(-2),
  SIGNER_DUPLICATION(-3),
  INVALID_WEIGHT(-4),
  INVALID_DETAILS(-5),
  TARGET_ACCOUNT_NOT_FOUND(-9),
  RECOVERY_NOT_ALLOWED(-10),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<KYCRecoveryResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: Result of operation applying
//  union KYCRecoveryResult switch (KYCRecoveryResultCode code)
//  {
//  case SUCCESS:
//      //: Is used to pass useful params if operation is success
//      struct {
//          //: reserved for future use
//          EmptyExt ext;
//      } success;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class KYCRecoveryResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.KYCRecoveryResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<KYCRecoveryResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var success: KYCRecoveryResultSuccess): KYCRecoveryResult(org.tokend.wallet.xdr.KYCRecoveryResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }

  open class KYCRecoveryResultSuccess(
      var ext: org.tokend.wallet.xdr.EmptyExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<KYCRecoveryResultSuccess> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  struct PaymentFeeData {
//      //: Fee to pay by source balance
//      Fee sourceFee;
//      //: Fee kept from destination account/balance
//      Fee destinationFee;
//      //: Indicates whether or not the source of payment pays the destination fee
//      bool sourcePaysForDest;
//  
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class PaymentFeeData(
    var sourceFee: org.tokend.wallet.xdr.Fee,
    var destinationFee: org.tokend.wallet.xdr.Fee,
    var sourcePaysForDest: kotlin.Boolean,
    var ext: PaymentFeeDataExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    sourceFee.toXdr(stream)
    destinationFee.toXdr(stream)
    sourcePaysForDest.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<PaymentFeeData> by ReflectiveXdrDecoder.wrapType()

  abstract class PaymentFeeDataExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<PaymentFeeDataExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: PaymentFeeDataExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  //: PaymentOp is used to transfer some amount of asset from the source balance to destination account/balance
//  struct PaymentOp
//  {
//      //: ID of the source balance of payment
//      BalanceID sourceBalanceID;
//  
//      uint32 securityType;
//  
//      //: `destination` defines the type of instance that receives the payment based on given PaymentDestinationType
//      MovementDestination destination;
//  
//      //: Amount of payment
//      uint64 amount;
//  
//      //: `feeData` defines all data about the payment fee
//      PaymentFeeData feeData;
//  
//      //: `subject` is a user-provided info about the real-life purpose of payment
//      longstring subject;
//      //: `reference` is a string formed by a payment sender. `Reference-sender account` pair is unique.
//      longstring reference;
//  
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class PaymentOp(
    var sourceBalanceID: org.tokend.wallet.xdr.BalanceID,
    var securityType: org.tokend.wallet.xdr.Uint32,
    var destination: org.tokend.wallet.xdr.MovementDestination,
    var amount: org.tokend.wallet.xdr.Uint64,
    var feeData: org.tokend.wallet.xdr.PaymentFeeData,
    var subject: org.tokend.wallet.xdr.Longstring,
    var reference: org.tokend.wallet.xdr.Longstring,
    var ext: PaymentOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    sourceBalanceID.toXdr(stream)
    securityType.toXdr(stream)
    destination.toXdr(stream)
    amount.toXdr(stream)
    feeData.toXdr(stream)
    subject.toXdr(stream)
    reference.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<PaymentOp> by ReflectiveXdrDecoder.wrapType()

  abstract class PaymentOpExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<PaymentOpExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: PaymentOpExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum PaymentResultCode
//  {
//      // codes considered as "success" for the operation
//      //: Payment was successfully completed
//      SUCCESS = 0, // payment successfully completed
//  
//      // codes considered as "failure" for the operation
//      //: Payment sender balance ID and payment receiver balance ID are equal or reference is longer than 64 symbols
//      MALFORMED = -1,
//      //: Not enough funds in the source account
//      UNDERFUNDED = -2,
//      //: After the payment fulfillment, the destination balance will exceed the limit (total amount on the balance will be greater than UINT64_MAX)
//      LINE_FULL = -3,
//      //: There is no balance found with an ID provided in `destinations.balanceID`
//      DESTINATION_BALANCE_NOT_FOUND = -4,
//      //: Sender balance asset and receiver balance asset are not equal
//      BALANCE_ASSETS_MISMATCHED = -5,
//      //: There is no balance found with ID provided in `sourceBalanceID`
//      SRC_BALANCE_NOT_FOUND = -6,
//      //: Pair `reference-sender account` of the payment is not unique
//      REFERENCE_DUPLICATION = -7,
//      //: Stats entry exceeded account limits
//      STATS_OVERFLOW = -8,
//      //: Account will exceed its limits after the payment is fulfilled
//      LIMITS_EXCEEDED = -9,
//      //: Payment asset does not have a `TRANSFERABLE` policy set
//      NOT_ALLOWED_BY_ASSET_POLICY = -10,
//      //: Overflow during total fee calculation
//      INVALID_DESTINATION_FEE = -11,
//      //: Payment fee amount is insufficient
//      INSUFFICIENT_FEE_AMOUNT = -12,
//      //: Fee charged from destination balance is greater than the payment amount
//      PAYMENT_AMOUNT_IS_LESS_THAN_DEST_FEE = -13,
//      //: There is no account found with an ID provided in `destination.accountID`
//      DESTINATION_ACCOUNT_NOT_FOUND = -14,
//      //: Amount precision and asset precision are mismatched
//      INCORRECT_AMOUNT_PRECISION = -15
//  };

//  ===========================================================================
public enum class PaymentResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  MALFORMED(-1),
  UNDERFUNDED(-2),
  LINE_FULL(-3),
  DESTINATION_BALANCE_NOT_FOUND(-4),
  BALANCE_ASSETS_MISMATCHED(-5),
  SRC_BALANCE_NOT_FOUND(-6),
  REFERENCE_DUPLICATION(-7),
  STATS_OVERFLOW(-8),
  LIMITS_EXCEEDED(-9),
  NOT_ALLOWED_BY_ASSET_POLICY(-10),
  INVALID_DESTINATION_FEE(-11),
  INSUFFICIENT_FEE_AMOUNT(-12),
  PAYMENT_AMOUNT_IS_LESS_THAN_DEST_FEE(-13),
  DESTINATION_ACCOUNT_NOT_FOUND(-14),
  INCORRECT_AMOUNT_PRECISION(-15),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<PaymentResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: `PaymentResponse` defines the response on the corresponding PaymentOp
//  struct PaymentSuccess {
//      //: ID of the destination account
//      AccountID destination;
//      //: ID of the destination balance
//      BalanceID destinationBalanceID;
//  
//      //: Code of an asset used in payment
//      AssetCode asset;
//      //: Actual amount received
//      uint64 amountReceived;
//  
//      //: Fee charged from the source balance
//      Fee actualSourcePaymentFee;
//      //: Fee charged from the destination balance
//      Fee actualDestinationPaymentFee;
//  
//      //: reserved for future use
//      EmptyExt ext;
//  };

//  ===========================================================================
open class PaymentSuccess(
    var destination: org.tokend.wallet.xdr.AccountID,
    var destinationBalanceID: org.tokend.wallet.xdr.BalanceID,
    var asset: org.tokend.wallet.xdr.AssetCode,
    var amountReceived: org.tokend.wallet.xdr.Uint64,
    var actualSourcePaymentFee: org.tokend.wallet.xdr.Fee,
    var actualDestinationPaymentFee: org.tokend.wallet.xdr.Fee,
    var ext: org.tokend.wallet.xdr.EmptyExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    destination.toXdr(stream)
    destinationBalanceID.toXdr(stream)
    asset.toXdr(stream)
    amountReceived.toXdr(stream)
    actualSourcePaymentFee.toXdr(stream)
    actualDestinationPaymentFee.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<PaymentSuccess> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  union PaymentResult switch (PaymentResultCode code)
//  {
//  case SUCCESS:
//      PaymentSuccess paymentSuccess;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class PaymentResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.PaymentResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<PaymentResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var paymentSuccess: org.tokend.wallet.xdr.PaymentSuccess): PaymentResult(org.tokend.wallet.xdr.PaymentResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      paymentSuccess.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  //: `PutKeyValueOp` is used to update the key-value entry present in the system
//      struct PutKeyValueOp
//      {
//          //: `key` is the key for KeyValueEntry
//          longstring key;
//          KeyValueEntryValue value;
//  
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//              case EMPTY_VERSION:
//                  void;
//          }
//          ext;
//      };

//  ===========================================================================
open class PutKeyValueOp(
    var key: org.tokend.wallet.xdr.Longstring,
    var value: org.tokend.wallet.xdr.KeyValueEntryValue,
    var ext: PutKeyValueOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    key.toXdr(stream)
    value.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<PutKeyValueOp> by ReflectiveXdrDecoder.wrapType()

  abstract class PutKeyValueOpExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<PutKeyValueOpExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: PutKeyValueOpExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  //: `PutKeyValueSuccess` represents details returned after the successful application of `PutKeyValueOp`
//      struct PutKeyValueSuccess
//      {
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//              case EMPTY_VERSION:
//                  void;
//          }
//          ext;
//      };

//  ===========================================================================
open class PutKeyValueSuccess(
    var ext: PutKeyValueSuccessExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<PutKeyValueSuccess> by ReflectiveXdrDecoder.wrapType()

  abstract class PutKeyValueSuccessExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<PutKeyValueSuccessExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: PutKeyValueSuccessExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  //: Result codes for `PutKeyValueOp`
//      enum PutKeyValueResultCode
//      {
//          //: `PutKeyValueOp` is applied successfully
//          SUCCESS = 0,
//          //: Value type of the key-value entry is forbidden for the provided key
//          INVALID_TYPE = -1,
//          //: value is forbidden for the provided key
//          VALUE_NOT_ALLOWED = -2
//      };

//  ===========================================================================
public enum class PutKeyValueResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  INVALID_TYPE(-1),
  VALUE_NOT_ALLOWED(-2),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<PutKeyValueResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: `PutKeyValueResult` represents the result of PutKeyValueOp
//      union PutKeyValueResult switch (PutKeyValueResultCode code)
//      {
//          case SUCCESS:
//              PutKeyValueSuccess success;
//          default:
//              void;
//      };

//  ===========================================================================
abstract class PutKeyValueResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.PutKeyValueResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<PutKeyValueResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var success: org.tokend.wallet.xdr.PutKeyValueSuccess): PutKeyValueResult(org.tokend.wallet.xdr.PutKeyValueResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  struct RemoveDataOp 
//  {
//      uint64 dataID;
//  
//      EmptyExt ext;
//  };

//  ===========================================================================
open class RemoveDataOp(
    var dataID: org.tokend.wallet.xdr.Uint64,
    var ext: org.tokend.wallet.xdr.EmptyExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    dataID.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<RemoveDataOp> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  enum RemoveDataResultCode 
//  {
//      SUCCESS = 0,
//  
//      NOT_FOUND = -1,
//      NOT_ALLOWED = -2
//  };

//  ===========================================================================
public enum class RemoveDataResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  NOT_FOUND(-1),
  NOT_ALLOWED(-2),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<RemoveDataResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  union RemoveDataResult switch (RemoveDataResultCode code)
//  {
//  case SUCCESS:
//      EmptyExt ext;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class RemoveDataResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.RemoveDataResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<RemoveDataResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var ext: org.tokend.wallet.xdr.EmptyExt): RemoveDataResult(org.tokend.wallet.xdr.RemoveDataResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  //: `RemoveKeyValueOp` is used to remove key-value entry present in the system by key
//      struct RemoveKeyValueOp
//      {
//          //: `key` is the key for KeyValueEntry
//          longstring key;
//  
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//              case EMPTY_VERSION:
//                  void;
//          }
//          ext;
//      };

//  ===========================================================================
open class RemoveKeyValueOp(
    var key: org.tokend.wallet.xdr.Longstring,
    var ext: RemoveKeyValueOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    key.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<RemoveKeyValueOp> by ReflectiveXdrDecoder.wrapType()

  abstract class RemoveKeyValueOpExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RemoveKeyValueOpExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: RemoveKeyValueOpExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  //: `RemoveKeyValueSuccess` represents details returned after the successful application of `RemoveKeyValueOp`
//      struct RemoveKeyValueSuccess
//      {
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//              case EMPTY_VERSION:
//                  void;
//          }
//          ext;
//      };

//  ===========================================================================
open class RemoveKeyValueSuccess(
    var ext: RemoveKeyValueSuccessExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<RemoveKeyValueSuccess> by ReflectiveXdrDecoder.wrapType()

  abstract class RemoveKeyValueSuccessExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RemoveKeyValueSuccessExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: RemoveKeyValueSuccessExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  //: Result codes for `RemoveKeyValueOp`
//      enum RemoveKeyValueResultCode
//      {
//          //: `RemoveKeyValueOp` is applied successfully
//          SUCCESS = 0,
//          //: There is no key value with such key
//          NOT_FOUND = -1
//      };

//  ===========================================================================
public enum class RemoveKeyValueResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  NOT_FOUND(-1),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<RemoveKeyValueResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: `RemoveKeyValueResult` represents the result of RemoveKeyValueOp
//      union RemoveKeyValueResult switch (RemoveKeyValueResultCode code)
//      {
//          case SUCCESS:
//              RemoveKeyValueSuccess success;
//          default:
//              void;
//      };

//  ===========================================================================
abstract class RemoveKeyValueResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.RemoveKeyValueResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<RemoveKeyValueResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var success: org.tokend.wallet.xdr.RemoveKeyValueSuccess): RemoveKeyValueResult(org.tokend.wallet.xdr.RemoveKeyValueResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  struct RemoveReviewableRequestOp
//  {
//      uint64 requestID;
//  
//      EmptyExt ext;
//  };

//  ===========================================================================
open class RemoveReviewableRequestOp(
    var requestID: org.tokend.wallet.xdr.Uint64,
    var ext: org.tokend.wallet.xdr.EmptyExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    requestID.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<RemoveReviewableRequestOp> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  enum RemoveReviewableRequestResultCode
//  {
//      SUCCESS = 0,
//  
//  
//      NOT_FOUND = -1
//  };

//  ===========================================================================
public enum class RemoveReviewableRequestResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  NOT_FOUND(-1),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<RemoveReviewableRequestResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  union RemoveReviewableRequestResult switch (RemoveReviewableRequestResultCode code)
//  {
//  case SUCCESS:
//      EmptyExt ext;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class RemoveReviewableRequestResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.RemoveReviewableRequestResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<RemoveReviewableRequestResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var ext: org.tokend.wallet.xdr.EmptyExt): RemoveReviewableRequestResult(org.tokend.wallet.xdr.RemoveReviewableRequestResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  //: RemoveSignerRoleData is used to pass necessary params to remove existing signer role
//  struct RemoveRoleOp
//  {
//      //: Identifier of an existing signer role
//      uint64 roleID;
//  
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
open class RemoveRoleOp(
    var roleID: org.tokend.wallet.xdr.Uint64,
    var ext: RemoveRoleOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    roleID.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<RemoveRoleOp> by ReflectiveXdrDecoder.wrapType()

  abstract class RemoveRoleOpExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RemoveRoleOpExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: RemoveRoleOpExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  //: Result codes of ManageSignerRoleResultCode
//  enum RemoveRoleResultCode
//  {
//      //: Means that the specified action in `data` of ManageSignerRoleOp was successfully executed
//      SUCCESS = 0,
//  
//      // codes considered as "failure" for the operation
//      //: There is no signer role with such id or the source cannot manage a role
//      NOT_FOUND = -1, // does not exist or owner mismatched
//      //: It is not allowed to remove role if it is attached to at least one singer
//      ROLE_IS_USED = -2
//  };

//  ===========================================================================
public enum class RemoveRoleResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  NOT_FOUND(-1),
  ROLE_IS_USED(-2),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<RemoveRoleResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: Result of operation application
//  union RemoveRoleResult switch (RemoveRoleResultCode code)
//  {
//  case SUCCESS:
//      EmptyExt ext;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class RemoveRoleResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.RemoveRoleResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<RemoveRoleResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var ext: org.tokend.wallet.xdr.EmptyExt): RemoveRoleResult(org.tokend.wallet.xdr.RemoveRoleResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  //: RemoveSignerRuleData is used to pass necessary params to remove existing signer rule
//  struct RemoveRuleOp
//  {
//      //: Identifier of an existing signer rule
//      uint64 ruleID;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
open class RemoveRuleOp(
    var ruleID: org.tokend.wallet.xdr.Uint64,
    var ext: RemoveRuleOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    ruleID.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<RemoveRuleOp> by ReflectiveXdrDecoder.wrapType()

  abstract class RemoveRuleOpExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RemoveRuleOpExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: RemoveRuleOpExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  //: Result codes of ManageSignerRuleOp
//  enum RemoveRuleResultCode
//  {
//      //: Specified action in `data` of ManageSignerRuleOp was successfully executed
//      SUCCESS = 0,
//  
//      // codes considered as "failure" for the operation
//      //: There is no signer rule with such id or source cannot manage the rule
//      NOT_FOUND = -1, // does not exists or owner mismatched
//      //: It is not allowed to remove the rule if it is attached to at least one role
//      RULE_IS_USED = -2
//  };

//  ===========================================================================
public enum class RemoveRuleResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  NOT_FOUND(-1),
  RULE_IS_USED(-2),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<RemoveRuleResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: Result of operation application
//  union RemoveRuleResult switch (RemoveRuleResultCode code)
//  {
//  case SUCCESS:
//      EmptyExt ext;
//  case RULE_IS_USED:
//      //: ids of roles which use a rule that cannot be removed
//      uint64 roleIDs<>;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class RemoveRuleResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.RemoveRuleResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<RemoveRuleResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var ext: org.tokend.wallet.xdr.EmptyExt): RemoveRuleResult(org.tokend.wallet.xdr.RemoveRuleResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }

  open class RuleIsUsed(var roleIDs: kotlin.Array<org.tokend.wallet.xdr.Uint64>): RemoveRuleResult(org.tokend.wallet.xdr.RemoveRuleResultCode.RULE_IS_USED) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      roleIDs.size.toXdr(stream)
      roleIDs.forEach {
        it.toXdr(stream)
      }
    }

    companion object Decoder: XdrDecodable<RuleIsUsed> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  //: RemoveSignerData is used to pass necessary data to remove a signer
//  struct RemoveSignerOp
//  {
//      //: Public key of an existing signer
//      PublicKey publicKey;
//  
//      //: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
open class RemoveSignerOp(
    var publicKey: org.tokend.wallet.xdr.PublicKey,
    var ext: org.tokend.wallet.xdr.EmptyExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    publicKey.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<RemoveSignerOp> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: Result codes of ManageSignerOp
//  enum RemoveSignerResultCode
//  {
//      //: Specified action in `data` of ManageSignerOp was successfully executed
//      SUCCESS = 0,
//  
//      //: Source account does not have a signer with the provided public key
//      NOT_FOUND = -1 // there is no signer with such public key
//  };

//  ===========================================================================
public enum class RemoveSignerResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  NOT_FOUND(-1),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<RemoveSignerResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: Result of operation application
//  union RemoveSignerResult switch (RemoveSignerResultCode code)
//  {
//  case SUCCESS:
//      //: reserved for future extension
//      EmptyExt ext;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class RemoveSignerResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.RemoveSignerResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<RemoveSignerResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var ext: org.tokend.wallet.xdr.EmptyExt): RemoveSignerResult(org.tokend.wallet.xdr.RemoveSignerResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  //: Actions that can be performed on request that is being reviewed
//  enum ReviewRequestOpAction {
//      //: Approve request
//      APPROVE = 1,
//      //: Reject request
//      REJECT = 2,
//      //: Permanently reject request
//      PERMANENT_REJECT = 3
//  };

//  ===========================================================================
public enum class ReviewRequestOpAction(val value: kotlin.Int): XdrEncodable {
  APPROVE(1),
  REJECT(2),
  PERMANENT_REJECT(3),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<ReviewRequestOpAction> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: Review Request operation
//  struct ReviewRequestOp
//  {
//      //: ID of a request that is being reviewed
//      uint64 requestID;
//      //: Hash of a request that is being reviewed
//      Hash requestHash;
//  
//      //: Review action defines an action performed on the pending ReviewableRequest
//      ReviewRequestOpAction action;
//      //: Contains reject reason
//      longstring reason;
//  
//      //: Tasks to add to pending
//      uint64 tasksToAdd;
//      //: Tasks to remove from pending
//      uint64 tasksToRemove;
//      //: Details of the current review
//      longstring externalDetails;
//  
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class ReviewRequestOp(
    var requestID: org.tokend.wallet.xdr.Uint64,
    var requestHash: org.tokend.wallet.xdr.Hash,
    var action: org.tokend.wallet.xdr.ReviewRequestOpAction,
    var reason: org.tokend.wallet.xdr.Longstring,
    var tasksToAdd: org.tokend.wallet.xdr.Uint64,
    var tasksToRemove: org.tokend.wallet.xdr.Uint64,
    var externalDetails: org.tokend.wallet.xdr.Longstring,
    var ext: ReviewRequestOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    requestID.toXdr(stream)
    requestHash.toXdr(stream)
    action.toXdr(stream)
    reason.toXdr(stream)
    tasksToAdd.toXdr(stream)
    tasksToRemove.toXdr(stream)
    externalDetails.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<ReviewRequestOp> by ReflectiveXdrDecoder.wrapType()

  abstract class ReviewRequestOpExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<ReviewRequestOpExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: ReviewRequestOpExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  //: Result code of the ReviewRequest operation
//  enum ReviewRequestResultCode
//  {
//      //: Codes considered as "success" for an operation
//      //: Operation is applied successfuly 
//      SUCCESS = 0,
//  
//      //: Codes considered as "failure" for an operation
//      //: Reject reason must be empty on approve and not empty on reject/permanent 
//      INVALID_REASON = -1,
//      //: Unknown action to perform on ReviewableRequest
//      INVALID_ACTION = -2,
//      //: Actual hash of the request and provided hash are mismatched
//      HASH_MISMATCHED = -3,
//      //: ReviewableRequest is not found
//      NOT_FOUND = -4,
//      //: Actual type of a reviewable request and provided type are mismatched
//      TYPE_MISMATCHED = -5,
//      //: Reject is not allowed. Only permanent reject should be used
//      REJECT_NOT_ALLOWED = -6,
//      //: External details must be a valid JSON
//      INVALID_EXTERNAL_DETAILS = -7,
//      //: Source of ReviewableRequest is blocked
//      REQUESTOR_IS_BLOCKED = -8,
//      //: Permanent reject is not allowed. Only reject should be used
//      PERMANENT_REJECT_NOT_ALLOWED = -9,
//      //: Trying to remove tasks which are not set
//      REMOVING_NOT_SET_TASKS = -10,// cannot remove tasks which are not set
//      //: CheckValid or Confirm of operation is failed
//      INVALID_OPERATION = -11
//  };

//  ===========================================================================
public enum class ReviewRequestResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  INVALID_REASON(-1),
  INVALID_ACTION(-2),
  HASH_MISMATCHED(-3),
  NOT_FOUND(-4),
  TYPE_MISMATCHED(-5),
  REJECT_NOT_ALLOWED(-6),
  INVALID_EXTERNAL_DETAILS(-7),
  REQUESTOR_IS_BLOCKED(-8),
  PERMANENT_REJECT_NOT_ALLOWED(-9),
  REMOVING_NOT_SET_TASKS(-10),
  INVALID_OPERATION(-11),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<ReviewRequestResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: Extended result of a Review Request operation containing details specific to certain request types
//  struct ExtendedResult {
//      //: Indicates whether or not the request that is being reviewed was applied
//      bool fulfilled;
//  
//      OperationResult operationResults<>;
//  
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class ExtendedResult(
    var fulfilled: kotlin.Boolean,
    var operationResults: kotlin.Array<org.tokend.wallet.xdr.OperationResult>,
    var ext: ExtendedResultExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    fulfilled.toXdr(stream)
    operationResults.size.toXdr(stream)
    operationResults.forEach {
      it.toXdr(stream)
    }
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<ExtendedResult> by ReflectiveXdrDecoder.wrapType()

  abstract class ExtendedResultExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<ExtendedResultExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: ExtendedResultExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  //: Result of applying the review request with result code
//  union ReviewRequestResult switch (ReviewRequestResultCode code)
//  {
//  case SUCCESS:
//      ExtendedResult success;
//  case INVALID_OPERATION:
//      OperationResult operationResult;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class ReviewRequestResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.ReviewRequestResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<ReviewRequestResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var success: org.tokend.wallet.xdr.ExtendedResult): ReviewRequestResult(org.tokend.wallet.xdr.ReviewRequestResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      success.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }

  open class InvalidOperation(var operationResult: org.tokend.wallet.xdr.OperationResult): ReviewRequestResult(org.tokend.wallet.xdr.ReviewRequestResultCode.INVALID_OPERATION) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      operationResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<InvalidOperation> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  struct UpdateAssetOp 
//  {
//      AssetCode code;
//      longstring *details;
//  	uint64 *maxIssuanceAmount;
//  	uint32 *state;
//  
//      EmptyExt ext;
//  };

//  ===========================================================================
open class UpdateAssetOp(
    var code: org.tokend.wallet.xdr.AssetCode,
    @XdrOptionalField
    var details: org.tokend.wallet.xdr.Longstring?,
    @XdrOptionalField
    var maxIssuanceAmount: org.tokend.wallet.xdr.Uint64?,
    @XdrOptionalField
    var state: org.tokend.wallet.xdr.Uint32?,
    var ext: org.tokend.wallet.xdr.EmptyExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    code.toXdr(stream)
    if (details != null) {
      true.toXdr(stream)
      details?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    if (maxIssuanceAmount != null) {
      true.toXdr(stream)
      maxIssuanceAmount?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    if (state != null) {
      true.toXdr(stream)
      state?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<UpdateAssetOp> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  enum UpdateAssetResultCode 
//  {
//      SUCCESS = 0,
//  
//      NOT_FOUND = -1,
//      INVALID_DETAILS = -2,
//      UNSUFFICIENT_MAX_ISSUANCE_AMOUNT = -3,
//      NOT_DEFINED_UPDATE = -4
//  };

//  ===========================================================================
public enum class UpdateAssetResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  NOT_FOUND(-1),
  INVALID_DETAILS(-2),
  UNSUFFICIENT_MAX_ISSUANCE_AMOUNT(-3),
  NOT_DEFINED_UPDATE(-4),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<UpdateAssetResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  union UpdateAssetResult switch(UpdateAssetResultCode code) 
//  {
//  case SUCCESS:
//      EmptyExt ext;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class UpdateAssetResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.UpdateAssetResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<UpdateAssetResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var ext: org.tokend.wallet.xdr.EmptyExt): UpdateAssetResult(org.tokend.wallet.xdr.UpdateAssetResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  struct UpdateDataOp 
//  {
//      uint64 dataID;
//  
//      longstring value;
//  
//      EmptyExt ext;
//  };

//  ===========================================================================
open class UpdateDataOp(
    var dataID: org.tokend.wallet.xdr.Uint64,
    var value: org.tokend.wallet.xdr.Longstring,
    var ext: org.tokend.wallet.xdr.EmptyExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    dataID.toXdr(stream)
    value.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<UpdateDataOp> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  enum UpdateDataResultCode 
//  {
//      SUCCESS = 0,
//  
//      INVALID_DATA = -1,
//      NOT_FOUND = -2,
//      NOT_ALLOWED = -3
//  };

//  ===========================================================================
public enum class UpdateDataResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  INVALID_DATA(-1),
  NOT_FOUND(-2),
  NOT_ALLOWED(-3),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<UpdateDataResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  union UpdateDataResult switch (UpdateDataResultCode code)
//  {
//  case SUCCESS:
//      EmptyExt ext;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class UpdateDataResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.UpdateDataResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<UpdateDataResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var ext: org.tokend.wallet.xdr.EmptyExt): UpdateDataResult(org.tokend.wallet.xdr.UpdateDataResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  struct UpdateReviewableRequestOp
//  {
//      uint64 requestID;
//  
//      ReviewableRequestOperation operations<>;
//  
//      EmptyExt ext;
//  };

//  ===========================================================================
open class UpdateReviewableRequestOp(
    var requestID: org.tokend.wallet.xdr.Uint64,
    var operations: kotlin.Array<org.tokend.wallet.xdr.ReviewableRequestOperation>,
    var ext: org.tokend.wallet.xdr.EmptyExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    requestID.toXdr(stream)
    operations.size.toXdr(stream)
    operations.forEach {
      it.toXdr(stream)
    }
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<UpdateReviewableRequestOp> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  enum UpdateReviewableRequestResultCode
//  {
//      SUCCESS = 0,
//  
//      INVALID_OPERATION = -1,
//      TASKS_NOT_FOUND = -2,
//      TOO_MANY_OPERATIONS = -3,
//      NOT_FOUND = -4,
//      SECURITY_TYPE_MISMATCH = -5
//  };

//  ===========================================================================
public enum class UpdateReviewableRequestResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  INVALID_OPERATION(-1),
  TASKS_NOT_FOUND(-2),
  TOO_MANY_OPERATIONS(-3),
  NOT_FOUND(-4),
  SECURITY_TYPE_MISMATCH(-5),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<UpdateReviewableRequestResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  union UpdateReviewableRequestResult switch (UpdateReviewableRequestResultCode code)
//  {
//  case SUCCESS:
//      EmptyExt ext;
//  case INVALID_OPERATION:
//      OperationResult operationResult;
//  case TOO_MANY_OPERATIONS:
//      uint32 maxOperationsCount;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class UpdateReviewableRequestResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.UpdateReviewableRequestResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<UpdateReviewableRequestResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var ext: org.tokend.wallet.xdr.EmptyExt): UpdateReviewableRequestResult(org.tokend.wallet.xdr.UpdateReviewableRequestResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }

  open class InvalidOperation(var operationResult: org.tokend.wallet.xdr.OperationResult): UpdateReviewableRequestResult(org.tokend.wallet.xdr.UpdateReviewableRequestResultCode.INVALID_OPERATION) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      operationResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<InvalidOperation> by ReflectiveXdrDecoder.wrapType()
  }

  open class TooManyOperations(var maxOperationsCount: org.tokend.wallet.xdr.Uint32): UpdateReviewableRequestResult(org.tokend.wallet.xdr.UpdateReviewableRequestResultCode.TOO_MANY_OPERATIONS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      maxOperationsCount.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<TooManyOperations> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  //: UpdateSignerRoleData is used to pass necessary params to update an existing signer role
//  struct UpdateRoleOp
//  {
//      //: ID of an existing signer role
//      uint64 roleID;
//      //: Array of ids of existing, unique and not default rules
//      uint64 ruleIDs<>;
//  
//      //: Arbitrary stringified json object with details to attach to the role
//      longstring details;
//  
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
open class UpdateRoleOp(
    var roleID: org.tokend.wallet.xdr.Uint64,
    var ruleIDs: kotlin.Array<org.tokend.wallet.xdr.Uint64>,
    var details: org.tokend.wallet.xdr.Longstring,
    var ext: UpdateRoleOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    roleID.toXdr(stream)
    ruleIDs.size.toXdr(stream)
    ruleIDs.forEach {
      it.toXdr(stream)
    }
    details.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<UpdateRoleOp> by ReflectiveXdrDecoder.wrapType()

  abstract class UpdateRoleOpExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<UpdateRoleOpExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: UpdateRoleOpExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  //: Result codes of ManageSignerRoleResultCode
//  enum UpdateRoleResultCode
//  {
//      //: Means that the specified action in `data` of ManageSignerRoleOp was successfully executed
//      SUCCESS = 0,
//  
//      // codes considered as "failure" for the operation
//      //: There is no signer role with such id or the source cannot manage a role
//      NOT_FOUND = -1, // does not exist or owner mismatched
//      //: Passed details have invalid json structure
//      INVALID_DETAILS = -2,
//      //: There is no rule with id passed through `ruleIDs`
//      NO_SUCH_RULE = -3,
//      //: It is not allowed to duplicate ids in `ruleIDs` array
//      RULE_ID_DUPLICATION = -4,
//      //: It is not allowed to pass ruleIDs that are more than maxSignerRuleCount (by default, 128)
//      TOO_MANY_RULE_IDS = -5
//  };

//  ===========================================================================
public enum class UpdateRoleResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  NOT_FOUND(-1),
  INVALID_DETAILS(-2),
  NO_SUCH_RULE(-3),
  RULE_ID_DUPLICATION(-4),
  TOO_MANY_RULE_IDS(-5),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<UpdateRoleResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: Result of operation application
//  union UpdateRoleResult switch (UpdateRoleResultCode code)
//  {
//  case SUCCESS:
//      EmptyExt ext;
//  case RULE_ID_DUPLICATION:
//  case NO_SUCH_RULE:
//      //: ID of a rule that was either duplicated or is default or does not exist
//      uint64 ruleID;
//  case TOO_MANY_RULE_IDS:
//      //: max count of rule ids that can be passed in `ruleIDs` array
//      uint32 maxRuleIDsCount;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class UpdateRoleResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.UpdateRoleResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<UpdateRoleResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var ext: org.tokend.wallet.xdr.EmptyExt): UpdateRoleResult(org.tokend.wallet.xdr.UpdateRoleResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }

  open class RuleIdDuplication(var ruleID: org.tokend.wallet.xdr.Uint64): UpdateRoleResult(org.tokend.wallet.xdr.UpdateRoleResultCode.RULE_ID_DUPLICATION) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      ruleID.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RuleIdDuplication> by ReflectiveXdrDecoder.wrapType()
  }

  open class NoSuchRule(var ruleID: org.tokend.wallet.xdr.Uint64): UpdateRoleResult(org.tokend.wallet.xdr.UpdateRoleResultCode.NO_SUCH_RULE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      ruleID.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<NoSuchRule> by ReflectiveXdrDecoder.wrapType()
  }

  open class TooManyRuleIds(var maxRuleIDsCount: org.tokend.wallet.xdr.Uint32): UpdateRoleResult(org.tokend.wallet.xdr.UpdateRoleResultCode.TOO_MANY_RULE_IDS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      maxRuleIDsCount.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<TooManyRuleIds> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  //: UpdateSignerRuleData is used to pass necessary params to update an existing signer rule
//  struct UpdateRuleOp
//  {
//      //: Identifier of an existing signer rule
//      uint64 ruleID;
//      //: Resource is used to specify entity (for some, with properties) that can be managed through operations
//      RuleResource resource;
//      //: Value from enum that can be applied to `resource`
//      RuleAction action;
//      //: True means that such rule will be automatically added to each new or updated signer role
//      bool forbids;
//      //: Arbitrary stringified json object with details that will be attached to a rule
//      longstring details;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
open class UpdateRuleOp(
    var ruleID: org.tokend.wallet.xdr.Uint64,
    var resource: org.tokend.wallet.xdr.RuleResource,
    var action: org.tokend.wallet.xdr.RuleAction,
    var forbids: kotlin.Boolean,
    var details: org.tokend.wallet.xdr.Longstring,
    var ext: UpdateRuleOpExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    ruleID.toXdr(stream)
    resource.toXdr(stream)
    action.toXdr(stream)
    forbids.toXdr(stream)
    details.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<UpdateRuleOp> by ReflectiveXdrDecoder.wrapType()

  abstract class UpdateRuleOpExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<UpdateRuleOpExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: UpdateRuleOpExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  //: Result codes of ManageSignerRuleOp
//  enum UpdateRuleResultCode
//  {
//      //: Specified action in `data` of ManageSignerRuleOp was successfully executed
//      SUCCESS = 0,
//  
//      // codes considered as "failure" for the operation
//      //: There is no signer rule with such id or source cannot manage the rule
//      NOT_FOUND = -1, // does not exists or owner mismatched
//      //: Passed details have invalid json structure
//      INVALID_DETAILS = -2,
//  
//      INVALID_CUSTOM_ACTION = -3,
//      INVALID_CUSTOM_RESOURCE = -4
//  };

//  ===========================================================================
public enum class UpdateRuleResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  NOT_FOUND(-1),
  INVALID_DETAILS(-2),
  INVALID_CUSTOM_ACTION(-3),
  INVALID_CUSTOM_RESOURCE(-4),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<UpdateRuleResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: Result of operation application
//  union UpdateRuleResult switch (UpdateRuleResultCode code)
//  {
//  case SUCCESS:
//      EmptyExt ext;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class UpdateRuleResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.UpdateRuleResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<UpdateRuleResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var ext: org.tokend.wallet.xdr.EmptyExt): UpdateRuleResult(org.tokend.wallet.xdr.UpdateRuleResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  struct UpdateSignerOp
//  {
//      SignerData data;
//  
//      EmptyExt ext;
//  };

//  ===========================================================================
open class UpdateSignerOp(
    var data: org.tokend.wallet.xdr.SignerData,
    var ext: org.tokend.wallet.xdr.EmptyExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    data.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<UpdateSignerOp> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  enum UpdateSignerResultCode
//  {
//      //: Specified action in `data` of ManageSignerOp was successfully executed
//      SUCCESS = 0,
//  
//      // codes considered as "failure" for the operation
//      //: Passed details have invalid json structure
//      INVALID_DETAILS = -1, // invalid json details
//      //: Source account does not have a signer with the provided public key
//      NOT_FOUND = -2, // there is no signer with such public key
//      //: There is no role with such id
//      NO_SUCH_ROLE = -3,
//      //: It is not allowed to set weight more than 1000
//      INVALID_WEIGHT = -4, // more than 1000
//      NO_ROLE_IDS = -5,
//      ROLE_ID_DUPLICATION = -6,
//      TOO_MANY_ROLES = -7
//  };

//  ===========================================================================
public enum class UpdateSignerResultCode(val value: kotlin.Int): XdrEncodable {
  SUCCESS(0),
  INVALID_DETAILS(-1),
  NOT_FOUND(-2),
  NO_SUCH_ROLE(-3),
  INVALID_WEIGHT(-4),
  NO_ROLE_IDS(-5),
  ROLE_ID_DUPLICATION(-6),
  TOO_MANY_ROLES(-7),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<UpdateSignerResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  union UpdateSignerResult switch (UpdateSignerResultCode code)
//  {
//  case SUCCESS:
//      EmptyExt ext;
//  case NO_SUCH_ROLE:
//  case ROLE_ID_DUPLICATION:
//      uint64 roleID;
//  case TOO_MANY_ROLES:
//      uint32 maxRolesCount;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class UpdateSignerResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.UpdateSignerResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<UpdateSignerResult> by ReflectiveXdrDecoder.wrapType()

  open class Success(var ext: org.tokend.wallet.xdr.EmptyExt): UpdateSignerResult(org.tokend.wallet.xdr.UpdateSignerResultCode.SUCCESS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Success> by ReflectiveXdrDecoder.wrapType()
  }

  open class NoSuchRole(var roleID: org.tokend.wallet.xdr.Uint64): UpdateSignerResult(org.tokend.wallet.xdr.UpdateSignerResultCode.NO_SUCH_ROLE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      roleID.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<NoSuchRole> by ReflectiveXdrDecoder.wrapType()
  }

  open class RoleIdDuplication(var roleID: org.tokend.wallet.xdr.Uint64): UpdateSignerResult(org.tokend.wallet.xdr.UpdateSignerResultCode.ROLE_ID_DUPLICATION) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      roleID.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RoleIdDuplication> by ReflectiveXdrDecoder.wrapType()
  }

  open class TooManyRoles(var maxRolesCount: org.tokend.wallet.xdr.Uint32): UpdateSignerResult(org.tokend.wallet.xdr.UpdateSignerResultCode.TOO_MANY_ROLES) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      maxRolesCount.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<TooManyRoles> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  enum ErrorCode
//  {
//      MISC = 0, // Unspecific error
//      DATA = 1, // Malformed data
//      CONF = 2, // Misconfiguration error
//      AUTH = 3, // Authentication failure
//      LOAD = 4  // System overloaded
//  };

//  ===========================================================================
public enum class ErrorCode(val value: kotlin.Int): XdrEncodable {
  MISC(0),
  DATA(1),
  CONF(2),
  AUTH(3),
  LOAD(4),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<ErrorCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  struct Error
//  {
//      ErrorCode code;
//      string msg<100>;
//  };

//  ===========================================================================
open class Error(
    var code: org.tokend.wallet.xdr.ErrorCode,
    var msg: kotlin.String
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    code.toXdr(stream)
    msg.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<Error> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  struct AuthCert
//  {
//      Curve25519Public pubkey;
//      uint64 expiration;
//      Signature sig;
//  };

//  ===========================================================================
open class AuthCert(
    var pubkey: org.tokend.wallet.xdr.Curve25519Public,
    var expiration: org.tokend.wallet.xdr.Uint64,
    var sig: org.tokend.wallet.xdr.Signature
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    pubkey.toXdr(stream)
    expiration.toXdr(stream)
    sig.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<AuthCert> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  struct Hello
//  {
//      uint32 ledgerVersion;
//      uint32 overlayVersion;
//      uint32 overlayMinVersion;
//      Hash networkID;
//      string versionStr<100>;
//      int listeningPort;
//      NodeID peerID;
//      AuthCert cert;
//      uint256 nonce;
//  };

//  ===========================================================================
open class Hello(
    var ledgerVersion: org.tokend.wallet.xdr.Uint32,
    var overlayVersion: org.tokend.wallet.xdr.Uint32,
    var overlayMinVersion: org.tokend.wallet.xdr.Uint32,
    var networkID: org.tokend.wallet.xdr.Hash,
    var versionStr: kotlin.String,
    var listeningPort: kotlin.Int,
    var peerID: org.tokend.wallet.xdr.NodeID,
    var cert: org.tokend.wallet.xdr.AuthCert,
    var nonce: org.tokend.wallet.xdr.Uint256
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    ledgerVersion.toXdr(stream)
    overlayVersion.toXdr(stream)
    overlayMinVersion.toXdr(stream)
    networkID.toXdr(stream)
    versionStr.toXdr(stream)
    listeningPort.toXdr(stream)
    peerID.toXdr(stream)
    cert.toXdr(stream)
    nonce.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<Hello> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  struct Auth
//  {
//      // Empty message, just to confirm
//      // establishment of MAC keys.
//      int unused;
//  };

//  ===========================================================================
open class Auth(
    var unused: kotlin.Int
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    unused.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<Auth> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  enum IPAddrType
//  {
//      IPv4 = 0,
//      IPv6 = 1
//  };

//  ===========================================================================
public enum class IPAddrType(val value: kotlin.Int): XdrEncodable {
  IPv4(0),
  IPv6(1),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<IPAddrType> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  struct PeerAddress
//  {
//      union switch (IPAddrType type)
//      {
//      case IPv4:
//          opaque ipv4[4];
//      case IPv6:
//          opaque ipv6[16];
//      }
//      ip;
//      uint32 port;
//      uint32 numFailures;
//  };

//  ===========================================================================
open class PeerAddress(
    var ip: PeerAddressIp,
    var port: org.tokend.wallet.xdr.Uint32,
    var numFailures: org.tokend.wallet.xdr.Uint32
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    ip.toXdr(stream)
    port.toXdr(stream)
    numFailures.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<PeerAddress> by ReflectiveXdrDecoder.wrapType()

  abstract class PeerAddressIp(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.IPAddrType): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<PeerAddressIp> by ReflectiveXdrDecoder.wrapType()

    open class Ipv4(var ipv4: XdrByteArrayFixed4): PeerAddressIp(org.tokend.wallet.xdr.IPAddrType.IPv4) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        ipv4.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<Ipv4> by ReflectiveXdrDecoder.wrapType()
    }

    open class Ipv6(var ipv6: XdrByteArrayFixed16): PeerAddressIp(org.tokend.wallet.xdr.IPAddrType.IPv6) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        ipv6.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<Ipv6> by ReflectiveXdrDecoder.wrapType()
    }
  }
}

// === xdr source ============================================================

//  enum MessageType
//  {
//      ERROR_MSG = 0,
//      AUTH = 2,
//      DONT_HAVE = 3,
//  
//      GET_PEERS = 4, // gets a list of peers this guy knows about
//      PEERS = 5,
//  
//      GET_TX_SET = 6, // gets a particular txset by hash
//      TX_SET = 7,
//  
//      TRANSACTION = 8, // pass on a tx you have heard about
//  
//      // SCP
//      GET_SCP_QUORUMSET = 9,
//      SCP_QUORUMSET = 10,
//      SCP_MESSAGE = 11,
//      GET_SCP_STATE = 12,
//  
//      // new messages
//      HELLO = 13
//  };

//  ===========================================================================
public enum class MessageType(val value: kotlin.Int): XdrEncodable {
  ERROR_MSG(0),
  AUTH(2),
  DONT_HAVE(3),
  GET_PEERS(4),
  PEERS(5),
  GET_TX_SET(6),
  TX_SET(7),
  TRANSACTION(8),
  GET_SCP_QUORUMSET(9),
  SCP_QUORUMSET(10),
  SCP_MESSAGE(11),
  GET_SCP_STATE(12),
  HELLO(13),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<MessageType> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  struct DontHave
//  {
//      MessageType type;
//      uint256 reqHash;
//  };

//  ===========================================================================
open class DontHave(
    var type: org.tokend.wallet.xdr.MessageType,
    var reqHash: org.tokend.wallet.xdr.Uint256
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    type.toXdr(stream)
    reqHash.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<DontHave> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  union StellarMessage switch (MessageType type)
//  {
//  case ERROR_MSG:
//      Error error;
//  case HELLO:
//      Hello hello;
//  case AUTH:
//      Auth auth;
//  case DONT_HAVE:
//      DontHave dontHave;
//  case GET_PEERS:
//      void;
//  case PEERS:
//      PeerAddress peers<>;
//  
//  case GET_TX_SET:
//      uint256 txSetHash;
//  case TX_SET:
//      TransactionSet txSet;
//  
//  case TRANSACTION:
//      TransactionEnvelope transaction;
//  
//  // SCP
//  case GET_SCP_QUORUMSET:
//      uint256 qSetHash;
//  //case SCP_QUORUMSET:
//  //    SCPQuorumSet qSet;
//  //case SCP_MESSAGE:
//  //    SCPEnvelope envelope;
//  case GET_SCP_STATE:
//      uint32 getSCPLedgerSeq; // ledger seq requested ; if 0, requests the latest
//  };

//  ===========================================================================
abstract class StellarMessage(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.MessageType): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<StellarMessage> by ReflectiveXdrDecoder.wrapType()

  open class ErrorMsg(var error: org.tokend.wallet.xdr.Error): StellarMessage(org.tokend.wallet.xdr.MessageType.ERROR_MSG) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      error.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<ErrorMsg> by ReflectiveXdrDecoder.wrapType()
  }

  open class Hello(var hello: org.tokend.wallet.xdr.Hello): StellarMessage(org.tokend.wallet.xdr.MessageType.HELLO) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      hello.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Hello> by ReflectiveXdrDecoder.wrapType()
  }

  open class Auth(var auth: org.tokend.wallet.xdr.Auth): StellarMessage(org.tokend.wallet.xdr.MessageType.AUTH) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      auth.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Auth> by ReflectiveXdrDecoder.wrapType()
  }

  open class DontHave(var dontHave: org.tokend.wallet.xdr.DontHave): StellarMessage(org.tokend.wallet.xdr.MessageType.DONT_HAVE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      dontHave.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<DontHave> by ReflectiveXdrDecoder.wrapType()
  }

  open class GetPeers: StellarMessage(org.tokend.wallet.xdr.MessageType.GET_PEERS)

  open class Peers(var peers: kotlin.Array<org.tokend.wallet.xdr.PeerAddress>): StellarMessage(org.tokend.wallet.xdr.MessageType.PEERS) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      peers.size.toXdr(stream)
      peers.forEach {
        it.toXdr(stream)
      }
    }

    companion object Decoder: XdrDecodable<Peers> by ReflectiveXdrDecoder.wrapType()
  }

  open class GetTxSet(var txSetHash: org.tokend.wallet.xdr.Uint256): StellarMessage(org.tokend.wallet.xdr.MessageType.GET_TX_SET) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      txSetHash.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<GetTxSet> by ReflectiveXdrDecoder.wrapType()
  }

  open class TxSet(var txSet: org.tokend.wallet.xdr.TransactionSet): StellarMessage(org.tokend.wallet.xdr.MessageType.TX_SET) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      txSet.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<TxSet> by ReflectiveXdrDecoder.wrapType()
  }

  open class Transaction(var transaction: org.tokend.wallet.xdr.TransactionEnvelope): StellarMessage(org.tokend.wallet.xdr.MessageType.TRANSACTION) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      transaction.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Transaction> by ReflectiveXdrDecoder.wrapType()
  }

  open class GetScpQuorumset(var qSetHash: org.tokend.wallet.xdr.Uint256): StellarMessage(org.tokend.wallet.xdr.MessageType.GET_SCP_QUORUMSET) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      qSetHash.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<GetScpQuorumset> by ReflectiveXdrDecoder.wrapType()
  }

  open class GetScpState(var getSCPLedgerSeq: org.tokend.wallet.xdr.Uint32): StellarMessage(org.tokend.wallet.xdr.MessageType.GET_SCP_STATE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      getSCPLedgerSeq.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<GetScpState> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  union AuthenticatedMessage switch (LedgerVersion v)
//  {
//  case EMPTY_VERSION:
//      struct
//  {
//     uint64 sequence;
//     StellarMessage message;
//     HmacSha256Mac mac;
//      } v0;
//  };

//  ===========================================================================
abstract class AuthenticatedMessage(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<AuthenticatedMessage> by ReflectiveXdrDecoder.wrapType()

  open class EmptyVersion(var v0: AuthenticatedMessageV0): AuthenticatedMessage(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      v0.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<EmptyVersion> by ReflectiveXdrDecoder.wrapType()
  }

  open class AuthenticatedMessageV0(
      var sequence: org.tokend.wallet.xdr.Uint64,
      var message: org.tokend.wallet.xdr.StellarMessage,
      var mac: org.tokend.wallet.xdr.HmacSha256Mac
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      sequence.toXdr(stream)
      message.toXdr(stream)
      mac.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<AuthenticatedMessageV0> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  struct CustomRuleAction
//  {
//      longstring actionType;
//  
//      longstring actionPayload;
//  };

//  ===========================================================================
open class CustomRuleAction(
    var actionType: org.tokend.wallet.xdr.Longstring,
    var actionPayload: org.tokend.wallet.xdr.Longstring
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    actionType.toXdr(stream)
    actionPayload.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CustomRuleAction> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  struct CustomRuleResource
//  {
//      longstring resourceType;
//      longstring resourcePayload;
//  };

//  ===========================================================================
open class CustomRuleResource(
    var resourceType: org.tokend.wallet.xdr.Longstring,
    var resourcePayload: org.tokend.wallet.xdr.Longstring
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    resourceType.toXdr(stream)
    resourcePayload.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CustomRuleResource> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  enum RuleResourceType
//  {
//      ANY = 1,
//      LEDGER_ENTRY = 2,
//      CUSTOM = 3
//  };

//  ===========================================================================
public enum class RuleResourceType(val value: kotlin.Int): XdrEncodable {
  ANY(1),
  LEDGER_ENTRY(2),
  CUSTOM(3),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<RuleResourceType> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  union RuleResource switch(RuleResourceType resourceType)
//  {
//      case ANY:
//          void;
//      case LEDGER_ENTRY:
//          InternalRuleResource internalRuleResource;
//      case CUSTOM:
//          CustomRuleResource customRuleResource;
//      default:
//          EmptyExt ext;
//  };

//  ===========================================================================
abstract class RuleResource(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.RuleResourceType): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<RuleResource> by ReflectiveXdrDecoder.wrapType()

  open class Any: RuleResource(org.tokend.wallet.xdr.RuleResourceType.ANY)

  open class LedgerEntry(var internalRuleResource: org.tokend.wallet.xdr.InternalRuleResource): RuleResource(org.tokend.wallet.xdr.RuleResourceType.LEDGER_ENTRY) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      internalRuleResource.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<LedgerEntry> by ReflectiveXdrDecoder.wrapType()
  }

  open class Custom(var customRuleResource: org.tokend.wallet.xdr.CustomRuleResource): RuleResource(org.tokend.wallet.xdr.RuleResourceType.CUSTOM) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      customRuleResource.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Custom> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  //: Describes properties of some entries that can be used to restrict the usage of entries
//  union InternalRuleResource switch (LedgerEntryType type)
//  {
//  case REVIEWABLE_REQUEST:
//      //: Describes properties that are equal to managed reviewable request entry fields
//      struct
//      {
//          ReviewableRequestOperationRule opRules<>;
//  
//          uint32 securityType;
//  
//          EmptyExt ext;
//      } reviewableRequest;
//  case ASSET:
//      //: Describes properties that are equal to managed asset entry fields
//      struct
//      {
//          AssetCode assetCode;
//          uint32 securityType;
//          uint32 state;
//  
//          EmptyExt ext;
//      } asset;
//  case ROLE:
//      //: Describes properties that are equal to managed signer role entry fields
//      struct
//      {
//          //: For signer role creating resource will be triggered if `roleID` equals `0`
//          uint64 roleID;
//  
//          EmptyExt ext;
//      } role;
//  case SIGNER:
//      //: Describes properties that are equal to managed signer entry fields
//      struct
//      {
//          uint64 roleIDs<>;
//  
//          EmptyExt ext;
//      } signer;
//  case KEY_VALUE:
//      //: Describes properties that are equal to managed key value entry fields
//      struct
//      {
//          //: prefix of key
//          longstring keyPrefix;
//  
//          //: reserved for future extension
//          EmptyExt ext;
//      } keyValue;
//  case DATA:
//      struct
//      {
//          uint32 securityType;
//          EmptyExt ext;
//      } data;
//  default:
//      //: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
abstract class InternalRuleResource(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerEntryType): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<InternalRuleResource> by ReflectiveXdrDecoder.wrapType()

  open class ReviewableRequest(var reviewableRequest: InternalRuleResourceReviewableRequest): InternalRuleResource(org.tokend.wallet.xdr.LedgerEntryType.REVIEWABLE_REQUEST) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      reviewableRequest.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<ReviewableRequest> by ReflectiveXdrDecoder.wrapType()
  }

  open class Asset(var asset: InternalRuleResourceAsset): InternalRuleResource(org.tokend.wallet.xdr.LedgerEntryType.ASSET) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      asset.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Asset> by ReflectiveXdrDecoder.wrapType()
  }

  open class Role(var role: InternalRuleResourceRole): InternalRuleResource(org.tokend.wallet.xdr.LedgerEntryType.ROLE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      role.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Role> by ReflectiveXdrDecoder.wrapType()
  }

  open class Signer(var signer: InternalRuleResourceSigner): InternalRuleResource(org.tokend.wallet.xdr.LedgerEntryType.SIGNER) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      signer.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Signer> by ReflectiveXdrDecoder.wrapType()
  }

  open class KeyValue(var keyValue: InternalRuleResourceKeyValue): InternalRuleResource(org.tokend.wallet.xdr.LedgerEntryType.KEY_VALUE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      keyValue.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<KeyValue> by ReflectiveXdrDecoder.wrapType()
  }

  open class Data(var data: InternalRuleResourceData): InternalRuleResource(org.tokend.wallet.xdr.LedgerEntryType.DATA) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      data.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Data> by ReflectiveXdrDecoder.wrapType()
  }

  open class InternalRuleResourceReviewableRequest(
      var opRules: kotlin.Array<org.tokend.wallet.xdr.ReviewableRequestOperationRule>,
      var securityType: org.tokend.wallet.xdr.Uint32,
      var ext: org.tokend.wallet.xdr.EmptyExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      opRules.size.toXdr(stream)
      opRules.forEach {
        it.toXdr(stream)
      }
      securityType.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<InternalRuleResourceReviewableRequest> by ReflectiveXdrDecoder.wrapType()
  }
  open class InternalRuleResourceAsset(
      var assetCode: org.tokend.wallet.xdr.AssetCode,
      var securityType: org.tokend.wallet.xdr.Uint32,
      var state: org.tokend.wallet.xdr.Uint32,
      var ext: org.tokend.wallet.xdr.EmptyExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      assetCode.toXdr(stream)
      securityType.toXdr(stream)
      state.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<InternalRuleResourceAsset> by ReflectiveXdrDecoder.wrapType()
  }
  open class InternalRuleResourceRole(
      var roleID: org.tokend.wallet.xdr.Uint64,
      var ext: org.tokend.wallet.xdr.EmptyExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      roleID.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<InternalRuleResourceRole> by ReflectiveXdrDecoder.wrapType()
  }
  open class InternalRuleResourceSigner(
      var roleIDs: kotlin.Array<org.tokend.wallet.xdr.Uint64>,
      var ext: org.tokend.wallet.xdr.EmptyExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      roleIDs.size.toXdr(stream)
      roleIDs.forEach {
        it.toXdr(stream)
      }
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<InternalRuleResourceSigner> by ReflectiveXdrDecoder.wrapType()
  }
  open class InternalRuleResourceKeyValue(
      var keyPrefix: org.tokend.wallet.xdr.Longstring,
      var ext: org.tokend.wallet.xdr.EmptyExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      keyPrefix.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<InternalRuleResourceKeyValue> by ReflectiveXdrDecoder.wrapType()
  }
  open class InternalRuleResourceData(
      var securityType: org.tokend.wallet.xdr.Uint32,
      var ext: org.tokend.wallet.xdr.EmptyExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      securityType.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<InternalRuleResourceData> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  //: Actions that can be applied to a signer rule resource
//  enum RuleActionType
//  {
//      ANY = 1,
//      CREATE = 2,
//      READ = 3,
//      UPDATE = 4,
//      ISSUE = 5,
//      SEND = 6,
//      REMOVE = 7,
//      DESTROY = 8,
//      REVIEW = 9,
//      CHANGE_ROLES = 10,
//      INITIATE_RECOVERY = 11,
//      RECOVER = 12,
//      UPDATE_MAX_ISSUANCE = 13,
//      UPDATE_STATE = 14,
//      RECEIVE = 19,
//      RECEIVE_ISSUANCE = 20,
//      CUSTOM = 21
//  };

//  ===========================================================================
public enum class RuleActionType(val value: kotlin.Int): XdrEncodable {
  ANY(1),
  CREATE(2),
  READ(3),
  UPDATE(4),
  ISSUE(5),
  SEND(6),
  REMOVE(7),
  DESTROY(8),
  REVIEW(9),
  CHANGE_ROLES(10),
  INITIATE_RECOVERY(11),
  RECOVER(12),
  UPDATE_MAX_ISSUANCE(13),
  UPDATE_STATE(14),
  RECEIVE(19),
  RECEIVE_ISSUANCE(20),
  CUSTOM(21),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<RuleActionType> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  union RuleAction switch (RuleActionType type) 
//  {
//  case ANY:
//      void;
//  case CREATE:
//      struct {
//          bool forOther;
//  
//          EmptyExt ext;
//      } create;
//  case UPDATE:
//      struct {
//          bool forOther;
//  
//          EmptyExt ext;
//      } update;
//  case ISSUE:
//      struct {
//          uint32 securityType;
//  
//          EmptyExt ext;
//      } issue;
//  case DESTROY:
//      struct {
//          uint32 securityType;
//          bool forOther;
//  
//          EmptyExt ext;
//      } destroy;
//  case SEND:
//      struct {
//          uint32 securityType;
//  
//          EmptyExt ext;
//      } send;
//  case RECEIVE:
//      struct {
//          uint32 securityType;
//  
//          EmptyExt ext;
//      } receive;
//  case RECEIVE_ISSUANCE:
//      struct {
//          uint32 securityType;
//  
//          EmptyExt ext;
//      } receiveIssuance;
//  case CHANGE_ROLES:
//      struct {
//          uint64 roleIDs<>; // if roleIDsToSet (from operation body) the same, action will triggered
//          bool forOther;
//  
//          EmptyExt ext;
//      } changeRoles;
//  case INITIATE_RECOVERY:
//      struct {
//          uint64 roleIDs<>;
//  
//          EmptyExt ext;
//      } initiateRecovery;
//  case REVIEW:
//      struct {
//          //: Bit mask of tasks that is allowed to add to reviewable request pending tasks
//          uint64 tasksToAdd;
//          //: Bit mask of tasks that is allowed to remove from reviewable request pending tasks
//          uint64 tasksToRemove;
//          EmptyExt ext;
//      } review;
//  case CUSTOM:
//      CustomRuleAction customRuleAction;
//  default:
//      EmptyExt ext;
//  };

//  ===========================================================================
abstract class RuleAction(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.RuleActionType): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<RuleAction> by ReflectiveXdrDecoder.wrapType()

  open class Any: RuleAction(org.tokend.wallet.xdr.RuleActionType.ANY)

  open class Create(var create: RuleActionCreate): RuleAction(org.tokend.wallet.xdr.RuleActionType.CREATE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      create.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Create> by ReflectiveXdrDecoder.wrapType()
  }

  open class Update(var update: RuleActionUpdate): RuleAction(org.tokend.wallet.xdr.RuleActionType.UPDATE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      update.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Update> by ReflectiveXdrDecoder.wrapType()
  }

  open class Issue(var issue: RuleActionIssue): RuleAction(org.tokend.wallet.xdr.RuleActionType.ISSUE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      issue.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Issue> by ReflectiveXdrDecoder.wrapType()
  }

  open class Destroy(var destroy: RuleActionDestroy): RuleAction(org.tokend.wallet.xdr.RuleActionType.DESTROY) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      destroy.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Destroy> by ReflectiveXdrDecoder.wrapType()
  }

  open class Send(var send: RuleActionSend): RuleAction(org.tokend.wallet.xdr.RuleActionType.SEND) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      send.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Send> by ReflectiveXdrDecoder.wrapType()
  }

  open class Receive(var receive: RuleActionReceive): RuleAction(org.tokend.wallet.xdr.RuleActionType.RECEIVE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      receive.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Receive> by ReflectiveXdrDecoder.wrapType()
  }

  open class ReceiveIssuance(var receiveIssuance: RuleActionReceiveIssuance): RuleAction(org.tokend.wallet.xdr.RuleActionType.RECEIVE_ISSUANCE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      receiveIssuance.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<ReceiveIssuance> by ReflectiveXdrDecoder.wrapType()
  }

  open class ChangeRoles(var changeRoles: RuleActionChangeRoles): RuleAction(org.tokend.wallet.xdr.RuleActionType.CHANGE_ROLES) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      changeRoles.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<ChangeRoles> by ReflectiveXdrDecoder.wrapType()
  }

  open class InitiateRecovery(var initiateRecovery: RuleActionInitiateRecovery): RuleAction(org.tokend.wallet.xdr.RuleActionType.INITIATE_RECOVERY) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      initiateRecovery.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<InitiateRecovery> by ReflectiveXdrDecoder.wrapType()
  }

  open class Review(var review: RuleActionReview): RuleAction(org.tokend.wallet.xdr.RuleActionType.REVIEW) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      review.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Review> by ReflectiveXdrDecoder.wrapType()
  }

  open class Custom(var customRuleAction: org.tokend.wallet.xdr.CustomRuleAction): RuleAction(org.tokend.wallet.xdr.RuleActionType.CUSTOM) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      customRuleAction.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Custom> by ReflectiveXdrDecoder.wrapType()
  }

  open class RuleActionCreate(
      var forOther: kotlin.Boolean,
      var ext: org.tokend.wallet.xdr.EmptyExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      forOther.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RuleActionCreate> by ReflectiveXdrDecoder.wrapType()
  }
  open class RuleActionUpdate(
      var forOther: kotlin.Boolean,
      var ext: org.tokend.wallet.xdr.EmptyExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      forOther.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RuleActionUpdate> by ReflectiveXdrDecoder.wrapType()
  }
  open class RuleActionIssue(
      var securityType: org.tokend.wallet.xdr.Uint32,
      var ext: org.tokend.wallet.xdr.EmptyExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      securityType.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RuleActionIssue> by ReflectiveXdrDecoder.wrapType()
  }
  open class RuleActionDestroy(
      var securityType: org.tokend.wallet.xdr.Uint32,
      var forOther: kotlin.Boolean,
      var ext: org.tokend.wallet.xdr.EmptyExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      securityType.toXdr(stream)
      forOther.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RuleActionDestroy> by ReflectiveXdrDecoder.wrapType()
  }
  open class RuleActionSend(
      var securityType: org.tokend.wallet.xdr.Uint32,
      var ext: org.tokend.wallet.xdr.EmptyExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      securityType.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RuleActionSend> by ReflectiveXdrDecoder.wrapType()
  }
  open class RuleActionReceive(
      var securityType: org.tokend.wallet.xdr.Uint32,
      var ext: org.tokend.wallet.xdr.EmptyExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      securityType.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RuleActionReceive> by ReflectiveXdrDecoder.wrapType()
  }
  open class RuleActionReceiveIssuance(
      var securityType: org.tokend.wallet.xdr.Uint32,
      var ext: org.tokend.wallet.xdr.EmptyExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      securityType.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RuleActionReceiveIssuance> by ReflectiveXdrDecoder.wrapType()
  }
  open class RuleActionChangeRoles(
      var roleIDs: kotlin.Array<org.tokend.wallet.xdr.Uint64>,
      var forOther: kotlin.Boolean,
      var ext: org.tokend.wallet.xdr.EmptyExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      roleIDs.size.toXdr(stream)
      roleIDs.forEach {
        it.toXdr(stream)
      }
      forOther.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RuleActionChangeRoles> by ReflectiveXdrDecoder.wrapType()
  }
  open class RuleActionInitiateRecovery(
      var roleIDs: kotlin.Array<org.tokend.wallet.xdr.Uint64>,
      var ext: org.tokend.wallet.xdr.EmptyExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      roleIDs.size.toXdr(stream)
      roleIDs.forEach {
        it.toXdr(stream)
      }
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RuleActionInitiateRecovery> by ReflectiveXdrDecoder.wrapType()
  }
  open class RuleActionReview(
      var tasksToAdd: org.tokend.wallet.xdr.Uint64,
      var tasksToRemove: org.tokend.wallet.xdr.Uint64,
      var ext: org.tokend.wallet.xdr.EmptyExt
    ) : XdrEncodable {

    override fun toXdr(stream: XdrDataOutputStream) {
      tasksToAdd.toXdr(stream)
      tasksToRemove.toXdr(stream)
      ext.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RuleActionReview> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  struct ReviewableRequestOperationRule 
//  {
//      RuleResource resource;
//  
//      RuleAction action;
//  
//      EmptyExt ext;
//  };

//  ===========================================================================
open class ReviewableRequestOperationRule(
    var resource: org.tokend.wallet.xdr.RuleResource,
    var action: org.tokend.wallet.xdr.RuleAction,
    var ext: org.tokend.wallet.xdr.EmptyExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    resource.toXdr(stream)
    action.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<ReviewableRequestOperationRule> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: An operation is the lowest unit of work that a transaction does
//  struct Operation
//  {
//      //: sourceAccount is the account used to run the operation
//      //: if not set, the runtime defaults to "sourceAccount" specified at
//      //: the transaction level
//      AccountID* sourceAccount;
//  
//      union switch (OperationType type)
//      {
//      case CREATE_ACCOUNT:
//          CreateAccountOp createAccountOp;
//  	case DESTRUCTION:
//  		DestructionOp destructionOp;
//  	case CREATE_BALANCE:
//  		CreateBalanceOp createBalanceOp;
//      case CREATE_ASSET:
//          CreateAssetOp createAssetOp;
//      case UPDATE_ASSET:
//          UpdateAssetOp updateAssetOp;
//      case CREATE_DATA:
//          CreateDataOp createDataOp;
//      case UPDATE_DATA:
//          UpdateDataOp updateDataOp;
//      case REMOVE_DATA:
//          RemoveDataOp removeDataOp;
//      case REVIEW_REQUEST:
//  		ReviewRequestOp reviewRequestOp;
//  	case PUT_KEY_VALUE:
//  	    PutKeyValueOp putKeyValueOp;
//      case REMOVE_KEY_VALUE:
//  	    RemoveKeyValueOp removeKeyValueOp;
//  	case CHANGE_ACCOUNT_ROLES:
//  		ChangeAccountRolesOp changeAccountRolesOp;
//      case PAYMENT:
//          PaymentOp paymentOp;
//      case CREATE_SIGNER:
//          CreateSignerOp createSignerOp;
//      case UPDATE_SIGNER:
//          UpdateSignerOp updateSignerOp;
//      case REMOVE_SIGNER:
//          RemoveSignerOp removeSignerOp;
//      case CREATE_ROLE:
//          CreateRoleOp createRoleOp;
//      case UPDATE_ROLE:
//          UpdateRoleOp updateRoleOp;
//      case REMOVE_ROLE:
//          RemoveRoleOp removeRoleOp;
//      case CREATE_RULE:
//          CreateRuleOp createRuleOp;
//      case UPDATE_RULE:
//          UpdateRuleOp updateRuleOp;
//      case REMOVE_RULE:
//          RemoveRuleOp removeRuleOp;
//      case CREATE_REVIEWABLE_REQUEST:
//          CreateReviewableRequestOp createReviewableRequestOp;
//      case UPDATE_REVIEWABLE_REQUEST:
//          UpdateReviewableRequestOp updateReviewableRequestOp;
//      case REMOVE_REVIEWABLE_REQUEST:
//          RemoveReviewableRequestOp removeReviewableRequestOp;
//      case INITIATE_KYC_RECOVERY:
//          InitiateKYCRecoveryOp initiateKYCRecoveryOp;
//      case KYC_RECOVERY:
//          KYCRecoveryOp kycRecoveryOp;
//      case ISSUANCE:
//          IssuanceOp issuanceOp;
//      }
//      body;
//  };

//  ===========================================================================
open class Operation(
    @XdrOptionalField
    var sourceAccount: org.tokend.wallet.xdr.AccountID?,
    var body: OperationBody
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    if (sourceAccount != null) {
      true.toXdr(stream)
      sourceAccount?.toXdr(stream)
    } else {
      false.toXdr(stream)
    }
    body.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<Operation> by ReflectiveXdrDecoder.wrapType()

  abstract class OperationBody(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.OperationType): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<OperationBody> by ReflectiveXdrDecoder.wrapType()

    open class CreateAccount(var createAccountOp: org.tokend.wallet.xdr.CreateAccountOp): OperationBody(org.tokend.wallet.xdr.OperationType.CREATE_ACCOUNT) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        createAccountOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<CreateAccount> by ReflectiveXdrDecoder.wrapType()
    }

    open class Destruction(var destructionOp: org.tokend.wallet.xdr.DestructionOp): OperationBody(org.tokend.wallet.xdr.OperationType.DESTRUCTION) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        destructionOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<Destruction> by ReflectiveXdrDecoder.wrapType()
    }

    open class CreateBalance(var createBalanceOp: org.tokend.wallet.xdr.CreateBalanceOp): OperationBody(org.tokend.wallet.xdr.OperationType.CREATE_BALANCE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        createBalanceOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<CreateBalance> by ReflectiveXdrDecoder.wrapType()
    }

    open class CreateAsset(var createAssetOp: org.tokend.wallet.xdr.CreateAssetOp): OperationBody(org.tokend.wallet.xdr.OperationType.CREATE_ASSET) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        createAssetOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<CreateAsset> by ReflectiveXdrDecoder.wrapType()
    }

    open class UpdateAsset(var updateAssetOp: org.tokend.wallet.xdr.UpdateAssetOp): OperationBody(org.tokend.wallet.xdr.OperationType.UPDATE_ASSET) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        updateAssetOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<UpdateAsset> by ReflectiveXdrDecoder.wrapType()
    }

    open class CreateData(var createDataOp: org.tokend.wallet.xdr.CreateDataOp): OperationBody(org.tokend.wallet.xdr.OperationType.CREATE_DATA) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        createDataOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<CreateData> by ReflectiveXdrDecoder.wrapType()
    }

    open class UpdateData(var updateDataOp: org.tokend.wallet.xdr.UpdateDataOp): OperationBody(org.tokend.wallet.xdr.OperationType.UPDATE_DATA) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        updateDataOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<UpdateData> by ReflectiveXdrDecoder.wrapType()
    }

    open class RemoveData(var removeDataOp: org.tokend.wallet.xdr.RemoveDataOp): OperationBody(org.tokend.wallet.xdr.OperationType.REMOVE_DATA) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        removeDataOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<RemoveData> by ReflectiveXdrDecoder.wrapType()
    }

    open class ReviewRequest(var reviewRequestOp: org.tokend.wallet.xdr.ReviewRequestOp): OperationBody(org.tokend.wallet.xdr.OperationType.REVIEW_REQUEST) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        reviewRequestOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<ReviewRequest> by ReflectiveXdrDecoder.wrapType()
    }

    open class PutKeyValue(var putKeyValueOp: org.tokend.wallet.xdr.PutKeyValueOp): OperationBody(org.tokend.wallet.xdr.OperationType.PUT_KEY_VALUE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        putKeyValueOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<PutKeyValue> by ReflectiveXdrDecoder.wrapType()
    }

    open class RemoveKeyValue(var removeKeyValueOp: org.tokend.wallet.xdr.RemoveKeyValueOp): OperationBody(org.tokend.wallet.xdr.OperationType.REMOVE_KEY_VALUE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        removeKeyValueOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<RemoveKeyValue> by ReflectiveXdrDecoder.wrapType()
    }

    open class ChangeAccountRoles(var changeAccountRolesOp: org.tokend.wallet.xdr.ChangeAccountRolesOp): OperationBody(org.tokend.wallet.xdr.OperationType.CHANGE_ACCOUNT_ROLES) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        changeAccountRolesOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<ChangeAccountRoles> by ReflectiveXdrDecoder.wrapType()
    }

    open class Payment(var paymentOp: org.tokend.wallet.xdr.PaymentOp): OperationBody(org.tokend.wallet.xdr.OperationType.PAYMENT) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        paymentOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<Payment> by ReflectiveXdrDecoder.wrapType()
    }

    open class CreateSigner(var createSignerOp: org.tokend.wallet.xdr.CreateSignerOp): OperationBody(org.tokend.wallet.xdr.OperationType.CREATE_SIGNER) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        createSignerOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<CreateSigner> by ReflectiveXdrDecoder.wrapType()
    }

    open class UpdateSigner(var updateSignerOp: org.tokend.wallet.xdr.UpdateSignerOp): OperationBody(org.tokend.wallet.xdr.OperationType.UPDATE_SIGNER) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        updateSignerOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<UpdateSigner> by ReflectiveXdrDecoder.wrapType()
    }

    open class RemoveSigner(var removeSignerOp: org.tokend.wallet.xdr.RemoveSignerOp): OperationBody(org.tokend.wallet.xdr.OperationType.REMOVE_SIGNER) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        removeSignerOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<RemoveSigner> by ReflectiveXdrDecoder.wrapType()
    }

    open class CreateRole(var createRoleOp: org.tokend.wallet.xdr.CreateRoleOp): OperationBody(org.tokend.wallet.xdr.OperationType.CREATE_ROLE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        createRoleOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<CreateRole> by ReflectiveXdrDecoder.wrapType()
    }

    open class UpdateRole(var updateRoleOp: org.tokend.wallet.xdr.UpdateRoleOp): OperationBody(org.tokend.wallet.xdr.OperationType.UPDATE_ROLE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        updateRoleOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<UpdateRole> by ReflectiveXdrDecoder.wrapType()
    }

    open class RemoveRole(var removeRoleOp: org.tokend.wallet.xdr.RemoveRoleOp): OperationBody(org.tokend.wallet.xdr.OperationType.REMOVE_ROLE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        removeRoleOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<RemoveRole> by ReflectiveXdrDecoder.wrapType()
    }

    open class CreateRule(var createRuleOp: org.tokend.wallet.xdr.CreateRuleOp): OperationBody(org.tokend.wallet.xdr.OperationType.CREATE_RULE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        createRuleOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<CreateRule> by ReflectiveXdrDecoder.wrapType()
    }

    open class UpdateRule(var updateRuleOp: org.tokend.wallet.xdr.UpdateRuleOp): OperationBody(org.tokend.wallet.xdr.OperationType.UPDATE_RULE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        updateRuleOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<UpdateRule> by ReflectiveXdrDecoder.wrapType()
    }

    open class RemoveRule(var removeRuleOp: org.tokend.wallet.xdr.RemoveRuleOp): OperationBody(org.tokend.wallet.xdr.OperationType.REMOVE_RULE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        removeRuleOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<RemoveRule> by ReflectiveXdrDecoder.wrapType()
    }

    open class CreateReviewableRequest(var createReviewableRequestOp: org.tokend.wallet.xdr.CreateReviewableRequestOp): OperationBody(org.tokend.wallet.xdr.OperationType.CREATE_REVIEWABLE_REQUEST) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        createReviewableRequestOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<CreateReviewableRequest> by ReflectiveXdrDecoder.wrapType()
    }

    open class UpdateReviewableRequest(var updateReviewableRequestOp: org.tokend.wallet.xdr.UpdateReviewableRequestOp): OperationBody(org.tokend.wallet.xdr.OperationType.UPDATE_REVIEWABLE_REQUEST) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        updateReviewableRequestOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<UpdateReviewableRequest> by ReflectiveXdrDecoder.wrapType()
    }

    open class RemoveReviewableRequest(var removeReviewableRequestOp: org.tokend.wallet.xdr.RemoveReviewableRequestOp): OperationBody(org.tokend.wallet.xdr.OperationType.REMOVE_REVIEWABLE_REQUEST) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        removeReviewableRequestOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<RemoveReviewableRequest> by ReflectiveXdrDecoder.wrapType()
    }

    open class InitiateKycRecovery(var initiateKYCRecoveryOp: org.tokend.wallet.xdr.InitiateKYCRecoveryOp): OperationBody(org.tokend.wallet.xdr.OperationType.INITIATE_KYC_RECOVERY) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        initiateKYCRecoveryOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<InitiateKycRecovery> by ReflectiveXdrDecoder.wrapType()
    }

    open class KycRecovery(var kycRecoveryOp: org.tokend.wallet.xdr.KYCRecoveryOp): OperationBody(org.tokend.wallet.xdr.OperationType.KYC_RECOVERY) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        kycRecoveryOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<KycRecovery> by ReflectiveXdrDecoder.wrapType()
    }

    open class Issuance(var issuanceOp: org.tokend.wallet.xdr.IssuanceOp): OperationBody(org.tokend.wallet.xdr.OperationType.ISSUANCE) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        issuanceOp.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<Issuance> by ReflectiveXdrDecoder.wrapType()
    }
  }
}

// === xdr source ============================================================

//  enum MemoType
//  {
//      MEMO_NONE = 0,
//      MEMO_TEXT = 1,
//      MEMO_ID = 2,
//      MEMO_HASH = 3,
//      MEMO_RETURN = 4
//  };

//  ===========================================================================
public enum class MemoType(val value: kotlin.Int): XdrEncodable {
  MEMO_NONE(0),
  MEMO_TEXT(1),
  MEMO_ID(2),
  MEMO_HASH(3),
  MEMO_RETURN(4),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<MemoType> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  union Memo switch (MemoType type)
//  {
//  case MEMO_NONE:
//      void;
//  case MEMO_TEXT:
//      string text<28>;
//  case MEMO_ID:
//      uint64 id;
//  case MEMO_HASH:
//      Hash hash; // the hash of what to pull from the content server
//  case MEMO_RETURN:
//      Hash retHash; // the hash of the tx you are rejecting
//  };

//  ===========================================================================
abstract class Memo(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.MemoType): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<Memo> by ReflectiveXdrDecoder.wrapType()

  open class MemoNone: Memo(org.tokend.wallet.xdr.MemoType.MEMO_NONE)

  open class MemoText(var text: kotlin.String): Memo(org.tokend.wallet.xdr.MemoType.MEMO_TEXT) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      text.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<MemoText> by ReflectiveXdrDecoder.wrapType()
  }

  open class MemoId(var id: org.tokend.wallet.xdr.Uint64): Memo(org.tokend.wallet.xdr.MemoType.MEMO_ID) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      id.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<MemoId> by ReflectiveXdrDecoder.wrapType()
  }

  open class MemoHash(var hash: org.tokend.wallet.xdr.Hash): Memo(org.tokend.wallet.xdr.MemoType.MEMO_HASH) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      hash.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<MemoHash> by ReflectiveXdrDecoder.wrapType()
  }

  open class MemoReturn(var retHash: org.tokend.wallet.xdr.Hash): Memo(org.tokend.wallet.xdr.MemoType.MEMO_RETURN) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      retHash.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<MemoReturn> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  struct TimeBounds
//  {
//      //: specifies inclusive min ledger close time after which transaction is valid
//      uint64 minTime;
//      //: specifies inclusive max ledger close time before which transaction is valid.
//      //: note: transaction will be rejected if max time exceeds close time of current ledger on more then [`tx_expiration_period`](https://tokend.gitlab.io/horizon/#operation/info)
//      uint64 maxTime; // 0 here means no maxTime
//  };

//  ===========================================================================
open class TimeBounds(
    var minTime: org.tokend.wallet.xdr.Uint64,
    var maxTime: org.tokend.wallet.xdr.Uint64
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    minTime.toXdr(stream)
    maxTime.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<TimeBounds> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: Transaction is a container for a set of operations
//  //:    - is executed by an account
//  //:    - operations are executed in order as one ACID transaction
//  //: (either all operations are applied or none are if any returns a failing code)
//  struct Transaction
//  {
//      //: account used to run the transaction
//      AccountID sourceAccount;
//  
//      //: random number used to ensure there is no hash collisions
//      Salt salt;
//  
//      //: validity range (inclusive) for the last ledger close time
//      TimeBounds timeBounds;
//  
//      //: allows to attach additional data to the transactions
//      Memo memo;
//  
//      //: list of operations to be applied. Max size is 100
//      Operation operations<100>;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class Transaction(
    var sourceAccount: org.tokend.wallet.xdr.AccountID,
    var salt: org.tokend.wallet.xdr.Salt,
    var timeBounds: org.tokend.wallet.xdr.TimeBounds,
    var memo: org.tokend.wallet.xdr.Memo,
    var operations: kotlin.Array<org.tokend.wallet.xdr.Operation>,
    var ext: TransactionExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    sourceAccount.toXdr(stream)
    salt.toXdr(stream)
    timeBounds.toXdr(stream)
    memo.toXdr(stream)
    operations.size.toXdr(stream)
    operations.forEach {
      it.toXdr(stream)
    }
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<Transaction> by ReflectiveXdrDecoder.wrapType()

  abstract class TransactionExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<TransactionExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: TransactionExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct TransactionEnvelope
//  {
//      Transaction tx;
//      //: list of signatures used to authorize transaction
//      DecoratedSignature signatures<20>;
//  };

//  ===========================================================================
open class TransactionEnvelope(
    var tx: org.tokend.wallet.xdr.Transaction,
    var signatures: kotlin.Array<org.tokend.wallet.xdr.DecoratedSignature>
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    tx.toXdr(stream)
    signatures.size.toXdr(stream)
    signatures.forEach {
      it.toXdr(stream)
    }
  }

  companion object Decoder: XdrDecodable<TransactionEnvelope> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  enum OperationResultCode
//  {
//      opINNER = 0, // inner object result is valid
//  
//      opBAD_AUTH = -1,      // too few valid signatures / wrong network
//      opNO_ACCOUNT = -2,    // source account was not found
//  	opNOT_ALLOWED = -3,   // operation is not allowed for this type of source account
//  	opACCOUNT_BLOCKED = -4, // account is blocked
//      opBAD_AUTH_EXTRA = -8,
//      opNO_ROLE_PERMISSION = -9, // not allowed for this role of source account
//      opNO_ENTRY = -10,
//      opNOT_SUPPORTED = -11,
//      opLICENSE_VIOLATION = -12, // number of admins is greater than allowed
//      //: operation was skipped cause of failure validation of previous operation
//      opSKIPPED = -13
//  };

//  ===========================================================================
public enum class OperationResultCode(val value: kotlin.Int): XdrEncodable {
  opINNER(0),
  opBAD_AUTH(-1),
  opNO_ACCOUNT(-2),
  opNOT_ALLOWED(-3),
  opACCOUNT_BLOCKED(-4),
  opBAD_AUTH_EXTRA(-8),
  opNO_ROLE_PERMISSION(-9),
  opNO_ENTRY(-10),
  opNOT_SUPPORTED(-11),
  opLICENSE_VIOLATION(-12),
  opSKIPPED(-13),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<OperationResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: Defines requirements for tx or operation which were not fulfilled
//  struct RuleRequirement
//  {
//  	//: defines resources to which access was denied
//      RuleResource resource;
//  	//: defines action which was denied
//      RuleAction action;
//  	//: defines account for which requirements were not met
//  	AccountID account;
//  
//  	//: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
open class RuleRequirement(
    var resource: org.tokend.wallet.xdr.RuleResource,
    var action: org.tokend.wallet.xdr.RuleAction,
    var account: org.tokend.wallet.xdr.AccountID,
    var ext: org.tokend.wallet.xdr.EmptyExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    resource.toXdr(stream)
    action.toXdr(stream)
    account.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<RuleRequirement> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  union OperationResultTr switch (OperationType type)
//  {
//  case CREATE_ACCOUNT:
//      CreateAccountResult createAccountResult;
//  case DESTRUCTION:
//      DestructionResult destructionResult;
//  case CREATE_BALANCE:
//      CreateBalanceResult createBalanceResult;
//  case CREATE_ASSET:
//      CreateAssetResult createAssetResult;
//  case UPDATE_ASSET:
//      UpdateAssetResult updateAssetResult;
//  case CREATE_DATA:
//      CreateDataResult createDataResult;
//  case UPDATE_DATA:
//      UpdateDataResult updateDataResult;
//  case REMOVE_DATA:
//      RemoveDataResult removeDataResult;
//  case REVIEW_REQUEST:
//      ReviewRequestResult reviewRequestResult;
//  case PUT_KEY_VALUE:
//      PutKeyValueResult putKeyValueResult;
//  case REMOVE_KEY_VALUE:
//      RemoveKeyValueResult removeKeyValueResult;
//  case CHANGE_ACCOUNT_ROLES:
//      ChangeAccountRolesResult changeAccountRolesResult;
//  case PAYMENT:
//      PaymentResult paymentResult;
//  case CREATE_SIGNER:
//      CreateSignerResult createSignerResult;
//  case UPDATE_SIGNER:
//      UpdateSignerResult updateSignerResult;
//  case REMOVE_SIGNER:
//      RemoveSignerResult removeSignerResult;
//  case CREATE_ROLE:
//      CreateRoleResult createRoleResult;
//  case UPDATE_ROLE:
//      UpdateRoleResult updateRoleResult;
//  case REMOVE_ROLE:
//      RemoveRoleResult removeRoleResult;
//  case CREATE_RULE:
//      CreateRuleResult createRuleResult;
//  case UPDATE_RULE:
//      UpdateRuleResult updateRuleResult;
//  case REMOVE_RULE:
//      RemoveRuleResult removeRuleResult;
//  case CREATE_REVIEWABLE_REQUEST:
//      CreateReviewableRequestResult createReviewableRequestResult;
//  case UPDATE_REVIEWABLE_REQUEST:
//      UpdateReviewableRequestResult updateReviewableRequestResult;
//  case REMOVE_REVIEWABLE_REQUEST:
//      RemoveReviewableRequestResult removeReviewableRequestResult;
//  case KYC_RECOVERY:
//      KYCRecoveryResult kycRecoveryResult;
//  case INITIATE_KYC_RECOVERY:
//      InitiateKYCRecoveryResult initiateKYCRecoveryResult;
//  case ISSUANCE:
//      IssuanceResult issuanceResult;
//  };

//  ===========================================================================
abstract class OperationResultTr(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.OperationType): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<OperationResultTr> by ReflectiveXdrDecoder.wrapType()

  open class CreateAccount(var createAccountResult: org.tokend.wallet.xdr.CreateAccountResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.CREATE_ACCOUNT) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      createAccountResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<CreateAccount> by ReflectiveXdrDecoder.wrapType()
  }

  open class Destruction(var destructionResult: org.tokend.wallet.xdr.DestructionResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.DESTRUCTION) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      destructionResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Destruction> by ReflectiveXdrDecoder.wrapType()
  }

  open class CreateBalance(var createBalanceResult: org.tokend.wallet.xdr.CreateBalanceResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.CREATE_BALANCE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      createBalanceResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<CreateBalance> by ReflectiveXdrDecoder.wrapType()
  }

  open class CreateAsset(var createAssetResult: org.tokend.wallet.xdr.CreateAssetResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.CREATE_ASSET) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      createAssetResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<CreateAsset> by ReflectiveXdrDecoder.wrapType()
  }

  open class UpdateAsset(var updateAssetResult: org.tokend.wallet.xdr.UpdateAssetResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.UPDATE_ASSET) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      updateAssetResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<UpdateAsset> by ReflectiveXdrDecoder.wrapType()
  }

  open class CreateData(var createDataResult: org.tokend.wallet.xdr.CreateDataResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.CREATE_DATA) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      createDataResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<CreateData> by ReflectiveXdrDecoder.wrapType()
  }

  open class UpdateData(var updateDataResult: org.tokend.wallet.xdr.UpdateDataResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.UPDATE_DATA) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      updateDataResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<UpdateData> by ReflectiveXdrDecoder.wrapType()
  }

  open class RemoveData(var removeDataResult: org.tokend.wallet.xdr.RemoveDataResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.REMOVE_DATA) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      removeDataResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RemoveData> by ReflectiveXdrDecoder.wrapType()
  }

  open class ReviewRequest(var reviewRequestResult: org.tokend.wallet.xdr.ReviewRequestResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.REVIEW_REQUEST) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      reviewRequestResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<ReviewRequest> by ReflectiveXdrDecoder.wrapType()
  }

  open class PutKeyValue(var putKeyValueResult: org.tokend.wallet.xdr.PutKeyValueResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.PUT_KEY_VALUE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      putKeyValueResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<PutKeyValue> by ReflectiveXdrDecoder.wrapType()
  }

  open class RemoveKeyValue(var removeKeyValueResult: org.tokend.wallet.xdr.RemoveKeyValueResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.REMOVE_KEY_VALUE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      removeKeyValueResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RemoveKeyValue> by ReflectiveXdrDecoder.wrapType()
  }

  open class ChangeAccountRoles(var changeAccountRolesResult: org.tokend.wallet.xdr.ChangeAccountRolesResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.CHANGE_ACCOUNT_ROLES) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      changeAccountRolesResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<ChangeAccountRoles> by ReflectiveXdrDecoder.wrapType()
  }

  open class Payment(var paymentResult: org.tokend.wallet.xdr.PaymentResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.PAYMENT) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      paymentResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Payment> by ReflectiveXdrDecoder.wrapType()
  }

  open class CreateSigner(var createSignerResult: org.tokend.wallet.xdr.CreateSignerResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.CREATE_SIGNER) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      createSignerResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<CreateSigner> by ReflectiveXdrDecoder.wrapType()
  }

  open class UpdateSigner(var updateSignerResult: org.tokend.wallet.xdr.UpdateSignerResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.UPDATE_SIGNER) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      updateSignerResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<UpdateSigner> by ReflectiveXdrDecoder.wrapType()
  }

  open class RemoveSigner(var removeSignerResult: org.tokend.wallet.xdr.RemoveSignerResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.REMOVE_SIGNER) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      removeSignerResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RemoveSigner> by ReflectiveXdrDecoder.wrapType()
  }

  open class CreateRole(var createRoleResult: org.tokend.wallet.xdr.CreateRoleResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.CREATE_ROLE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      createRoleResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<CreateRole> by ReflectiveXdrDecoder.wrapType()
  }

  open class UpdateRole(var updateRoleResult: org.tokend.wallet.xdr.UpdateRoleResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.UPDATE_ROLE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      updateRoleResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<UpdateRole> by ReflectiveXdrDecoder.wrapType()
  }

  open class RemoveRole(var removeRoleResult: org.tokend.wallet.xdr.RemoveRoleResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.REMOVE_ROLE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      removeRoleResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RemoveRole> by ReflectiveXdrDecoder.wrapType()
  }

  open class CreateRule(var createRuleResult: org.tokend.wallet.xdr.CreateRuleResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.CREATE_RULE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      createRuleResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<CreateRule> by ReflectiveXdrDecoder.wrapType()
  }

  open class UpdateRule(var updateRuleResult: org.tokend.wallet.xdr.UpdateRuleResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.UPDATE_RULE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      updateRuleResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<UpdateRule> by ReflectiveXdrDecoder.wrapType()
  }

  open class RemoveRule(var removeRuleResult: org.tokend.wallet.xdr.RemoveRuleResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.REMOVE_RULE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      removeRuleResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RemoveRule> by ReflectiveXdrDecoder.wrapType()
  }

  open class CreateReviewableRequest(var createReviewableRequestResult: org.tokend.wallet.xdr.CreateReviewableRequestResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.CREATE_REVIEWABLE_REQUEST) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      createReviewableRequestResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<CreateReviewableRequest> by ReflectiveXdrDecoder.wrapType()
  }

  open class UpdateReviewableRequest(var updateReviewableRequestResult: org.tokend.wallet.xdr.UpdateReviewableRequestResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.UPDATE_REVIEWABLE_REQUEST) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      updateReviewableRequestResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<UpdateReviewableRequest> by ReflectiveXdrDecoder.wrapType()
  }

  open class RemoveReviewableRequest(var removeReviewableRequestResult: org.tokend.wallet.xdr.RemoveReviewableRequestResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.REMOVE_REVIEWABLE_REQUEST) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      removeReviewableRequestResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<RemoveReviewableRequest> by ReflectiveXdrDecoder.wrapType()
  }

  open class KycRecovery(var kycRecoveryResult: org.tokend.wallet.xdr.KYCRecoveryResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.KYC_RECOVERY) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      kycRecoveryResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<KycRecovery> by ReflectiveXdrDecoder.wrapType()
  }

  open class InitiateKycRecovery(var initiateKYCRecoveryResult: org.tokend.wallet.xdr.InitiateKYCRecoveryResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.INITIATE_KYC_RECOVERY) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      initiateKYCRecoveryResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<InitiateKycRecovery> by ReflectiveXdrDecoder.wrapType()
  }

  open class Issuance(var issuanceResult: org.tokend.wallet.xdr.IssuanceResult): OperationResultTr(org.tokend.wallet.xdr.OperationType.ISSUANCE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      issuanceResult.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Issuance> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  union OperationResult switch (OperationResultCode code)
//  {
//  case opINNER:
//      OperationResultTr tr;
//  case opNO_ENTRY:
//      LedgerKey entryKey;
//  case opNO_ROLE_PERMISSION:
//  case opBAD_AUTH:
//      RuleRequirement requirement;
//  default:
//      void;
//  };

//  ===========================================================================
abstract class OperationResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.OperationResultCode): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<OperationResult> by ReflectiveXdrDecoder.wrapType()

  open class Opinner(var tr: org.tokend.wallet.xdr.OperationResultTr): OperationResult(org.tokend.wallet.xdr.OperationResultCode.opINNER) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      tr.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Opinner> by ReflectiveXdrDecoder.wrapType()
  }

  open class OpnoEntry(var entryKey: org.tokend.wallet.xdr.LedgerKey): OperationResult(org.tokend.wallet.xdr.OperationResultCode.opNO_ENTRY) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      entryKey.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<OpnoEntry> by ReflectiveXdrDecoder.wrapType()
  }

  open class OpnoRolePermission(var requirement: org.tokend.wallet.xdr.RuleRequirement): OperationResult(org.tokend.wallet.xdr.OperationResultCode.opNO_ROLE_PERMISSION) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      requirement.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<OpnoRolePermission> by ReflectiveXdrDecoder.wrapType()
  }

  open class OpbadAuth(var requirement: org.tokend.wallet.xdr.RuleRequirement): OperationResult(org.tokend.wallet.xdr.OperationResultCode.opBAD_AUTH) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      requirement.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<OpbadAuth> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  enum TransactionResultCode
//  {
//      txSUCCESS = 0, // all operations succeeded
//  
//      txFAILED = -1, // one of the operations failed (none were applied)
//  
//      txTOO_EARLY = -2,         // ledger closeTime before minTime
//      txTOO_LATE = -3,          // ledger closeTime after maxTime
//      txMISSING_OPERATION = -4, // no operation was specified
//  
//      txBAD_AUTH = -5,                   // too few valid signatures / wrong network
//      txNO_ACCOUNT = -6,                 // source account not found
//      txBAD_AUTH_EXTRA = -7,             // unused signatures attached to transaction
//      txINTERNAL_ERROR = -8,             // an unknown error occurred
//      txACCOUNT_BLOCKED = -9,            // account is blocked and cannot be source of tx
//      txDUPLICATION = -10,               // if timing is stored
//      txINSUFFICIENT_FEE = -11,          // the actual total fee amount is greater than the max total fee amount, provided by the source
//      txSOURCE_UNDERFUNDED = -12,        // not enough tx fee asset on source balance
//      txCOMMISSION_LINE_FULL = -13,      // commission tx fee asset balance amount overflow
//      txFEE_INCORRECT_PRECISION = -14,   // fee amount is incompatible with asset precision
//      txNO_ROLE_PERMISSION = -15         // account role has not rule that allows send transaction
//  };

//  ===========================================================================
public enum class TransactionResultCode(val value: kotlin.Int): XdrEncodable {
  txSUCCESS(0),
  txFAILED(-1),
  txTOO_EARLY(-2),
  txTOO_LATE(-3),
  txMISSING_OPERATION(-4),
  txBAD_AUTH(-5),
  txNO_ACCOUNT(-6),
  txBAD_AUTH_EXTRA(-7),
  txINTERNAL_ERROR(-8),
  txACCOUNT_BLOCKED(-9),
  txDUPLICATION(-10),
  txINSUFFICIENT_FEE(-11),
  txSOURCE_UNDERFUNDED(-12),
  txCOMMISSION_LINE_FULL(-13),
  txFEE_INCORRECT_PRECISION(-14),
  txNO_ROLE_PERMISSION(-15),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<TransactionResultCode> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  struct OperationFee
//  {
//      OperationType operationType;
//      uint64 amount;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class OperationFee(
    var operationType: org.tokend.wallet.xdr.OperationType,
    var amount: org.tokend.wallet.xdr.Uint64,
    var ext: OperationFeeExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    operationType.toXdr(stream)
    amount.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<OperationFee> by ReflectiveXdrDecoder.wrapType()

  abstract class OperationFeeExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<OperationFeeExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: OperationFeeExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  struct TransactionResult
//  {
//      int64 feeCharged; // actual fee charged for the transaction
//  
//      union switch (TransactionResultCode code)
//      {
//      case txSUCCESS:
//      case txFAILED:
//          OperationResult results<>;
//      case txNO_ROLE_PERMISSION:
//          RuleRequirement requirement;
//      default:
//          void;
//      }
//      result;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
open class TransactionResult(
    var feeCharged: org.tokend.wallet.xdr.Int64,
    var result: TransactionResultResult,
    var ext: TransactionResultExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    feeCharged.toXdr(stream)
    result.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<TransactionResult> by ReflectiveXdrDecoder.wrapType()

  abstract class TransactionResultResult(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.TransactionResultCode): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<TransactionResultResult> by ReflectiveXdrDecoder.wrapType()

    open class Txsuccess(var results: kotlin.Array<org.tokend.wallet.xdr.OperationResult>): TransactionResultResult(org.tokend.wallet.xdr.TransactionResultCode.txSUCCESS) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        results.size.toXdr(stream)
        results.forEach {
          it.toXdr(stream)
        }
      }

      companion object Decoder: XdrDecodable<Txsuccess> by ReflectiveXdrDecoder.wrapType()
    }

    open class Txfailed(var results: kotlin.Array<org.tokend.wallet.xdr.OperationResult>): TransactionResultResult(org.tokend.wallet.xdr.TransactionResultCode.txFAILED) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        results.size.toXdr(stream)
        results.forEach {
          it.toXdr(stream)
        }
      }

      companion object Decoder: XdrDecodable<Txfailed> by ReflectiveXdrDecoder.wrapType()
    }

    open class TxnoRolePermission(var requirement: org.tokend.wallet.xdr.RuleRequirement): TransactionResultResult(org.tokend.wallet.xdr.TransactionResultCode.txNO_ROLE_PERMISSION) {
      override fun toXdr(stream: XdrDataOutputStream) {
        super.toXdr(stream)
        requirement.toXdr(stream)
      }

      companion object Decoder: XdrDecodable<TxnoRolePermission> by ReflectiveXdrDecoder.wrapType()
    }
  }
  abstract class TransactionResultExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<TransactionResultExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: TransactionResultExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum LedgerVersion
//  {
//      EMPTY_VERSION = 0
//  };

//  ===========================================================================
public enum class LedgerVersion(val value: kotlin.Int): XdrEncodable {
  EMPTY_VERSION(0),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<LedgerVersion> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  union EmptyExt switch (LedgerVersion v)
//  {
//  case EMPTY_VERSION:
//      void;
//  };

//  ===========================================================================
abstract class EmptyExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<EmptyExt> by ReflectiveXdrDecoder.wrapType()

  open class EmptyVersion: EmptyExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
}

// === xdr source ============================================================

//  typedef opaque Hash[32];

//  ===========================================================================
public typealias Hash = XdrByteArrayFixed32

// === xdr source ============================================================

//  typedef opaque uint256[32];

//  ===========================================================================
public typealias Uint256 = XdrByteArrayFixed32

// === xdr source ============================================================

//  typedef unsigned int uint32;

//  ===========================================================================
public typealias Uint32 = kotlin.Int

// === xdr source ============================================================

//  typedef int int32;

//  ===========================================================================
public typealias Int32 = kotlin.Int

// === xdr source ============================================================

//  typedef unsigned hyper uint64;

//  ===========================================================================
public typealias Uint64 = kotlin.Long

// === xdr source ============================================================

//  typedef hyper int64;

//  ===========================================================================
public typealias Int64 = kotlin.Long

// === xdr source ============================================================

//  enum CryptoKeyType
//  {
//      KEY_TYPE_ED25519 = 0
//  };

//  ===========================================================================
public enum class CryptoKeyType(val value: kotlin.Int): XdrEncodable {
  KEY_TYPE_ED25519(0),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<CryptoKeyType> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  enum PublicKeyType
//  {
//  	PUBLIC_KEY_TYPE_ED25519 = 0
//  };

//  ===========================================================================
public enum class PublicKeyType(val value: kotlin.Int): XdrEncodable {
  PUBLIC_KEY_TYPE_ED25519(0),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<PublicKeyType> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  union PublicKey switch (CryptoKeyType type)
//  {
//  case KEY_TYPE_ED25519:
//      uint256 ed25519;
//  };

//  ===========================================================================
abstract class PublicKey(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.CryptoKeyType): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<PublicKey> by ReflectiveXdrDecoder.wrapType()

  open class KeyTypeEd25519(var ed25519: org.tokend.wallet.xdr.Uint256): PublicKey(org.tokend.wallet.xdr.CryptoKeyType.KEY_TYPE_ED25519) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      ed25519.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<KeyTypeEd25519> by ReflectiveXdrDecoder.wrapType()
  }
}

// === xdr source ============================================================

//  enum LedgerEntryType
//  {
//      ACCOUNT = 1,
//      SIGNER = 2,
//      BALANCE = 3,
//      DATA = 4,
//      ASSET = 5,
//      REFERENCE = 6,
//      REVIEWABLE_REQUEST = 7,
//  	ACCOUNT_KYC = 8,
//      KEY_VALUE = 9,
//      RULE = 10,
//      ROLE = 11
//  };

//  ===========================================================================
public enum class LedgerEntryType(val value: kotlin.Int): XdrEncodable {
  ACCOUNT(1),
  SIGNER(2),
  BALANCE(3),
  DATA(4),
  ASSET(5),
  REFERENCE(6),
  REVIEWABLE_REQUEST(7),
  ACCOUNT_KYC(8),
  KEY_VALUE(9),
  RULE(10),
  ROLE(11),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<LedgerEntryType> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  typedef opaque Signature<64>;

//  ===========================================================================
public typealias Signature = kotlin.ByteArray

// === xdr source ============================================================

//  typedef opaque SignatureHint[4];

//  ===========================================================================
public typealias SignatureHint = XdrByteArrayFixed4

// === xdr source ============================================================

//  typedef PublicKey NodeID;

//  ===========================================================================
public typealias NodeID = org.tokend.wallet.xdr.PublicKey

// === xdr source ============================================================

//  struct Curve25519Secret
//  {
//          opaque key[32];
//  };

//  ===========================================================================
open class Curve25519Secret(
    var key: XdrByteArrayFixed32
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    key.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<Curve25519Secret> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  struct Curve25519Public
//  {
//          opaque key[32];
//  };

//  ===========================================================================
open class Curve25519Public(
    var key: XdrByteArrayFixed32
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    key.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<Curve25519Public> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  struct HmacSha256Key
//  {
//          opaque key[32];
//  };

//  ===========================================================================
open class HmacSha256Key(
    var key: XdrByteArrayFixed32
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    key.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<HmacSha256Key> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  struct HmacSha256Mac
//  {
//          opaque mac[32];
//  };

//  ===========================================================================
open class HmacSha256Mac(
    var mac: XdrByteArrayFixed32
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    mac.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<HmacSha256Mac> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  typedef PublicKey AccountID;

//  ===========================================================================
public typealias AccountID = org.tokend.wallet.xdr.PublicKey

// === xdr source ============================================================

//  typedef PublicKey BalanceID;

//  ===========================================================================
public typealias BalanceID = org.tokend.wallet.xdr.PublicKey

// === xdr source ============================================================

//  typedef string string32<32>;

//  ===========================================================================
public typealias String32 = kotlin.String

// === xdr source ============================================================

//  typedef string string64<64>;

//  ===========================================================================
public typealias String64 = kotlin.String

// === xdr source ============================================================

//  typedef string string256<256>;

//  ===========================================================================
public typealias String256 = kotlin.String

// === xdr source ============================================================

//  typedef string longstring<>;

//  ===========================================================================
public typealias Longstring = kotlin.String

// === xdr source ============================================================

//  typedef string AssetCode<16>;

//  ===========================================================================
public typealias AssetCode = kotlin.String

// === xdr source ============================================================

//  typedef uint64 Salt;

//  ===========================================================================
public typealias Salt = org.tokend.wallet.xdr.Uint64

// === xdr source ============================================================

//  typedef opaque DataValue<64>;

//  ===========================================================================
public typealias DataValue = kotlin.ByteArray

// === xdr source ============================================================

//  //: `Fee` is used to unite fixed and percent fee amounts
//  struct Fee {
//      //: Fixed amount to pay for the operation
//  	uint64 fixed;
//  	//: Part of the managed amount in percents
//  	uint64 percent;
//  
//      //: reserved for future use
//      union switch(LedgerVersion v)
//      {
//          case EMPTY_VERSION:
//              void;
//      }
//      ext;
//  };

//  ===========================================================================
open class Fee(
    var fixed: org.tokend.wallet.xdr.Uint64,
    var percent: org.tokend.wallet.xdr.Uint64,
    var ext: FeeExt
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    fixed.toXdr(stream)
    percent.toXdr(stream)
    ext.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<Fee> by ReflectiveXdrDecoder.wrapType()

  abstract class FeeExt(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.LedgerVersion): XdrEncodable {
    override fun toXdr(stream: XdrDataOutputStream) {
        discriminant.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<FeeExt> by ReflectiveXdrDecoder.wrapType()

    open class EmptyVersion: FeeExt(org.tokend.wallet.xdr.LedgerVersion.EMPTY_VERSION)
  }
}

// === xdr source ============================================================

//  enum OperationType
//  {
//      CREATE_ACCOUNT = 1,
//      PUT_KEY_VALUE = 2,
//      REMOVE_KEY_VALUE = 3,
//      CREATE_ASSET = 4,
//      UPDATE_ASSET = 5,
//      PAYMENT = 6,
//      ISSUANCE = 7,
//      DESTRUCTION = 8,
//      CREATE_BALANCE = 9,
//      CREATE_DATA = 10,
//      UPDATE_DATA = 11,
//      REMOVE_DATA = 12,
//      REVIEW_REQUEST = 13,
//  	CHANGE_ACCOUNT_ROLES = 14,
//      CREATE_SIGNER = 15,
//      UPDATE_SIGNER = 16,
//      REMOVE_SIGNER = 17,
//      CREATE_ROLE = 18,
//      UPDATE_ROLE = 19,
//      REMOVE_ROLE = 20,
//      CREATE_RULE = 21,
//      UPDATE_RULE = 22,
//      REMOVE_RULE = 23,
//      CREATE_REVIEWABLE_REQUEST = 24,
//      UPDATE_REVIEWABLE_REQUEST = 25,
//      REMOVE_REVIEWABLE_REQUEST = 26,
//      INITIATE_KYC_RECOVERY = 27,
//      KYC_RECOVERY = 28
//  };

//  ===========================================================================
public enum class OperationType(val value: kotlin.Int): XdrEncodable {
  CREATE_ACCOUNT(1),
  PUT_KEY_VALUE(2),
  REMOVE_KEY_VALUE(3),
  CREATE_ASSET(4),
  UPDATE_ASSET(5),
  PAYMENT(6),
  ISSUANCE(7),
  DESTRUCTION(8),
  CREATE_BALANCE(9),
  CREATE_DATA(10),
  UPDATE_DATA(11),
  REMOVE_DATA(12),
  REVIEW_REQUEST(13),
  CHANGE_ACCOUNT_ROLES(14),
  CREATE_SIGNER(15),
  UPDATE_SIGNER(16),
  REMOVE_SIGNER(17),
  CREATE_ROLE(18),
  UPDATE_ROLE(19),
  REMOVE_ROLE(20),
  CREATE_RULE(21),
  UPDATE_RULE(22),
  REMOVE_RULE(23),
  CREATE_REVIEWABLE_REQUEST(24),
  UPDATE_REVIEWABLE_REQUEST(25),
  REMOVE_REVIEWABLE_REQUEST(26),
  INITIATE_KYC_RECOVERY(27),
  KYC_RECOVERY(28),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<OperationType> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  struct DecoratedSignature
//  {
//      SignatureHint hint;  // last 4 bytes of the public key, used as a hint
//      Signature signature; // actual signature
//  };

//  ===========================================================================
open class DecoratedSignature(
    var hint: org.tokend.wallet.xdr.SignatureHint,
    var signature: org.tokend.wallet.xdr.Signature
  ) : XdrEncodable {

  override fun toXdr(stream: XdrDataOutputStream) {
    hint.toXdr(stream)
    signature.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<DecoratedSignature> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  //: Defines the type of destination for operation
//  enum DestinationType {
//      ACCOUNT = 0,
//      BALANCE = 1
//  };

//  ===========================================================================
public enum class DestinationType(val value: kotlin.Int): XdrEncodable {
  ACCOUNT(0),
  BALANCE(1),
  ;

  override fun toXdr(stream: XdrDataOutputStream) {
      value.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<DestinationType> by ReflectiveXdrDecoder.wrapType()
}

// === xdr source ============================================================

//  union MovementDestination switch (DestinationType type) {
//      case ACCOUNT:
//          AccountID accountID;
//      case BALANCE:
//          BalanceID balanceID;
//  };

//  ===========================================================================
abstract class MovementDestination(@XdrDiscriminantField val discriminant: org.tokend.wallet.xdr.DestinationType): XdrEncodable {
  override fun toXdr(stream: XdrDataOutputStream) {
      discriminant.toXdr(stream)
  }

  companion object Decoder: XdrDecodable<MovementDestination> by ReflectiveXdrDecoder.wrapType()

  open class Account(var accountID: org.tokend.wallet.xdr.AccountID): MovementDestination(org.tokend.wallet.xdr.DestinationType.ACCOUNT) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      accountID.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Account> by ReflectiveXdrDecoder.wrapType()
  }

  open class Balance(var balanceID: org.tokend.wallet.xdr.BalanceID): MovementDestination(org.tokend.wallet.xdr.DestinationType.BALANCE) {
    override fun toXdr(stream: XdrDataOutputStream) {
      super.toXdr(stream)
      balanceID.toXdr(stream)
    }

    companion object Decoder: XdrDecodable<Balance> by ReflectiveXdrDecoder.wrapType()
  }
}
